
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/hooks/use-toast";
import { Send, Loader2, CheckCircle, XCircle } from "lucide-react";
import { SiTelegram } from "react-icons/si";

export default function TelegramTester() {
  const [botToken, setBotToken] = useState('');
  const [chatId, setChatId] = useState('');
  const [message, setMessage] = useState('üìä –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è!\n\n‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  const [isTesting, setIsTesting] = useState(false);
  const [testResult, setTestResult] = useState<{ success: boolean; message: string } | null>(null);

  const testTelegramConnection = async () => {
    if (!botToken || !chatId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–£–∫–∞–∂–∏—Ç–µ Bot Token –∏ Chat ID",
        variant: "destructive",
      });
      return;
    }

    setIsTesting(true);
    setTestResult(null);

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
      const botResponse = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
      const botData = await botResponse.json();

      if (!botData.ok) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token');
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const sendResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      const sendData = await sendResponse.json();

      if (sendData.ok) {
        setTestResult({
          success: true,
          message: `–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: ${sendData.result.message_id}`,
        });
        toast({
          title: "‚úÖ –£—Å–ø–µ—Ö!",
          description: "Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        });
      } else {
        throw new Error(sendData.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (error) {
      setTestResult({
        success: false,
        message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
      });
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsTesting(false);
    }
  };

  const saveTelegramConfig = async () => {
    if (!botToken || !chatId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–£–∫–∞–∂–∏—Ç–µ Bot Token –∏ Chat ID",
        variant: "destructive",
      });
      return;
    }

    try {
      const response = await fetch('/api/user-accounts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          platformId: 4, // Telegram
          accountHandle: chatId,
          accessToken: botToken,
          platformConfig: {
            channelUsername: chatId,
          },
          isActive: true,
          authStatus: 'connected',
        }),
      });

      if (response.ok) {
        toast({
          title: "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
          description: "Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
        });
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <SiTelegram className="w-6 h-6 text-blue-500" />
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–∞
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label className="text-sm font-medium">Bot Token</label>
          <Input
            type="password"
            placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
            value={botToken}
            onChange={(e) => setBotToken(e.target.value)}
          />
          <p className="text-xs text-muted-foreground">
            –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
          </p>
        </div>

        <div className="space-y-2">
          <label className="text-sm font-medium">Chat ID / Username</label>
          <Input
            placeholder="@your_channel –∏–ª–∏ -1001234567890"
            value={chatId}
            onChange={(e) => setChatId(e.target.value)}
          />
          <p className="text-xs text-muted-foreground">
            ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username —Å @
          </p>
        </div>

        <div className="space-y-2">
          <label className="text-sm font-medium">–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</label>
          <Textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            rows={4}
          />
        </div>

        {testResult && (
          <div className={`p-3 rounded-lg border ${testResult.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>
            <div className="flex items-center gap-2">
              {testResult.success ? (
                <CheckCircle className="w-5 h-5 text-green-600" />
              ) : (
                <XCircle className="w-5 h-5 text-red-600" />
              )}
              <span className={testResult.success ? 'text-green-700' : 'text-red-700'}>
                {testResult.message}
              </span>
            </div>
          </div>
        )}

        <div className="flex gap-2">
          <Button
            onClick={testTelegramConnection}
            disabled={isTesting || !botToken || !chatId}
            className="flex-1"
          >
            {isTesting ? (
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <Send className="w-4 h-4 mr-2" />
            )}
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>

          <Button
            onClick={saveTelegramConfig}
            disabled={!testResult?.success}
            variant="outline"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          </Button>
        </div>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-medium text-sm mb-2">üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
          <ol className="text-sm space-y-1 text-muted-foreground">
            <li>1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram</li>
            <li>2. –ü–æ–ª—É—á–∏—Ç–µ Bot Token</li>
            <li>3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</li>
            <li>4. –£–∑–Ω–∞–π—Ç–µ Chat ID –∫–∞–Ω–∞–ª–∞ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot)</li>
            <li>5. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"</li>
          </ol>
        </div>
      </CardContent>
    </Card>
  );
}
