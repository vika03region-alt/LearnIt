
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { 
  Bot, 
  Play, 
  Square, 
  Zap, 
  Brain, 
  Cpu, 
  Code, 
  Loader2,
  CheckCircle,
  AlertTriangle,
  Activity
} from "lucide-react";
import { toast } from "@/hooks/use-toast";

interface AutonomousStatus {
  isActive: boolean;
  currentCycle: number;
  improvementsCount: number;
  recentHistory: Array<{
    cycle: number;
    feature: string;
    timestamp: string;
    status: 'completed' | 'failed';
  }>;
}

export default function AutonomousAIControl() {
  const [status, setStatus] = useState<AutonomousStatus | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isEnhancing, setIsEnhancing] = useState(false);

  useEffect(() => {
    fetchStatus();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(fetchStatus, 30000);
    return () => clearInterval(interval);
  }, []);

  const fetchStatus = async () => {
    try {
      const response = await fetch('/api/autonomous/status');
      const data = await response.json();
      setStatus(data.status);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  };

  const startAutonomous = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/autonomous/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      const result = await response.json();

      if (response.ok) {
        toast({
          title: "ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI –∑–∞–ø—É—â–µ–Ω–∞!",
          description: "–°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–Ω–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —É–ª—É—á—à–∞—Ç—å—Å—è",
        });
        await fetchStatus();
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const stopAutonomous = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/autonomous/stop', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      const result = await response.json();

      if (response.ok) {
        toast({
          title: "üõë –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
          description: "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        });
        await fetchStatus();
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const enhanceAI = async () => {
    setIsEnhancing(true);
    try {
      const response = await fetch('/api/autonomous/enhance-ai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      const result = await response.json();

      if (response.ok) {
        toast({
          title: "üß† –£–ª—É—á—à–µ–Ω–∏–µ AI –∑–∞–ø—É—â–µ–Ω–æ!",
          description: "–°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–∞–µ—Ç —Å–≤–æ–∏ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        });
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsEnhancing(false);
    }
  };

  const getStatusColor = (isActive: boolean) => {
    return isActive ? 'bg-green-500' : 'bg-gray-400';
  };

  const getStatusText = (isActive: boolean) => {
    return isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
  };

  return (
    <div className="space-y-6">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <Card className="bg-gradient-to-br from-purple-50 to-blue-50 border-purple-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-3">
            <div className="relative">
              <Bot className="w-8 h-8 text-purple-600" />
              {status?.isActive && (
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              )}
            </div>
            <div>
              <h3 className="text-xl font-bold">ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI –°–∏—Å—Ç–µ–º–∞</h3>
              <p className="text-sm text-muted-foreground font-normal">
                –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
              </p>
            </div>
            <div className="ml-auto">
              <Badge 
                variant={status?.isActive ? "default" : "secondary"}
                className={`${getStatusColor(status?.isActive || false)} text-white`}
              >
                {getStatusText(status?.isActive || false)}
              </Badge>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-3 gap-4">
            <div className="text-center p-4 bg-white rounded-lg border">
              <div className="text-2xl font-bold text-purple-600">
                {status?.currentCycle || 0}
              </div>
              <div className="text-sm text-muted-foreground">–¶–∏–∫–ª–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è</div>
            </div>
            <div className="text-center p-4 bg-white rounded-lg border">
              <div className="text-2xl font-bold text-blue-600">
                {status?.improvementsCount || 0}
              </div>
              <div className="text-sm text-muted-foreground">–£–ª—É—á—à–µ–Ω–∏–π</div>
            </div>
            <div className="text-center p-4 bg-white rounded-lg border">
              <div className="text-2xl font-bold text-green-600">
                {status?.recentHistory?.filter(h => h.status === 'completed').length || 0}
              </div>
              <div className="text-sm text-muted-foreground">–£—Å–ø–µ—à–Ω—ã—Ö</div>
            </div>
          </div>

          {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex gap-3">
            {!status?.isActive ? (
              <Button
                onClick={startAutonomous}
                disabled={isLoading}
                className="flex-1 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700"
              >
                {isLoading ? (
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <Play className="w-4 h-4 mr-2" />
                )}
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≤—Ç–æ–Ω–æ–º–Ω—É—é AI
              </Button>
            ) : (
              <Button
                onClick={stopAutonomous}
                disabled={isLoading}
                variant="destructive"
                className="flex-1"
              >
                {isLoading ? (
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <Square className="w-4 h-4 mr-2" />
                )}
                –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI
              </Button>
            )}

            <Button
              onClick={enhanceAI}
              disabled={isEnhancing}
              variant="outline"
              className="border-purple-200 hover:bg-purple-50"
            >
              {isEnhancing ? (
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              ) : (
                <Zap className="w-4 h-4 mr-2" />
              )}
              –£–ª—É—á—à–∏—Ç—å AI
            </Button>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞) */}
          {status?.isActive && (
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium">–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ</span>
                <Activity className="w-4 h-4 text-green-500 animate-pulse" />
              </div>
              <Progress value={75} className="h-2" />
              <p className="text-xs text-muted-foreground">
                –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏—Ö –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Code className="w-5 h-5" />
            –ò—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
          </CardTitle>
        </CardHeader>
        <CardContent>
          {status?.recentHistory && status.recentHistory.length > 0 ? (
            <div className="space-y-3">
              {status.recentHistory.slice().reverse().map((item, index) => (
                <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center gap-3">
                    {item.status === 'completed' ? (
                      <CheckCircle className="w-5 h-5 text-green-500" />
                    ) : (
                      <AlertTriangle className="w-5 h-5 text-red-500" />
                    )}
                    <div>
                      <div className="font-medium">{item.feature}</div>
                      <div className="text-sm text-muted-foreground">
                        –¶–∏–∫–ª {item.cycle} ‚Ä¢ {new Date(item.timestamp).toLocaleString()}
                      </div>
                    </div>
                  </div>
                  <Badge variant={item.status === 'completed' ? 'default' : 'destructive'}>
                    {item.status === 'completed' ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}
                  </Badge>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              <Bot className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p>–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5" />
            –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <Cpu className="w-4 h-4" />
                –ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
              </h4>
              <ul className="text-sm text-muted-foreground space-y-1">
                <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</li>
                <li>‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ –±–∞–≥–æ–≤</li>
                <li>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
                <li>‚Ä¢ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–æ–¥–∞</li>
              </ul>
            </div>
            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <Zap className="w-4 h-4" />
                –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
              </h4>
              <ul className="text-sm text-muted-foreground space-y-1">
                <li>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</li>
                <li>‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</li>
                <li>‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ UI/UX</li>
                <li>‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
