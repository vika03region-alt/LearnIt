import { useState } from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { 
  Rocket, 
  StopCircle, 
  Activity, 
  CheckCircle2,
  Clock,
  Zap,
  TrendingUp,
  Users,
  DollarSign,
  BarChart3
} from 'lucide-react';
import { isUnauthorizedError } from '@/lib/authUtils';

interface AutomationStatus {
  isActive: boolean;
  config?: any;
  scheduledJobs: number;
  safetyStatus: string;
  nextRun: string | null;
}

export default function MasterAutomationControl() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isStarting, setIsStarting] = useState(false);

  const { data: automationStatus, isLoading } = useQuery<AutomationStatus>({
    queryKey: ['/api/automation/status'],
    refetchInterval: 5000,
    retry: false,
  });

  const startAutomationMutation = useMutation({
    mutationFn: async () => {
      setIsStarting(true);
      const response = await apiRequest('POST', '/api/automation/start', {});
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/automation/status'] });
      queryClient.invalidateQueries({ queryKey: ['/api/activity'] });
      toast({
        title: 'üöÄ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!',
        description: '–í—Å–µ 10 —à–∞–≥–æ–≤ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã',
      });
      setIsStarting(false);
    },
    onError: (error) => {
      setIsStarting(false);
      if (isUnauthorizedError(error)) {
        window.location.href = "/api/login";
        return;
      }
      toast({
        title: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞',
        description: error.message,
        variant: 'destructive',
      });
    },
  });

  const stopAutomationMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest('POST', '/api/automation/stop', {});
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/automation/status'] });
      queryClient.invalidateQueries({ queryKey: ['/api/activity'] });
      toast({
        title: '‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
        description: '–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
      });
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        window.location.href = "/api/login";
        return;
      }
      toast({
        title: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
        description: error.message,
        variant: 'destructive',
      });
    },
  });

  const features = [
    { icon: TrendingUp, label: '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö & Grok AI', color: 'text-blue-500' },
    { icon: Zap, label: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', color: 'text-purple-500' },
    { icon: Clock, label: '–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ 3x/–¥–µ–Ω—å', color: 'text-green-500' },
    { icon: Users, label: '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ & –∫–≤–∏–∑—ã', color: 'text-orange-500' },
    { icon: Rocket, label: '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å', color: 'text-pink-500' },
    { icon: DollarSign, label: '–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è VIP', color: 'text-yellow-500' },
    { icon: BarChart3, label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ & A/B', color: 'text-indigo-500' },
  ];

  return (
    <Card className="bg-gradient-to-br from-purple-50 to-blue-50 border-2 border-purple-200">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2 text-2xl">
              <Rocket className="h-7 w-7 text-purple-600" />
              –ú–∞—Å—Ç–µ—Ä-–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            </CardTitle>
            <CardDescription className="mt-2">
              –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (10 —à–∞–≥–æ–≤)
            </CardDescription>
          </div>
          {automationStatus?.isActive ? (
            <Badge className="bg-green-500 text-white px-4 py-2 flex items-center gap-2">
              <Activity className="h-4 w-4 animate-pulse" />
              –ê–∫—Ç–∏–≤–Ω–∞
            </Badge>
          ) : (
            <Badge variant="secondary" className="px-4 py-2">
              –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            </Badge>
          )}
        </div>
      </CardHeader>

      <CardContent className="space-y-6">
        {/* Features Grid */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {features.map((feature, index) => (
            <div
              key={index}
              className="flex items-center gap-2 bg-white/70 backdrop-blur-sm p-3 rounded-lg border border-slate-200"
            >
              <feature.icon className={`h-5 w-5 ${feature.color}`} />
              <span className="text-sm font-medium text-slate-700">{feature.label}</span>
            </div>
          ))}
        </div>

        {/* Status Info */}
        {automationStatus && (
          <div className="bg-white/70 backdrop-blur-sm p-4 rounded-lg border border-slate-200 space-y-3">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-sm text-slate-600">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</div>
                <div className="text-2xl font-bold text-purple-600">
                  {automationStatus.scheduledJobs || 0}
                </div>
              </div>
              <div>
                <div className="text-sm text-slate-600">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</div>
                <div className="flex items-center justify-center gap-2">
                  {automationStatus.safetyStatus === 'safe' ? (
                    <CheckCircle2 className="h-6 w-6 text-green-500" />
                  ) : (
                    <StopCircle className="h-6 w-6 text-yellow-500" />
                  )}
                  <span className="text-sm font-medium capitalize">
                    {automationStatus.safetyStatus}
                  </span>
                </div>
              </div>
              <div>
                <div className="text-sm text-slate-600">–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫</div>
                <div className="text-sm font-medium text-slate-700">
                  {automationStatus.nextRun 
                    ? new Date(automationStatus.nextRun).toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })
                    : '‚Äî'}
                </div>
              </div>
              <div>
                <div className="text-sm text-slate-600">–°—Ç–∞—Ç—É—Å</div>
                <div className={`text-sm font-medium ${
                  automationStatus.isActive ? 'text-green-600' : 'text-slate-500'
                }`}>
                  {automationStatus.isActive ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Control Buttons */}
        <div className="flex gap-3">
          <Button
            onClick={() => startAutomationMutation.mutate()}
            disabled={automationStatus?.isActive || startAutomationMutation.isPending || isStarting}
            className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-semibold py-6 text-lg"
            data-testid="button-start-automation"
          >
            {isStarting ? (
              <>
                <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                –ó–∞–ø—É—Å–∫...
              </>
            ) : (
              <>
                <Rocket className="h-5 w-5 mr-2" />
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
              </>
            )}
          </Button>

          <Button
            onClick={() => stopAutomationMutation.mutate()}
            disabled={!automationStatus?.isActive || stopAutomationMutation.isPending}
            variant="outline"
            className="px-6 py-6 border-2"
            data-testid="button-stop-automation"
          >
            <StopCircle className="h-5 w-5 mr-2" />
            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>

        {/* Info */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <p className="text-sm text-blue-800">
            <strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç:</strong> –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (Grok AI) ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 
            (OpenAI + Hugging Face FREE) ‚Üí –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ‚Üí –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí –í–∏—Ä–∞–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ 
            ‚Üí –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è ‚Üí –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Üí A/B —Ç–µ—Å—Ç—ã ‚Üí –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
          </p>
        </div>
      </CardContent>
    </Card>
  );
}
