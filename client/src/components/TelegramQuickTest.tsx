
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/hooks/use-toast";
import { Send, Loader2, CheckCircle, XCircle, Bot } from "lucide-react";
import { SiTelegram } from "react-icons/si";

export default function TelegramQuickTest() {
  const [isTesting, setIsTesting] = useState(false);
  const [testResults, setTestResults] = useState<{
    botTokenValid: boolean;
    channelAccessible: boolean;
    messageSent: boolean;
    error?: string;
  } | null>(null);

  const runQuickTest = async () => {
    setIsTesting(true);
    setTestResults(null);

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–∞ (—á–µ—Ä–µ–∑ API)
      const response = await fetch('/api/telegram/quick-test', {
        method: 'POST',
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω');
      }

      setTestResults(data);

      if (data.messageSent) {
        toast({
          title: "‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω!",
          description: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª",
        });
      } else {
        toast({
          title: "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram",
          description: data.error || "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      setTestResults({
        botTokenValid: false,
        channelAccessible: false,
        messageSent: false,
        error: error.message,
      });
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsTesting(false);
    }
  };

  return (
    <Card className="border-blue-200 bg-gradient-to-br from-blue-50 to-white">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <SiTelegram className="w-6 h-6 text-blue-500" />
          –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <p className="font-medium">–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</p>
            <p className="text-sm text-muted-foreground">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ Bot Token –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
            </p>
          </div>
          <Button
            onClick={runQuickTest}
            disabled={isTesting}
            size="lg"
          >
            {isTesting ? (
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <Send className="w-4 h-4 mr-2" />
            )}
            {isTesting ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'}
          </Button>
        </div>

        {testResults && (
          <div className="space-y-2 pt-4 border-t">
            <div className="flex items-center justify-between">
              <span className="text-sm">Bot Token –≤–∞–ª–∏–¥–µ–Ω</span>
              {testResults.botTokenValid ? (
                <Badge variant="default" className="gap-1">
                  <CheckCircle className="w-3 h-3" />
                  –î–∞
                </Badge>
              ) : (
                <Badge variant="destructive" className="gap-1">
                  <XCircle className="w-3 h-3" />
                  –ù–µ—Ç
                </Badge>
              )}
            </div>

            <div className="flex items-center justify-between">
              <span className="text-sm">–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É</span>
              {testResults.channelAccessible ? (
                <Badge variant="default" className="gap-1">
                  <CheckCircle className="w-3 h-3" />
                  –î–∞
                </Badge>
              ) : (
                <Badge variant="destructive" className="gap-1">
                  <XCircle className="w-3 h-3" />
                  –ù–µ—Ç
                </Badge>
              )}
            </div>

            <div className="flex items-center justify-between">
              <span className="text-sm">–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
              {testResults.messageSent ? (
                <Badge variant="default" className="gap-1">
                  <CheckCircle className="w-3 h-3" />
                  –î–∞
                </Badge>
              ) : (
                <Badge variant="destructive" className="gap-1">
                  <XCircle className="w-3 h-3" />
                  –ù–µ—Ç
                </Badge>
              )}
            </div>

            {testResults.error && (
              <div className="p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700">
                <strong>–û—à–∏–±–∫–∞:</strong> {testResults.error}
              </div>
            )}
          </div>
        )}

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 text-xs">
          <p className="font-medium mb-1">üìã –¢—Ä–µ–±—É–µ—Ç—Å—è:</p>
          <ul className="list-disc list-inside space-y-1 text-muted-foreground">
            <li>TELEGRAM_BOT_TOKEN –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö</li>
            <li>TELEGRAM_CHANNEL_ID –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö</li>
            <li>–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}
