import React, { useState, useEffect } from 'react';
import { Clock, Zap, Bot } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';

const GrokAPITest = () => {
  const [testPrompt, setTestPrompt] = useState('–ü—Ä–∏–≤–µ—Ç, Grok!');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  const testGrokAPI = async () => {
    setLoading(true);
    setResult(null);
    setError(null);

    try {
      console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Grok API...');
      const response = await fetch('/api/grok/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: testPrompt,
        }),
      });

      const data = await response.json();
      console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç Grok API:', data);

      if (data.success) {
        setResult(data);
        console.log('‚úÖ Grok API —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!');
      } else {
        setError(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        console.error('‚ùå –û—à–∏–±–∫–∞ Grok API:', data.error);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const runAdvancedTest = async () => {
    setLoading(true);
    setResult(null);
    setError(null);

    try {
      const advancedPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞ https://t.me/IIPRB. 
      –ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞? 
      –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.`;

      const response = await fetch('/api/grok/advanced-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: advancedPrompt,
          type: 'telegram_promotion_analysis'
        }),
      });

      const data = await response.json();

      if (data.success) {
        setResult(data);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto space-y-6">
      <h1 className="text-3xl font-bold">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Grok API</h1>

      <div className="space-y-4">
        <div>
          <Label htmlFor="testPrompt">–í–∞—à –∑–∞–ø—Ä–æ—Å:</Label>
          <Textarea
            id="testPrompt"
            value={testPrompt}
            onChange={(e) => setTestPrompt(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è Grok API..."
            rows={4}
            className="mt-2"
          />
        </div>

        <div className="flex gap-2">
          <Button onClick={testGrokAPI} disabled={loading} variant="default">
            {loading ? (
              <>
                <Clock className="w-4 h-4 mr-2 animate-spin" />
                –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...
              </>
            ) : (
              <>
                <Zap className="w-4 h-4 mr-2" />
                –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
              </>
            )}
          </Button>

          <Button onClick={runAdvancedTest} disabled={loading} variant="outline">
            {loading ? (
              <>
                <Clock className="w-4 h-4 mr-2 animate-spin" />
                –ê–Ω–∞–ª–∏–∑...
              </>
            ) : (
              <>
                <Bot className="w-4 h-4 mr-2" />
                –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
              </>
            )}
          </Button>
        </div>
      </div>

      <Separator />

      {loading && (
        <div className="flex items-center justify-center py-10">
          <Clock className="w-6 h-6 mr-2 animate-spin" />
          <span className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
      )}

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">–û—à–∏–±–∫–∞:</strong>
          <span className="block sm:inline ml-2">{error}</span>
        </div>
      )}

      {result && !loading && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong>
          <pre className="mt-2 whitespace-pre-wrap font-mono">{JSON.stringify(result, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export default GrokAPITest;