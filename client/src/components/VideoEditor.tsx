
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Slider } from './ui/slider';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Scissors, Play, Download, Wand2, Filter } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

export function VideoEditor() {
  const [trimStart, setTrimStart] = useState(0);
  const [trimEnd, setTrimEnd] = useState(100);
  const [selectedFilter, setSelectedFilter] = useState('none');
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();

  const filters = [
    { id: 'none', name: '–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞', emoji: 'üé¨' },
    { id: 'vintage', name: '–í–∏–Ω—Ç–∞–∂', emoji: 'üì∑' },
    { id: 'bright', name: '–Ø—Ä–∫–∏–π', emoji: '‚òÄÔ∏è' },
    { id: 'dark', name: '–¢—ë–º–Ω—ã–π', emoji: 'üåô' },
  ];

  const applyEdits = async () => {
    setIsProcessing(true);
    try {
      const response = await fetch('/api/video/edit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          trimStart,
          trimEnd,
          filter: selectedFilter,
        }),
      });

      if (response.ok) {
        toast({
          title: "‚úÖ –ì–æ—Ç–æ–≤–æ!",
          description: "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Scissors className="w-5 h-5" />
          –†–µ–¥–∞–∫—Ç–æ—Ä –≤–∏–¥–µ–æ
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
          <Play className="w-16 h-16 text-gray-400" />
        </div>

        <Tabs defaultValue="trim">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="trim">–û–±—Ä–µ–∑–∫–∞</TabsTrigger>
            <TabsTrigger value="filters">–§–∏–ª—å—Ç—Ä—ã</TabsTrigger>
            <TabsTrigger value="ai">AI –£–ª—É—á—à–µ–Ω–∏–µ</TabsTrigger>
          </TabsList>

          <TabsContent value="trim" className="space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">–ù–∞—á–∞–ª–æ: {trimStart}%</label>
              <Slider
                value={[trimStart]}
                onValueChange={(value) => setTrimStart(value[0])}
                max={100}
                step={1}
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">–ö–æ–Ω–µ—Ü: {trimEnd}%</label>
              <Slider
                value={[trimEnd]}
                onValueChange={(value) => setTrimEnd(value[0])}
                max={100}
                step={1}
              />
            </div>
          </TabsContent>

          <TabsContent value="filters">
            <div className="grid grid-cols-2 gap-2">
              {filters.map((filter) => (
                <Button
                  key={filter.id}
                  variant={selectedFilter === filter.id ? 'default' : 'outline'}
                  onClick={() => setSelectedFilter(filter.id)}
                  className="flex items-center gap-2"
                >
                  <span>{filter.emoji}</span>
                  {filter.name}
                </Button>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="ai" className="space-y-4">
            <Button variant="outline" className="w-full">
              <Wand2 className="w-4 h-4 mr-2" />
              –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
            </Button>
            <Button variant="outline" className="w-full">
              <Filter className="w-4 h-4 mr-2" />
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
            </Button>
          </TabsContent>
        </Tabs>

        <div className="flex gap-2">
          <Button
            onClick={applyEdits}
            disabled={isProcessing}
            className="flex-1"
          >
            {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
          </Button>
          <Button variant="outline">
            <Download className="w-4 h-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
