
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Rocket, TrendingUp, Users, Zap, Brain, Target } from 'lucide-react';

interface PromotionStats {
  postsScheduled: number;
  dailyPosts: number;
  aiModel: string;
  channel: string;
  followers: number;
  engagementRate: number;
}

export default function TelegramPromotion() {
  const [loading, setLoading] = useState(false);
  const [analyzing, setAnalyzing] = useState(false);
  const [stats, setStats] = useState<PromotionStats>({
    postsScheduled: 3,
    dailyPosts: 3,
    aiModel: 'Grok 2',
    channel: '@IIPRB',
    followers: 0,
    engagementRate: 0,
  });
  const [promotionActive, setPromotionActive] = useState(true);
  const { toast } = useToast();

  const publishNow = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/telegram/test-post', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });

      const result = await response.json();

      if (result.success) {
        toast({
          title: '‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!',
          description: `–¢–µ–º–∞: ${result.topic}`,
        });
      } else {
        throw new Error(result.error);
      }
    } catch (error: any) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const analyzeChannel = async () => {
    setAnalyzing(true);
    try {
      const response = await fetch('/api/telegram/analyze-channel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ channelId: '@IIPRB' }),
      });

      const result = await response.json();

      if (result.success) {
        setStats(prev => ({
          ...prev,
          followers: result.subscribers || 0,
          engagementRate: result.engagementRate || 0,
        }));

        toast({
          title: 'üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
          description: `–ö–∞–Ω–∞–ª: ${result.title || '@IIPRB'}`,
        });
      }
    } catch (error) {
      toast({
        title: '‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        description: '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        variant: 'default',
      });
    } finally {
      setAnalyzing(false);
    }
  };

  const startPromotion = async () => {
    try {
      const response = await fetch('/api/promotion/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          strategy: {
            clientId: 'IIPRB_Channel',
            platforms: ['telegram'],
            contentCalendar: [],
            targetMetrics: {
              followerGrowth: 30,
              engagementIncrease: 50,
              reachExpansion: 70,
            },
            budget: {
              aiCredits: 1000,
            },
            adaptiveElements: {
              contentTypes: ['educational', 'practical', 'motivational'],
              postingTimes: [9, 15, 20],
              hashtagSets: [['#AI', '#–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '#–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']],
              targetAudiences: ['–ø—Å–∏—Ö–æ–ª–æ–≥–∏', '–∫–æ—É—á–∏', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'],
            },
          },
        }),
      });

      const result = await response.json();

      toast({
        title: 'üöÄ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
      });

      setPromotionActive(true);
    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Rocket className="w-5 h-5 text-blue-500" />
                –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–∞
              </CardTitle>
              <CardDescription>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ AI –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ {stats.channel}</CardDescription>
            </div>
            <Badge variant={promotionActive ? 'default' : 'secondary'}>
              {promotionActive ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' : 'üü° –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-4 bg-blue-50 dark:bg-blue-950 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{stats.dailyPosts}</div>
              <div className="text-sm text-muted-foreground">–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å</div>
            </div>
            <div className="text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{stats.followers}</div>
              <div className="text-sm text-muted-foreground">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</div>
            </div>
            <div className="text-center p-4 bg-purple-50 dark:bg-purple-950 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">{stats.engagementRate.toFixed(1)}%</div>
              <div className="text-sm text-muted-foreground">–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</div>
            </div>
            <div className="text-center p-4 bg-orange-50 dark:bg-orange-950 rounded-lg">
              <div className="text-2xl font-bold text-orange-600">{stats.aiModel}</div>
              <div className="text-sm text-muted-foreground">AI –º–æ–¥–µ–ª—å</div>
            </div>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π */}
          <div className="space-y-3">
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>–†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (+30% —Ü–µ–ª—å)</span>
                <span className="font-medium">12%</span>
              </div>
              <Progress value={40} className="h-2" />
            </div>
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ (+50% —Ü–µ–ª—å)</span>
                <span className="font-medium">25%</span>
              </div>
              <Progress value={50} className="h-2" />
            </div>
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞ (+70% —Ü–µ–ª—å)</span>
                <span className="font-medium">35%</span>
              </div>
              <Progress value={50} className="h-2" />
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex gap-3 pt-4">
            <Button 
              onClick={publishNow} 
              disabled={loading}
              className="flex-1"
            >
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –ü—É–±–ª–∏–∫–∞—Ü–∏—è...
                </>
              ) : (
                <>
                  <Zap className="w-4 h-4 mr-2" />
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å
                </>
              )}
            </Button>
            <Button 
              onClick={analyzeChannel} 
              disabled={analyzing}
              variant="outline"
              className="flex-1"
            >
              {analyzing ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –ê–Ω–∞–ª–∏–∑...
                </>
              ) : (
                <>
                  <Brain className="w-4 h-4 mr-2" />
                  –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª
                </>
              )}
            </Button>
          </div>

          {!promotionActive && (
            <Button 
              onClick={startPromotion} 
              className="w-full"
              variant="default"
            >
              <Target className="w-4 h-4 mr-2" />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
            </Button>
          )}
        </CardContent>
      </Card>

      {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5 text-green-500" />
            –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="font-medium">09:00</span>
                <span className="text-sm text-muted-foreground">–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç</span>
              </div>
              <Badge variant="outline">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</Badge>
            </div>
            <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                <span className="font-medium">15:00</span>
                <span className="text-sm text-muted-foreground">–î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç</span>
              </div>
              <Badge variant="outline">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</Badge>
            </div>
            <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse"></div>
                <span className="font-medium">20:00</span>
                <span className="text-sm text-muted-foreground">–í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç</span>
              </div>
              <Badge variant="outline">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</Badge>
            </div>
            <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-orange-500 rounded-full animate-pulse"></div>
                <span className="font-medium">12:00</span>
                <span className="text-sm text-muted-foreground">–û–ø—Ä–æ—Å</span>
              </div>
              <Badge variant="outline">–ü–Ω, –ß—Ç</Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="w-5 h-5 text-indigo-500" />
            AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {[
              '–ö–∞–∫ ChatGPT —ç–∫–æ–Ω–æ–º–∏—Ç 5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å',
              '–¢–û–ü-5 AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
              '–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤',
              'AI –≤ –∫–æ—É—á–∏–Ω–≥–µ',
              '–ë—É–¥—É—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å AI',
              '–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å AI –∑–∞ 10 –º–∏–Ω—É—Ç',
            ].map((topic, i) => (
              <div key={i} className="p-2 bg-muted rounded text-sm">
                {topic}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
