import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupAuth, isAuthenticated } from "./replitAuth";
import { seedPlatforms } from "./seedDatabase";
import { aiContentService } from "./services/aiContent";
import { aiAnalyticsService } from "./services/aiAnalytics";
import { aiAssistantService } from "./services/aiAssistant";
import { clientAnalysisService } from "./services/clientAnalysis";
import { promotionEngine } from "./services/promotionEngine";
import { socialMediaManager } from "./services/socialMediaIntegration";
import { analyticsService } from "./services/analytics";
import { safetyService } from "./services/safety";
import { schedulerService } from "./services/scheduler";
import { setupPromotionStrategyRoutes } from "./routes/promotionStrategy";
import { aiLearningEngine } from "./services/aiLearningEngine";
import { viralGrowthEngine } from "./services/viralGrowthEngine";
import { competitorSurveillance } from "./services/competitorSurveillance";
import { brandDominationEngine } from "./services/brandDominationEngine";
import { autonomousAI } from './services/autonomousAI';
import { autonomousMonitoring } from './services/autonomousMonitoring';
import type { Platform, UserAccount } from "@shared/schema";
import { insertPostSchema, insertAIContentLogSchema } from "@shared/schema";
import { z } from "zod";

export async function registerRoutes(app: Express): Promise<Server> {
  // Initialize database with platforms
  await seedPlatforms();

  // Auth middleware
  await setupAuth(app);

  // Auth routes
  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const user = await storage.getUser(userId);
      res.json(user);
    } catch (error) {
      console.error("Error fetching user:", error);
      res.status(500).json({ message: "Failed to fetch user" });
    }
  });

  // Platform routes
  app.get('/api/platforms', isAuthenticated, async (req, res) => {
    try {
      const platforms = await storage.getPlatforms();
      res.json(platforms);
    } catch (error) {
      console.error("Error fetching platforms:", error);
      res.status(500).json({ message: "Failed to fetch platforms" });
    }
  });

  // User account routes
  app.get('/api/user-accounts', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const accounts = await storage.getUserAccounts(userId);
      res.json(accounts);
    } catch (error) {
      console.error("Error fetching user accounts:", error);
      res.status(500).json({ message: "Failed to fetch user accounts" });
    }
  });

  app.post('/api/user-accounts', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const accountData = { ...req.body, userId };
      const account = await storage.createUserAccount(accountData);

      // Log activity
      await storage.createActivityLog({
        userId,
        action: 'Account Connected',
        description: `Connected ${req.body.accountHandle} account`,
        platformId: req.body.platformId,
        status: 'success',
        metadata: null,
      });

      res.json(account);
    } catch (error) {
      console.error("Error creating user account:", error);
      res.status(500).json({ message: "Failed to create user account" });
    }
  });

  // Post routes
  app.get('/api/posts', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const limit = parseInt(req.query.limit as string) || 50;
      const posts = await storage.getUserPosts(userId, limit);
      res.json(posts);
    } catch (error) {
      console.error("Error fetching posts:", error);
      res.status(500).json({ message: "Failed to fetch posts" });
    }
  });

  app.post('/api/posts', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const postData = insertPostSchema.parse(req.body);

      const post = await storage.createPost({ ...postData, userId });

      // Log activity
      await storage.createActivityLog({
        userId,
        action: 'Post Created',
        description: `Created new post for platform ${postData.platformId}`,
        platformId: postData.platformId,
        status: 'success',
        metadata: null,
      });

      res.json(post);
    } catch (error) {
      console.error("Error creating post:", error);
      res.status(500).json({ message: "Failed to create post" });
    }
  });

  // === –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–ê ===

  // –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞
  app.post('/api/client/analyze', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { clientData } = req.body;
      console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:', clientData);

      const profile = await clientAnalysisService.analyzeClient(clientData);
      const savedProfile = await clientAnalysisService.createClientProfile(userId, profile);

      res.json(savedProfile);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' });
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Lucifer Tradera
  app.post('/api/client/init-lucifer', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      if (!userId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Lucifer Tradera...');

      const luciferData = {
        youtube: 'https://www.youtube.com/@Lucifer_tradera',
        tiktok: 'https://vm.tiktok.com/ZNHnt6CTrMdwp-ckGNa',
        telegram: ['Lucifer_Izzy_bot', 'Lucifer_tradera'],
      };

      const profile = await clientAnalysisService.analyzeClient(luciferData);
      const savedProfile = await clientAnalysisService.createClientProfile(userId, profile);

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
      const strategy = await promotionEngine.createPromotionStrategy(savedProfile);

      res.json({
        message: '–ö–ª–∏–µ–Ω—Ç Lucifer Tradera —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É',
        profile: savedProfile,
        strategy,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Lucifer Tradera:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' });
    }
  });

  // === AI –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  app.post('/api/ai/generate-content', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { prompt, contentType, targetPlatforms } = insertAIContentLogSchema.parse(req.body);

      const result = await aiContentService.generateContent(prompt, contentType, targetPlatforms || []);

      // Log the generation
      await storage.createAIContentLog({
        userId,
        prompt,
        generatedContent: result.content,
        contentType,
        targetPlatforms,
        tokensUsed: result.tokensUsed,
        cost: result.cost,
      });

      // Log activity
      await storage.createActivityLog({
        userId,
        action: 'AI Content Generated',
        description: `Generated ${contentType} content`,
        platformId: null,
        status: 'success',
        metadata: { contentType, targetPlatforms },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating AI content:", error);
      res.status(500).json({ message: "Failed to generate AI content" });
    }
  });

  app.get('/api/ai/content-logs', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const limit = parseInt(req.query.limit as string) || 50;
      const logs = await storage.getUserAIContentLogs(userId, limit);
      res.json(logs);
    } catch (error) {
      console.error("Error fetching AI content logs:", error);
      res.status(500).json({ message: "Failed to fetch AI content logs" });
    }
  });

  // === AI –ê–°–°–ò–°–¢–ï–ù–¢ ===

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/ai/conversations', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const conversations = await aiAssistantService.getUserConversations(userId);
      res.json(conversations);
    } catch (error) {
      console.error("Error fetching conversations:", error);
      res.status(500).json({ message: "Failed to fetch conversations" });
    }
  });

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
  app.post('/api/ai/conversations', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { title } = req.body;
      const conversation = await aiAssistantService.createConversation(userId, title);
      res.json(conversation);
    } catch (error) {
      console.error("Error creating conversation:", error);
      res.status(500).json({ message: "Failed to create conversation" });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  app.get('/api/ai/conversations/:id/messages', isAuthenticated, async (req: any, res) => {
    try {
      const conversationId = parseInt(req.params.id);
      const messages = await aiAssistantService.getConversationMessages(conversationId);
      res.json(messages);
    } catch (error) {
      console.error("Error fetching messages:", error);
      res.status(500).json({ message: "Failed to fetch messages" });
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
  app.post('/api/ai/conversations/:id/messages', isAuthenticated, async (req: any, res) => {
    try {
      const conversationId = parseInt(req.params.id);
      const { message } = req.body;

      if (!message || message.trim().length === 0) {
        return res.status(400).json({ message: "Message content is required" });
      }

      const result = await aiAssistantService.sendMessage(conversationId, message.trim());

      // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const userId = req.user.claims.sub;
      await storage.createActivityLog({
        userId,
        action: 'AI Assistant Message',
        description: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É',
        platformId: null,
        status: result.error ? 'error' : 'success',
        metadata: { conversationId, tokensUsed: result.tokensUsed, cost: result.cost },
      });

      res.json(result);
    } catch (error) {
      console.error("Error sending message:", error);
      res.status(500).json({ message: "Failed to send message" });
    }
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  app.put('/api/ai/conversations/:id', isAuthenticated, async (req: any, res) => {
    try {
      const conversationId = parseInt(req.params.id);
      const userId = req.user.claims.sub;
      const { title } = req.body;

      if (!title || title.trim().length === 0) {
        return res.status(400).json({ message: "Title is required" });
      }

      const conversation = await aiAssistantService.updateConversationTitle(
        conversationId,
        userId,
        title.trim()
      );
      res.json(conversation);
    } catch (error) {
      console.error("Error updating conversation:", error);
      res.status(500).json({ message: "Failed to update conversation" });
    }
  });

  // –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
  app.delete('/api/ai/conversations/:id', isAuthenticated, async (req: any, res) => {
    try {
      const conversationId = parseInt(req.params.id);
      const userId = req.user.claims.sub;

      const success = await aiAssistantService.deleteConversation(conversationId, userId);

      if (success) {
        await storage.createActivityLog({
          userId,
          action: 'AI Conversation Deleted',
          description: `–£–¥–∞–ª–µ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º #${conversationId}`,
          platformId: null,
          status: 'success',
          metadata: { conversationId },
        });
        res.json({ message: "Conversation deleted successfully" });
      } else {
        res.status(404).json({ message: "Conversation not found" });
      }
    } catch (error) {
      console.error("Error deleting conversation:", error);
      res.status(500).json({ message: "Failed to delete conversation" });
    }
  });

  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  app.post('/api/ai/conversations/:id/generate-title', isAuthenticated, async (req: any, res) => {
    try {
      const conversationId = parseInt(req.params.id);
      const title = await aiAssistantService.generateConversationTitle(conversationId);

      const userId = req.user.claims.sub;
      const updatedConversation = await aiAssistantService.updateConversationTitle(
        conversationId,
        userId,
        title
      );

      res.json({ title, conversation: updatedConversation });
    } catch (error) {
      console.error("Error generating title:", error);
      res.status(500).json({ message: "Failed to generate title" });
    }
  });

  // === –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï AI –¢–†–ï–ô–î–ò–ù–ì –ú–ê–†–®–†–£–¢–´ ===

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è viral TikTok –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  app.post('/api/ai/viral-tiktok', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { trend, hooks } = req.body;

      if (!trend || !hooks || !Array.isArray(hooks)) {
        return res.status(400).json({ message: "Trend and hooks array are required" });
      }

      const result = await aiContentService.generateViralTikTokContent(trend, hooks);

      await storage.createActivityLog({
        userId,
        action: 'AI Viral TikTok Generated',
        description: `Generated viral TikTok content for trend: ${trend}`,
        platformId: null,
        status: 'success',
        metadata: { trend, hooks },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating viral TikTok content:", error);
      res.status(500).json({ message: "Failed to generate viral TikTok content" });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è YouTube –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç–∏–ª–µ —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤
  app.post('/api/ai/youtube-analysis', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { markets, style } = req.body;

      if (!markets || !Array.isArray(markets) || !style) {
        return res.status(400).json({ message: "Markets array and style are required" });
      }

      const result = await aiContentService.generateYouTubeAnalysis(markets, style);

      await storage.createActivityLog({
        userId,
        action: 'AI YouTube Analysis Generated',
        description: `Generated YouTube analysis in ${style} style for ${markets.join(', ')}`,
        platformId: null,
        status: 'success',
        metadata: { markets, style },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating YouTube analysis:", error);
      res.status(500).json({ message: "Failed to generate YouTube analysis" });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è live —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  app.post('/api/ai/live-signal', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { symbol, action, entry, targets, stopLoss, leverage, confidence } = req.body;

      if (!symbol || !action || !entry || !targets || !stopLoss) {
        return res.status(400).json({ message: "Symbol, action, entry, targets, and stopLoss are required" });
      }

      const result = await aiContentService.generateLiveSignalPost(
        symbol, action, entry, targets, stopLoss, leverage, confidence
      );

      await storage.createActivityLog({
        userId,
        action: 'AI Live Signal Generated',
        description: `Generated live signal for ${symbol} (${action})`,
        platformId: null,
        status: 'success',
        metadata: { symbol, action, entry, targets, stopLoss, leverage },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating live signal:", error);
      res.status(500).json({ message: "Failed to generate live signal" });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è crypto –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  app.post('/api/ai/crypto-predictions', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { timeframe, coins, reasoning } = req.body;

      if (!timeframe || !coins || !reasoning || !Array.isArray(coins) || !Array.isArray(reasoning)) {
        return res.status(400).json({ message: "Timeframe, coins array, and reasoning array are required" });
      }

      const result = await aiContentService.generateCryptoPredictions(timeframe, coins, reasoning);

      await storage.createActivityLog({
        userId,
        action: 'AI Crypto Predictions Generated',
        description: `Generated crypto predictions for ${timeframe}: ${coins.join(', ')}`,
        platformId: null,
        status: 'success',
        metadata: { timeframe, coins, reasoning },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating crypto predictions:", error);
      res.status(500).json({ message: "Failed to generate crypto predictions" });
    }
  });

  // –ê–Ω–∞–ª–∏–∑ –º–µ–º–∫–æ–∏–Ω–æ–≤
  app.post('/api/ai/memecoin-analysis', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { coin, metrics } = req.body;

      if (!coin || !metrics) {
        return res.status(400).json({ message: "Coin and metrics are required" });
      }

      const result = await aiContentService.generateMemeCoinAnalysis(coin, metrics);

      await storage.createActivityLog({
        userId,
        action: 'AI Memecoin Analysis Generated',
        description: `Generated memecoin analysis for ${coin}`,
        platformId: null,
        status: 'success',
        metadata: { coin, metrics },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating memecoin analysis:", error);
      res.status(500).json({ message: "Failed to generate memecoin analysis" });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è forex –æ–±—É—á–µ–Ω–∏—è
  app.post('/api/ai/forex-education', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { topic, experience, focus } = req.body;

      if (!topic || !experience || !focus) {
        return res.status(400).json({ message: "Topic, experience, and focus are required" });
      }

      const result = await aiContentService.generateForexEducation(topic, experience, focus);

      await storage.createActivityLog({
        userId,
        action: 'AI Forex Education Generated',
        description: `Generated forex education on ${topic} for ${experience} traders`,
        platformId: null,
        status: 'success',
        metadata: { topic, experience, focus },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating forex education:", error);
      res.status(500).json({ message: "Failed to generate forex education" });
    }
  });

  // === –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ===

  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–µ–º
  app.post('/api/ai/analyze-trends', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { platform, niche } = req.body;

      if (!platform || !niche) {
        return res.status(400).json({ message: "Platform and niche are required" });
      }

      const result = await aiContentService.analyzeTrendingTopics(platform, niche);

      await storage.createActivityLog({
        userId,
        action: 'AI Trends Analyzed',
        description: `Analyzed trending topics for ${platform} ${niche}`,
        platformId: null,
        status: 'success',
        metadata: { platform, niche },
      });

      res.json(result);
    } catch (error) {
      console.error("Error analyzing trends:", error);
      res.status(500).json({ message: "Failed to analyze trends" });
    }
  });

  // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
  app.post('/api/ai/optimize-hashtags-pro', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { content, platform, targetAudience } = req.body;

      if (!content || !platform) {
        return res.status(400).json({ message: "Content and platform are required" });
      }

      const result = await aiContentService.optimizeHashtags(content, platform, targetAudience);

      await storage.createActivityLog({
        userId,
        action: 'AI Hashtags Optimized',
        description: `Optimized hashtags for ${platform}`,
        platformId: null,
        status: 'success',
        metadata: { platform, targetAudience },
      });

      res.json(result);
    } catch (error) {
      console.error("Error optimizing hashtags:", error);
      res.status(500).json({ message: "Failed to optimize hashtags" });
    }
  });

  // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  app.post('/api/ai/competitor-analysis', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { competitors, analysisType } = req.body;

      if (!competitors || !Array.isArray(competitors) || !analysisType) {
        return res.status(400).json({ message: "Competitors array and analysis type are required" });
      }

      const result = await aiContentService.generateCompetitorAnalysis(competitors, analysisType);

      await storage.createActivityLog({
        userId,
        action: 'AI Competitor Analysis',
        description: `Analyzed competitors for ${analysisType}: ${competitors.join(', ')}`,
        platformId: null,
        status: 'success',
        metadata: { competitors, analysisType },
      });

      res.json(result);
    } catch (error) {
      console.error("Error analyzing competitors:", error);
      res.status(500).json({ message: "Failed to analyze competitors" });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è hook-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  app.post('/api/ai/generate-hooks', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { contentType, emotion } = req.body;

      if (!contentType || !emotion) {
        return res.status(400).json({ message: "Content type and emotion are required" });
      }

      const result = await aiContentService.generateHookLibrary(contentType, emotion);

      await storage.createActivityLog({
        userId,
        action: 'AI Hooks Generated',
        description: `Generated ${contentType} hooks with ${emotion} emotion`,
        platformId: null,
        status: 'success',
        metadata: { contentType, emotion },
      });

      res.json(result);
    } catch (error) {
      console.error("Error generating hooks:", error);
      res.status(500).json({ message: "Failed to generate hooks" });
    }
  });

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  app.post('/api/promotion/start', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      if (!userId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const { strategy } = req.body;
      const result = await promotionEngine.executePromotionStrategy(userId, strategy);

      res.json({
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
        result,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  app.get('/api/promotion/metrics/:clientId', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { clientId } = req.params;

      const metrics = await promotionEngine.getPromotionMetrics(userId, clientId);

      res.json(metrics);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏' });
    }
  });

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  app.post('/api/promotion/adapt-strategy', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { strategyId, performanceData } = req.body;

      const adaptedStrategy = await promotionEngine.adaptStrategy(strategyId, performanceData);

      await storage.createActivityLog({
        userId,
        action: 'Strategy Adapted',
        description: `Strategy ${strategyId} adapted based on performance`,
        status: 'success',
        metadata: { strategyId, adaptedStrategy },
      });

      res.json({
        message: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞',
        adaptedStrategy,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é' });
    }
  });

  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  app.get('/api/promotion/results', isAuthenticated, async (req, res) => {
    try {
      const userId = req.user.claims.sub;
      if (!userId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const days = parseInt(req.query.days as string) || 7;
      const results = await promotionEngine.analyzePromotionResults(userId, days);

      res.json(results);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' });
    }
  });

  // Analytics routes
  app.get('/api/analytics', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const platformId = req.query.platformId ? parseInt(req.query.platformId as string) : undefined;
      const analytics = await storage.getUserAnalytics(userId, platformId);
      res.json(analytics);
    } catch (error) {
      console.error("Error fetching analytics:", error);
      res.status(500).json({ message: "Failed to fetch analytics" });
    }
  });

  app.get('/api/analytics/dashboard', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const dashboardData = await analyticsService.getDashboardData(userId);
      res.json(dashboardData);
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
      res.status(500).json({ message: "Failed to fetch dashboard data" });
    }
  });

  // Safety routes
  app.get('/api/safety/status', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const safetyStatus = await safetyService.getUserSafetyStatus(userId);
      res.json(safetyStatus);
    } catch (error) {
      console.error("Error fetching safety status:", error);
      res.status(500).json({ message: "Failed to fetch safety status" });
    }
  });

  app.post('/api/safety/check', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const result = await safetyService.performSafetyCheck(userId);
      res.json(result);
    } catch (error) {
      console.error("Error performing safety check:", error);
      res.status(500).json({ message: "Failed to perform safety check" });
    }
  });

  // Scheduler routes
  app.get('/api/scheduler/jobs', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const jobs = await schedulerService.getUserJobs(userId);
      res.json(jobs);
    } catch (error) {
      console.error("Error fetching scheduled jobs:", error);
      res.status(500).json({ message: "Failed to fetch scheduled jobs" });
    }
  });

  app.post('/api/scheduler/emergency-stop', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      await schedulerService.emergencyStop(userId);

      // Log activity
      await storage.createActivityLog({
        userId,
        action: 'Emergency Stop',
        description: 'All automation stopped by user',
        platformId: null,
        status: 'warning',
        metadata: null,
      });

      res.json({ message: 'Emergency stop activated' });
    } catch (error) {
      console.error("Error performing emergency stop:", error);
      res.status(500).json({ message: "Failed to perform emergency stop" });
    }
  });

  // Activity logs
  app.get('/api/activity', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const limit = parseInt(req.query.limit as string) || 50;
      const activities = await storage.getUserActivityLogs(userId, limit);
      res.json(activities);
    } catch (error) {
      console.error("Error fetching activity logs:", error);
      res.status(500).json({ message: "Failed to fetch activity logs" });
    }
  });

  // Deep Analytics Routes
  app.get('/api/analytics/platform/:platformId', isAuthenticated, async (req: any, res) => {
    try {
      const { platformId } = req.params;
      const userId = req.user.claims.sub;
      const days = parseInt(req.query.days as string) || 30;
      const analytics = await storage.getPlatformAnalytics(userId, parseInt(platformId), days);

      const latestMetrics = analytics[0]?.metrics || {
        followers: 0,
        following: 0,
        posts: 0,
        likes: 0,
        comments: 0,
        shares: 0,
        views: 0,
        impressions: 0,
        reach: 0,
        engagement_rate: 0,
        growth_rate: 0,
      };

      res.json(latestMetrics);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã' });
    }
  });

  app.get('/api/analytics/insights', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const type = req.query.type as string;
      const insights = await storage.getAIInsights(userId, type);
      res.json(insights);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∏–Ω—Å–∞–π—Ç–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI –∏–Ω—Å–∞–π—Ç—ã' });
    }
  });

  app.get('/api/analytics/competitors/:platformId', isAuthenticated, async (req: any, res) => {
    try {
      const { platformId } = req.params;
      const userId = req.user.claims.sub;
      const competitors = await storage.getCompetitorAnalyses(userId, parseInt(platformId));

      const competitorData = competitors.map(comp => ({
        handle: comp.competitorHandle,
        name: comp.competitorName || comp.competitorHandle,
        metrics: {
          followers: comp.metrics.followers,
          engagement_rate: comp.metrics.engagement_rate,
          posting_frequency: comp.metrics.posting_frequency,
        },
        insights: [
          `–°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${comp.metrics.engagement_rate.toFixed(1)}%`,
          `–ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ${comp.metrics.posting_frequency.toFixed(1)} –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å`,
          `${comp.metrics.followers.toLocaleString()} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,
        ],
      }));

      res.json(competitorData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });
    }
  });

  app.get('/api/analytics/trends/:platformId', isAuthenticated, async (req: any, res) => {
    try {
      const { platformId } = req.params;
      const category = req.query.category as string;
      const days = parseInt(req.query.days as string) || 7;
      const trends = await storage.getTrendAnalysis(parseInt(platformId), category, days);

      const trendData = trends.map(trend => ({
        name: trend.trend_name,
        volume: trend.data.volume,
        growth_rate: trend.data.growth_rate,
        confidence: parseFloat(trend.confidence),
        category: trend.category,
      }));

      res.json(trendData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã' });
    }
  });

  app.post('/api/analytics/analyze-content', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { content, platform } = req.body;

      if (!content || !platform) {
        return res.status(400).json({ error: '–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
      }

      const platformData = await storage.getUserAccounts(userId);
      const targetPlatform = platformData.find(p => p.platformId.toString() === platform);

      let historicalData: any[] = [];
      if (targetPlatform) {
        historicalData = await storage.getContentPerformance(userId, targetPlatform.platformId, 30);
      }

      const analysis = await aiAnalyticsService.analyzeContent(content, platform, historicalData);
      res.json(analysis);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç' });
    }
  });

  app.post('/api/analytics/optimize-hashtags', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { content, platform, targetAudience } = req.body;

      if (!content || !platform) {
        return res.status(400).json({ error: '–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
      }

      const hashtagOptimization = await aiAnalyticsService.optimizeHashtags(
        content,
        platform,
        targetAudience
      );

      res.json(hashtagOptimization);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à—Ç–µ–≥–∏' });
    }
  });

  // Social Media OAuth Integration Routes
  app.get('/api/social/auth/:platformId', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const platformId = parseInt(req.params.platformId);
      const state = require('crypto').randomUUID();

      const service = socialMediaManager.getService(platformId);
      if (!service) {
        return res.status(400).json({ error: 'Platform not supported' });
      }

      const authUrl = await service.getAuthUrl(userId, state);

      // Store state for CSRF protection
      req.session.oauthState = { state, userId, platformId };

      res.json({ authUrl });
    } catch (error) {
      console.error('OAuth initialization error:', error);
      res.status(500).json({ error: 'Failed to initialize OAuth' });
    }
  });

  app.get('/api/social/callback', isAuthenticated, async (req: any, res) => {
    try {
      const { code, state, error } = req.query;

      if (error) {
        return res.status(400).json({ error: `OAuth error: ${error}` });
      }

      if (!code || !state) {
        return res.status(400).json({ error: 'Missing authorization code or state' });
      }

      const sessionState = req.session.oauthState;
      if (!sessionState || sessionState.state !== state) {
        return res.status(400).json({ error: 'Invalid state parameter' });
      }

      const { userId, platformId } = sessionState;

      const service = socialMediaManager.getService(platformId);
      if (!service) {
        return res.status(400).json({ error: 'Platform not supported' });
      }

      // Exchange code for tokens
      const tokens = await service.exchangeCodeForToken(code, state);

      // Create or update user account
      const existingAccount = await storage.getUserAccount(userId, platformId);

      let accountId: number;
      if (existingAccount) {
        await storage.updateUserAccount(existingAccount.id, {
          accessToken: tokens.accessToken,
          refreshToken: tokens.refreshToken,
          tokenExpiry: tokens.expiresAt,
          authStatus: 'connected',
        });
        accountId = existingAccount.id;
      } else {
        const newAccount = await storage.createUserAccount({
          userId,
          platformId,
          accountHandle: 'New Account', // Will be updated with actual data
          accessToken: tokens.accessToken,
          refreshToken: tokens.refreshToken,
          tokenExpiry: tokens.expiresAt,
          authStatus: 'connected',
        });
        accountId = newAccount.id;
      }

      // For Instagram, get Business Account ID automatically
      if (platformId === 1) { // Instagram
        try {
          const instagramService = service as any; // Cast to access Instagram-specific methods
          if (instagramService.getInstagramBusinessAccountId) {
            const businessAccountId = await instagramService.getInstagramBusinessAccountId(tokens.accessToken);

            if (businessAccountId) {
              // Get existing platform config and merge with business account ID
              const currentAccount = await storage.getUserAccount(userId, platformId);
              const existingConfig = (currentAccount && currentAccount.platformConfig) || {};

              await storage.updateUserAccount(accountId, {
                platformConfig: {
                  ...existingConfig,
                  businessAccountId,
                },
                accountHandle: `Instagram Business Account`,
              });
              console.log(`Instagram Business Account ID obtained: ${businessAccountId}`);
            } else {
              console.warn('Instagram Business Account ID not found. User may need to connect Instagram to Facebook page.');
            }
          }
        } catch (error) {
          console.error('Failed to get Instagram Business Account ID:', error);
          // Don't fail the entire OAuth flow for this
        }
      }

      // Clean up session
      delete req.session.oauthState;

      // Log successful connection
      const platform = await storage.getPlatform(platformId);
      await storage.createActivityLog({
        userId,
        platformId,
        action: 'Platform Connected',
        description: `Successfully connected ${platform?.displayName} account`,
        status: 'success',
        metadata: {},
      });

      res.json({ success: true, message: 'Platform connected successfully' });
    } catch (error) {
      console.error('OAuth callback error:', error);
      res.status(500).json({ error: 'Failed to complete OAuth flow' });
    }
  });

  app.post('/api/social/disconnect/:accountId', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const accountId = parseInt(req.params.accountId);

      const account = await storage.getUserAccount(userId, accountId);
      if (!account) {
        return res.status(404).json({ error: 'Account not found' });
      }

      await storage.updateUserAccount(accountId, {
        isActive: false,
        authStatus: 'disconnected',
        accessToken: null,
        refreshToken: null,
        tokenExpiry: null,
      });

      // Log disconnection
      const platform = await storage.getPlatform(account.platformId);
      await storage.createActivityLog({
        userId,
        platformId: account.platformId,
        action: 'Platform Disconnected',
        description: `Disconnected ${platform?.displayName} account`,
        status: 'success',
        metadata: {},
      });

      res.json({ success: true, message: 'Account disconnected successfully' });
    } catch (error) {
      console.error('Disconnect account error:', error);
      res.status(500).json({ error: 'Failed to disconnect account' });
    }
  });

  app.post('/api/social/post', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { content, mediaUrls, platformIds } = req.body;

      if (!content) {
        return res.status(400).json({ error: 'Content is required' });
      }

      const postData = { content, mediaUrls };
      let results;

      if (platformIds && platformIds.length > 0) {
        // Post to specific platforms
        results = {} as { [platformId: number]: any };
        const userAccounts = await storage.getUserAccounts(userId);

        for (const platformId of platformIds) {
          const account = userAccounts.find(acc =>
            acc.platformId === platformId &&
            acc.isActive &&
            acc.authStatus === 'connected'
          );

          if (account) {
            const service = socialMediaManager.getService(platformId);
            if (service) {
              (results as any)[platformId] = await service.post(account, postData);
            }
          } else {
            (results as any)[platformId] = {
              success: false,
              error: 'Account not connected for this platform',
            };
          }
        }
      } else {
        // Post to all connected platforms
        results = await socialMediaManager.postToAllPlatforms(userId, postData);
      }

      // Log posting activity
      const successfulPosts = Object.values(results).filter((r: any) => r.success).length;
      const totalPosts = Object.keys(results).length;

      await storage.createActivityLog({
        userId,
        platformId: null,
        action: 'Multi-Platform Post',
        description: `Posted to ${successfulPosts}/${totalPosts} platforms`,
        status: successfulPosts > 0 ? 'success' : 'error',
        metadata: { results },
      });

      res.json({ results, summary: { successful: successfulPosts, total: totalPosts } });
    } catch (error) {
      console.error('Social media posting error:', error);
      res.status(500).json({ error: 'Failed to post content' });
    }
  });

  app.post('/api/social/validate-tokens', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      await socialMediaManager.validateAllTokens(userId);

      const updatedAccounts = await storage.getUserAccounts(userId);
      res.json({
        success: true,
        accounts: updatedAccounts.map(acc => ({
          id: acc.id,
          platformId: acc.platformId,
          authStatus: acc.authStatus,
          isActive: acc.isActive,
        }))
      });
    } catch (error) {
      console.error('Token validation error:', error);
      res.status(500).json({ error: 'Failed to validate tokens' });
    }
  });

  // === AI –û–ë–£–ß–ï–ù–ò–ï –ò –†–ê–ó–í–ò–¢–ò–ï –°–ò–°–¢–ï–ú–´ ===

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  app.post('/api/ai/initialize-learning', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { clientProfile } = req.body;

      await aiLearningEngine.trainOnClientData(userId, clientProfile);

      await storage.createActivityLog({
        userId,
        action: 'AI Learning Initialized',
        description: 'AI —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞',
        status: 'success',
        metadata: { clientProfile: clientProfile.name },
      });

      res.json({
        message: 'AI —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞',
        learningStatus: 'initialized',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è AI:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ AI' });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  app.post('/api/ai/generate-advanced-strategy', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { clientProfile } = req.body;

      const strategy = await aiLearningEngine.generateAdvancedPromotionStrategy(clientProfile);

      await storage.createActivityLog({
        userId,
        action: 'Advanced Strategy Generated',
        description: '–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è AI —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è',
        status: 'success',
        metadata: { strategy: strategy },
      });

      res.json({
        strategy,
        message: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é' });
    }
  });

  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  app.post('/api/ai/predict-content-success', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { content, platform, timing, clientProfile } = req.body;

      const prediction = await aiLearningEngine.predictContentSuccess(
        content,
        platform,
        new Date(timing),
        clientProfile
      );

      res.json({
        prediction,
        message: '–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞' });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  app.post('/api/ai/generate-unique-content', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { clientProfile, contentType, platform } = req.body;

      const uniqueContent = await aiLearningEngine.generateUniqueContent(
        clientProfile,
        contentType,
        platform
      );

      await storage.createActivityLog({
        userId,
        action: 'Unique Content Generated',
        description: `–°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ${contentType} –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è ${platform}`,
        status: 'success',
        metadata: { contentType, platform, uniqueness_score: uniqueContent.uniqueness_score },
      });

      res.json({
        content: uniqueContent,
        message: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
  app.post('/api/ai/generate-viral-triggers', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { contentType, platform, audience } = req.body;

      const viralTriggers = await aiLearningEngine.generateViralTriggers(
        contentType,
        platform,
        audience
      );

      res.json({
        triggers: viralTriggers,
        message: '–í–∏—Ä—É—Å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã' });
    }
  });

  // –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
  app.post('/api/ai/continuous-learning', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;

      await aiLearningEngine.continuousLearning();

      await storage.createActivityLog({
        userId,
        action: 'Continuous Learning Cycle',
        description: '–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI',
        status: 'success',
        metadata: { timestamp: new Date() },
      });

      res.json({
        message: '–¶–∏–∫–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω',
        status: 'learning_updated',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ' });
    }
  });

  // –û—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏ AI
  app.get('/api/ai/learning-report', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;

      const report = await aiLearningEngine.generateLearningReport(userId);

      res.json({
        report,
        message: '–û—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏ AI –≥–æ—Ç–æ–≤',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±—É—á–µ–Ω–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç' });
    }
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
  app.post('/api/ai/auto-learning', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
      setInterval(async () => {
        try {
          await aiLearningEngine.continuousLearning();
          console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:', error);
        }
      }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å

      res.json({
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
        frequency: '–∫–∞–∂–¥—ã–π —á–∞—Å',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ' });
    }
  });

  // === –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –í–ò–†–£–°–ù–û–ì–û –†–û–°–¢–ê ===

  // –ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
  app.post('/api/viral/analyze-potential', isAuthenticated, async (req: any, res) => {
    try {
      const { content, platform } = req.body;
      const viralMetrics = await viralGrowthEngine.analyzeViralPotential(content, platform);
      res.json({ metrics: viralMetrics, message: '–ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª' });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  app.post('/api/viral/generate-content', isAuthenticated, async (req: any, res) => {
    try {
      const { niche, platform, targetEmotion } = req.body;
      const viralContent = await viralGrowthEngine.generateViralContent(niche, platform, targetEmotion);

      res.json({
        content: viralContent,
        message: '–í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' });
    }
  });

  // –ó–∞–ø—É—Å–∫ –≤–∏—Ä—É—Å–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
  app.post('/api/viral/launch-campaign', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { campaignType, niche } = req.body;

      const campaign = await viralGrowthEngine.launchViralCampaign(userId, campaignType, niche);

      await storage.createActivityLog({
        userId,
        action: 'Viral Campaign Launched',
        description: `–ó–∞–ø—É—â–µ–Ω–∞ –≤–∏—Ä—É—Å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è: ${campaignType}`,
        status: 'success',
        metadata: campaign,
      });

      res.json({
        campaign,
        message: '–í–∏—Ä—É—Å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏—Ä—É—Å–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—É—Å–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é' });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
  app.post('/api/viral/psychological-triggers', isAuthenticated, async (req: any, res) => {
    try {
      const { audience, goal } = req.body;
      const triggers = await viralGrowthEngine.generatePsychologicalTriggers(audience, goal);

      res.json({
        triggers,
        message: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã' });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  app.post('/api/viral/emotional-content', isAuthenticated, async (req: any, res) => {
    try {
      const { emotion, niche, platform } = req.body;
      const emotionalContent = await viralGrowthEngine.createEmotionalContent(emotion, niche, platform);

      res.json({
        content: emotionalContent,
        emotion,
        message: `–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (${emotion}) —Å–æ–∑–¥–∞–Ω`,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' });
    }
  });

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
  app.post('/api/viral/neuromarketing', isAuthenticated, async (req: any, res) => {
    try {
      const { content } = req.body;
      const enhancedContent = await viralGrowthEngine.applyNeuroMarketingPrinciples(content);

      res.json({
        original: content,
        enhanced: enhancedContent,
        message: '–ù–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥' });
    }
  });

  // === –°–ò–°–¢–ï–ú–ê –°–õ–ï–ñ–ï–ù–ò–Ø –ó–ê –ö–û–ù–ö–£–†–ï–ù–¢–ê–ú–ò ===

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  app.post('/api/competitors/monitor', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { niche } = req.body;

      const intelligence = await competitorSurveillance.monitorCompetitors(niche);

      await storage.createActivityLog({
        userId,
        action: 'Competitor Intelligence',
        description: `–°–æ–±—Ä–∞–Ω–∞ —Ä–∞–∑–≤–µ–¥–∫–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º –≤ –Ω–∏—à–µ: ${niche}`,
        status: 'success',
        metadata: intelligence,
      });

      res.json({
        intelligence,
        message: '–†–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º –ø–æ–ª—É—á–µ–Ω—ã',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });
    }
  });

  // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  app.post('/api/competitors/analyze-strategies', isAuthenticated, async (req: any, res) => {
    try {
      const { competitors } = req.body;
      const strategies = await competitorSurveillance.analyzeCompetitorStrategies(competitors);

      res.json({
        strategies,
        message: '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  app.post('/api/competitors/counter-strategy', isAuthenticated, async (req: any, res) => {
    try {
      const { competitorHandle, theirStrategy } = req.body;
      const counterStrategy = await competitorSurveillance.createCounterStrategy(competitorHandle, theirStrategy);

      res.json({
        counterStrategy,
        message: '–ö–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é' });
    }
  });

  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  app.post('/api/competitors/predict-moves', isAuthenticated, async (req: any, res) => {
    try {
      const { competitorData, marketTrends } = req.body;
      const predictions = await competitorSurveillance.predictCompetitorMoves(competitorData, marketTrends);

      res.json({
        predictions,
        message: '–î–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω—ã',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });
    }
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  app.post('/api/competitors/setup-monitoring', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { competitors } = req.body;

      await competitorSurveillance.setupAutomaticMonitoring(userId, competitors);

      res.json({
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        competitors: competitors.length,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' });
    }
  });

  // === –°–ò–°–¢–ï–ú–ê –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø –ë–†–ï–ù–î–ê ===

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  app.post('/api/domination/create-plan', isAuthenticated, async (req: any, res) => {
    try {
      const { clientProfile, targetMarketShare } = req.body;
      const dominationPlan = await brandDominationEngine.createDominationPlan(clientProfile, targetMarketShare);

      res.json({
        plan: dominationPlan,
        message: '–ü–ª–∞–Ω –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤–æ–π –∏–º–ø–µ—Ä–∏–∏
  app.post('/api/domination/build-empire', isAuthenticated, async (req: any, res) => {
    try {
      const { clientProfile } = req.body;
      const empire = await brandDominationEngine.buildBrandEmpire(clientProfile);

      res.json({
        empire,
        message: '–ë—Ä–µ–Ω–¥–æ–≤–∞—è –∏–º–ø–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤–æ–π –∏–º–ø–µ—Ä–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥–æ–≤—É—é –∏–º–ø–µ—Ä–∏—é' });
    }
  });

  // –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
  app.post('/api/domination/aggressive-growth', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { clientProfile } = req.body;

      const results = await brandDominationEngine.executeAggressiveGrowth(userId, clientProfile);

      await storage.createActivityLog({
        userId,
        action: 'Aggressive Growth Launched',
        description: '–ó–∞–ø—É—â–µ–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞ –∏ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        status: 'success',
        metadata: results,
      });

      res.json({
        results,
        message: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞!',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç' });
    }
  });

  // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞–º–ø–∞–Ω–∏—è
  app.post('/api/domination/psychological-campaign', isAuthenticated, async (req: any, res) => {
    try {
      const { targetAudience, competitorWeaknesses } = req.body;
      const campaign = await brandDominationEngine.launchPsychologicalCampaign(targetAudience, competitorWeaknesses);

      res.json({
        campaign,
        message: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞–º–ø–∞–Ω–∏—é' });
    }
  });

  // –ü–ª–∞–Ω –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏
  app.post('/api/domination/monopolization-plan', isAuthenticated, async (req: any, res) => {
    try {
      const { niche } = req.body;
      const monopolizationPlan = await brandDominationEngine.createMonopolizationPlan(niche);

      res.json({
        plan: monopolizationPlan,
        message: '–ü–ª–∞–Ω –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏ —Ä—ã–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏' });
    }
  });

  // === TELEGRAM –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê ===
  app.post('/api/telegram/analyze-channel', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { channelId } = req.body;
      const botToken = process.env.TELEGRAM_BOT_TOKEN;

      if (!botToken) {
        return res.status(400).json({
          error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö',
        });
      }

      const targetChannel = channelId || '@IIPRB';

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
      const chatResponse = await fetch(`https://api.telegram.org/bot${botToken}/getChat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: targetChannel }),
      });

      const chatData = await chatResponse.json();

      if (!chatData.ok) {
        return res.status(400).json({
          error: chatData.description || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ',
        });
      }

      const channelInfo = chatData.result;

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      const membersResponse = await fetch(`https://api.telegram.org/bot${botToken}/getChatMemberCount`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: targetChannel }),
      });

      const membersData = await membersResponse.json();
      const memberCount = membersData.ok ? membersData.result : 0;

      // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏)
      const mockRecentPosts = [
        {
          id: 1,
          text: "üöÄ –ù–æ–≤—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª: BTC/USDT LONG üìà\n–í—Ö–æ–¥: $42,500\n–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $44,000\n–°—Ç–æ–ø-–ª–æ—Å—Å: $41,800",
          date: new Date().toISOString(),
          views: 1250,
          forwards: 45,
        },
        {
          id: 2,
          text: "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: —Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
          date: new Date(Date.now() - 86400000).toISOString(),
          views: 980,
          forwards: 32,
        },
        {
          id: 3,
          text: "üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: +15.7% –ø—Ä–∏–±—ã–ª–∏",
          date: new Date(Date.now() - 172800000).toISOString(),
          views: 1450,
          forwards: 67,
        },
      ];

      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      const analytics = {
        avgViews: 1226,
        avgEngagement: 4.2,
        postingFrequency: "2-3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å",
        bestPostingTime: "18:00 - 21:00 –ú–°–ö",
        topKeywords: ["—Ç—Ä–µ–π–¥–∏–Ω–≥", "—Å–∏–≥–Ω–∞–ª—ã", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–∞–Ω–∞–ª–∏–∑", "—Ñ–æ—Ä–µ–∫—Å"],
        growthRate: 8.5,
      };

      // AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = [
        "–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ—Å—Ç–æ–≤ –≤ –ø–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è (18:00-21:00) –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –≥—Ä–∞—Ñ–∏–∫–∏, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–¥–µ–ª–æ–∫",
        "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –æ–ø—Ä–æ—Å—ã, –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏",
        "–°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤–∏—á–∫–æ–≤",
        "–ü—É–±–ª–∏–∫—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
      ];

      const analysis = {
        channelInfo: {
          title: channelInfo.title,
          username: channelInfo.username || targetChannel,
          description: channelInfo.description || "–ö–∞–Ω–∞–ª –æ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö",
          memberCount,
          photoUrl: channelInfo.photo?.big_file_id,
        },
        recentPosts: mockRecentPosts,
        analytics,
        recommendations,
      };

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      await storage.createActivityLog({
        userId,
        action: 'Telegram Channel Analysis',
        description: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª ${targetChannel}`,
        status: 'success',
        metadata: { channelId: targetChannel, memberCount },
      });

      res.json(analysis);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Telegram –∫–∞–Ω–∞–ª–∞:', error);
      res.status(500).json({
        error: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞',
      });
    }
  });

  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï TELEGRAM –ö–ê–ù–ê–õ–ê ===
  app.post('/api/telegram/start-promotion', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { channelId, analysisData } = req.body;
      const botToken = process.env.TELEGRAM_BOT_TOKEN;

      if (!botToken) {
        return res.status(400).json({
          error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö',
        });
      }

      const targetChannel = channelId || '@IIPRB';

      console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${targetChannel}`);

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
      const promotionPlan = {
        contentSchedule: [
          {
            time: '09:00',
            type: 'market_analysis',
            content: 'üìä –£—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–Ω—è',
          },
          {
            time: '14:00',
            type: 'trading_signal',
            content: 'üéØ –î–Ω–µ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞',
          },
          {
            time: '19:00',
            type: 'education',
            content: 'üìö –û–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: —Ä–∞–∑–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞',
          },
        ],
        growthTactics: [
          '–ö—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥ –≤ TikTok –∏ YouTube Shorts —Å CTA –Ω–∞ Telegram',
          '–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Telegram –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
          '–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å –ø—Ä–∏–∑–∞–º–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        ],
        metrics: {
          targetGrowth: '+30% –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü',
          engagementGoal: '10% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          contentFrequency: '3-5 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å',
        },
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
      const startMessage = `üéØ <b>–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø</b>

‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
üìä –¢–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${analysisData?.channelInfo?.memberCount || 'N/A'}
üìà –°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${analysisData?.analytics?.avgEngagement || 'N/A'}%

<b>–ü–ª–∞–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:</b>
${promotionPlan.growthTactics.map((t, i) => `${i + 1}. ${t}`).join('\n')}

<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>
${promotionPlan.contentSchedule.map(s => `‚è∞ ${s.time} - ${s.type}`).join('\n')}

üéØ –¶–µ–ª—å: ${promotionPlan.metrics.targetGrowth}

ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!`;

      const sendResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: targetChannel,
          text: startMessage,
          parse_mode: 'HTML',
        }),
      });

      const sendData = await sendResponse.json();

      if (!sendData.ok) {
        throw new Error(sendData.description || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
      await storage.createActivityLog({
        userId,
        action: 'Telegram Promotion Started',
        description: `–ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ${targetChannel}`,
        status: 'success',
        metadata: { channelId: targetChannel, promotionPlan },
      });

      res.json({
        success: true,
        message: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ',
        promotionPlan,
        messageId: sendData.result.message_id,
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:', error);
      res.status(500).json({
        error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ',
      });
    }
  });

  // === TELEGRAM –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===
  app.post('/api/telegram/quick-test', isAuthenticated, async (req: any, res) => {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      const channelId = process.env.TELEGRAM_CHANNEL_ID || '@IIPRB';

      if (!botToken) {
        return res.status(400).json({
          botTokenValid: false,
          channelAccessible: false,
          messageSent: false,
          error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
      const botResponse = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
      const botData = await botResponse.json();

      if (!botData.ok) {
        return res.json({
          botTokenValid: false,
          channelAccessible: false,
          messageSent: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π TELEGRAM_BOT_TOKEN',
        });
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const testMessage = `ü§ñ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞!\n\n‚úÖ –ë–æ—Ç: @${botData.result.username}\n‚è∞ ${new Date().toLocaleString('ru-RU')}\n\nüöÄ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`;

      const sendResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: channelId,
          text: testMessage,
          parse_mode: 'HTML',
        }),
      });

      const sendData = await sendResponse.json();

      if (sendData.ok) {
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç
        const userId = req.user.claims.sub;
        await storage.createActivityLog({
          userId,
          action: 'Telegram Test Success',
          description: `–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª ${channelId}`,
          status: 'success',
          metadata: { channelId, messageId: sendData.result.message_id },
        });

        return res.json({
          botTokenValid: true,
          channelAccessible: true,
          messageSent: true,
          botUsername: botData.result.username,
          channelId,
          messageId: sendData.result.message_id,
        });
      } else {
        return res.json({
          botTokenValid: true,
          channelAccessible: false,
          messageSent: false,
          error: sendData.description || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.',
        });
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram:', error);
      return res.status(500).json({
        botTokenValid: false,
        channelAccessible: false,
        messageSent: false,
        error: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
      });
    }
  });

  // Setup advanced promotion strategy routes
  setupPromotionStrategyRoutes(app);

  // AI Chat API endpoints
  app.post('/api/ai/chat', isAuthenticated, async (req, res) => {
    try {
      const { message, userId, context } = req.body;

      if (!message || !userId) {
        return res.status(400).json({ error: 'Missing required fields' });
      }

      // Simple AI response logic
      let response = "–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! ";
      let type = 'text';

      if (message.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑') || message.toLowerCase().includes('–∫–æ–Ω—Ç–µ–Ω—Ç')) {
        response = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç... –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞.";
        type = 'analysis';
      } else if (message.toLowerCase().includes('—Å—Ç—Ä–∞—Ç–µ–≥') || message.toLowerCase().includes('–ø—Ä–æ–¥–≤–∏–∂')) {
        response = "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: 1) –£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø–æ—Å—Ç–æ–≤ –¥–æ 3-4 –≤ –¥–µ–Ω—å, 2) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏, 3) –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.";
        type = 'suggestion';
      } else if (message.toLowerCase().includes('–æ–ø—Ç–∏–º–∏–∑')) {
        response = "–î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–π—Ç–µ call-to-action, –ø—É–±–ª–∏–∫—É–π—Ç–µ –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.";
        type = 'suggestion';
      } else {
        response = "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π. –ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å!";
      }

      res.json({ response, type });
    } catch (error) {
      console.error('AI chat error:', error);
      res.status(500).json({ error: 'Failed to process chat message' });
    }
  });

  app.get('/api/ai/status', isAuthenticated, async (req, res) => {
    try {
      res.json({
        status: 'online',
        features: ['chat', 'content-generation', 'analysis'],
        version: '1.0.0'
      });
    } catch (error) {
      console.error('AI status error:', error);
      res.status(500).json({ error: 'Failed to get AI status' });
    }
  });

  // === –ê–í–¢–û–ù–û–ú–ù–ê–Ø AI ===

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI
  app.post('/api/autonomous/start', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
      autonomousAI.startAutonomousDevelopment().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI:', error);
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      autonomousMonitoring.startMonitoring().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      });

      await storage.createActivityLog({
        userId,
        action: 'Autonomous AI Started',
        description: '–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞',
        status: 'success',
      });

      res.json({
        message: '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        status: autonomousAI.getStatus(),
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é AI' });
    }
  });

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI
  app.post('/api/autonomous/stop', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;

      autonomousAI.stopAutonomousDevelopment();
      autonomousMonitoring.stopMonitoring();

      await storage.createActivityLog({
        userId,
        action: 'Autonomous AI Stopped',
        description: '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞',
        status: 'success',
      });

      res.json({
        message: '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
        status: autonomousAI.getStatus(),
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é AI' });
    }
  });

  // –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI
  app.get('/api/autonomous/status', isAuthenticated, async (req: any, res) => {
    try {
      const status = autonomousAI.getStatus();
      const systemReport = await autonomousMonitoring.getSystemReport();

      res.json({
        status,
        systemReport,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å' });
    }
  });

  // –£–ª—É—á—à–µ–Ω–∏–µ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  app.post('/api/autonomous/enhance-ai', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;

      autonomousAI.enhanceAICapabilities().catch(error => {
        console.error('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è AI:', error);
      });

      await storage.createActivityLog({
        userId,
        action: 'AI Enhancement Started',
        description: '–ó–∞–ø—É—â–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
        status: 'success',
      });

      res.json({
        message: '–£–ª—É—á—à–µ–Ω–∏–µ AI –∑–∞–ø—É—â–µ–Ω–æ',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è AI:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ AI' });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}