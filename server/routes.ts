[
  {"file_path": "src/routes/index.ts", "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { seedPlatforms } from \"./seedDatabase\";\nimport { aiContentService } from \"./services/aiContent\";\nimport { aiAnalyticsService } from \"./services/aiAnalytics\";\nimport { aiAssistantService } from \"./services/aiAssistant\";\nimport { klingAIService } from \"./services/klingAIService\";\nimport { clientAnalysisService } from \"./services/clientAnalysis\";\nimport { promotionEngine } from \"./services/promotionEngine\";\nimport { socialMediaManager } from \"./services/socialMediaIntegration\";\nimport { analyticsService } from \"./services/analytics\";\nimport { safetyService } from \"./services/safety\";\nimport { schedulerService } from \"./services/scheduler\";\nimport { masterAutomation } from \"./services/masterAutomation\";\nimport { setupPromotionStrategyRoutes } from \"./routes/promotionStrategy\";\nimport { aiLearningEngine } from \"./services/aiLearningEngine\";\nimport { viralGrowthEngine } from \"./services/viralGrowthEngine\";\nimport { competitorSurveillance } from \"./services/competitorSurveillance\";\nimport { brandDominationEngine } from \"./services/brandDominationEngine\";\nimport type { Platform, UserAccount } from \"@shared/schema\";\nimport { insertPostSchema, insertAIContentLogSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize database with platforms\n  await seedPlatforms();\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Platform routes\n  app.get('/api/platforms', isAuthenticated, async (req, res) => {\n    try {\n      const platforms = await storage.getPlatforms();\n      res.json(platforms);\n    } catch (error) {\n      console.error(\"Error fetching platforms:\", error);\n      res.status(500).json({ message: \"Failed to fetch platforms\" });\n    }\n  });\n\n  // User account routes\n  app.get('/api/user-accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const accounts = await storage.getUserAccounts(userId);\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching user accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch user accounts\" });\n    }\n  });\n\n  app.post('/api/user-accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const accountData = { ...req.body, userId };\n      const account = await storage.createUserAccount(accountData);\n\n      // Log activity\n      await storage.createActivityLog({\n        userId,\n        action: 'Account Connected',\n        description: `Connected ${req.body.accountHandle} account`,\n        platformId: req.body.platformId,\n        status: 'success',\n        metadata: null,\n      });\n\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error creating user account:\", error);\n      res.status(500).json({ message: \"Failed to create user account\" });\n    }\n  });\n\n  // Post routes\n  app.get('/api/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const posts = await storage.getUserPosts(userId, limit);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch posts\" });\n    }\n  });\n\n  app.post('/api/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postData = insertPostSchema.parse(req.body);\n\n      const post = await storage.createPost({ ...postData, userId });\n\n      // Log activity\n      await storage.createActivityLog({\n        userId,\n        action: 'Post Created',\n        description: `Created new post for platform ${postData.platformId}`,\n        platformId: postData.platformId,\n        status: 'success',\n        metadata: null,\n      });\n\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  // === –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–ê ===\n\n  // –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞\n  app.post('/api/client/analyze', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { clientData } = req.body;\n      console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:', clientData);\n\n      const profile = await clientAnalysisService.analyzeClient(clientData);\n      const savedProfile = await clientAnalysisService.createClientProfile(userId, profile);\n\n      res.json(savedProfile);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' });\n    }\n  });\n\n  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Lucifer Tradera\n  app.post('/api/client/init-lucifer', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Lucifer Tradera...');\n\n      const luciferData = {\n        youtube: 'https://www.youtube.com/@Lucifer_tradera',\n        tiktok: 'https://vm.tiktok.com/ZNHnt6CTrMdwp-ckGNa',\n        telegram: ['Lucifer_Izzy_bot', 'Lucifer_tradera'],\n      };\n\n      const profile = await clientAnalysisService.analyzeClient(luciferData);\n      const savedProfile = await clientAnalysisService.createClientProfile(userId, profile);\n\n      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n      const strategy = await promotionEngine.createPromotionStrategy(savedProfile);\n\n      res.json({\n        message: '–ö–ª–∏–µ–Ω—Ç Lucifer Tradera —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É',\n        profile: savedProfile,\n        strategy,\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Lucifer Tradera:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' });\n    }\n  });\n\n  // === AI –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/ai/generate-content', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { prompt, contentType, targetPlatforms } = insertAIContentLogSchema.parse(req.body);\n\n      const result = await aiContentService.generateContent(prompt, contentType, targetPlatforms || []);\n\n      // Log the generation\n      await storage.createAIContentLog({\n        userId,\n        prompt,\n        generatedContent: result.content,\n        contentType,\n        targetPlatforms,\n        tokensUsed: result.tokensUsed,\n        cost: result.cost,\n      });\n\n      // Log activity\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Content Generated',\n        description: `Generated ${contentType} content`,\n        platformId: null,\n        status: 'success',\n        metadata: { contentType, targetPlatforms },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating AI content:\", error);\n      res.status(500).json({ message: \"Failed to generate AI content\" });\n    }\n  });\n\n  app.get('/api/ai/content-logs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const logs = await storage.getUserAIContentLogs(userId, limit);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching AI content logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI content logs\" });\n    }\n  });\n\n  // === AI –ê–°–°–ò–°–¢–ï–ù–¢ ===\n\n  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n  app.get('/api/ai/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await aiAssistantService.getUserConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n  app.post('/api/ai/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { title } = req.body;\n      const conversation = await aiAssistantService.createConversation(userId, title);\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n  app.get('/api/ai/conversations/:id/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const messages = await aiAssistantService.getConversationMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä\n  app.post('/api/ai/conversations/:id/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const { message } = req.body;\n\n      if (!message || message.trim().length === 0) {\n        return res.status(400).json({ message: \"Message content is required\" });\n      }\n\n      const result = await aiAssistantService.sendMessage(conversationId, message.trim());\n\n      // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n      const userId = req.user.claims.sub;\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Assistant Message',\n        description: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É',\n        platformId: null,\n        status: result.error ? 'error' : 'success',\n        metadata: { conversationId, tokensUsed: result.tokensUsed, cost: result.cost },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n  app.put('/api/ai/conversations/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      const { title } = req.body;\n\n      if (!title || title.trim().length === 0) {\n        return res.status(400).json({ message: \"Title is required\" });\n      }\n\n      const conversation = await aiAssistantService.updateConversationTitle(\n        conversationId, \n        userId, \n        title.trim()\n      );\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error updating conversation:\", error);\n      res.status(500).json({ message: \"Failed to update conversation\" });\n    }\n  });\n\n  // –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n  app.delete('/api/ai/conversations/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n\n      const success = await aiAssistantService.deleteConversation(conversationId, userId);\n\n      if (success) {\n        await storage.createActivityLog({\n          userId,\n          action: 'AI Conversation Deleted',\n          description: `–£–¥–∞–ª–µ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º #${conversationId}`,\n          platformId: null,\n          status: 'success',\n          metadata: { conversationId },\n        });\n        res.json({ message: \"Conversation deleted successfully\" });\n      } else {\n        res.status(404).json({ message: \"Conversation not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting conversation:\", error);\n      res.status(500).json({ message: \"Failed to delete conversation\" });\n    }\n  });\n\n  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n  app.post('/api/ai/conversations/:id/generate-title', isAuthenticated, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const title = await aiAssistantService.generateConversationTitle(conversationId);\n\n      const userId = req.user.claims.sub;\n      const updatedConversation = await aiAssistantService.updateConversationTitle(\n        conversationId, \n        userId, \n        title\n      );\n\n      res.json({ title, conversation: updatedConversation });\n    } catch (error) {\n      console.error(\"Error generating title:\", error);\n      res.status(500).json({ message: \"Failed to generate title\" });\n    }\n  });\n\n  // === –í–ò–ó–£–ê–õ–¨–ù–´–ô AI-–ö–û–ù–¢–ï–ù–¢ ===\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ –∫–∞–Ω–∞–ª–∞\n  app.post('/api/ai/channel-cover', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { niche, style } = req.body;\n\n      if (!niche || !style) {\n        return res.status(400).json({ message: \"Niche and style are required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generateChannelCover(niche, style);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Channel Cover Generated',\n        description: `Generated channel cover for ${niche} in ${style} style`,\n        platformId: null,\n        status: 'success',\n        metadata: { niche, style, cost: result.cost },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating channel cover:\", error);\n      res.status(500).json({ message: \"Failed to generate channel cover\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞\n  app.post('/api/ai/post-illustration', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { topic, mood } = req.body;\n\n      if (!topic || !mood) {\n        return res.status(400).json({ message: \"Topic and mood are required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generatePostIllustration(topic, mood);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Post Illustration Generated',\n        description: `Generated illustration for ${topic}`,\n        platformId: null,\n        status: 'success',\n        metadata: { topic, mood, cost: result.cost },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating illustration:\", error);\n      res.status(500).json({ message: \"Failed to generate illustration\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–º–∞\n  app.post('/api/ai/meme', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { scenario, humor } = req.body;\n\n      if (!scenario || !humor) {\n        return res.status(400).json({ message: \"Scenario and humor type are required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generateMeme(scenario, humor);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Meme Generated',\n        description: `Generated meme about ${scenario}`,\n        platformId: null,\n        status: 'success',\n        metadata: { scenario, humor, cost: result.cost },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating meme:\", error);\n      res.status(500).json({ message: \"Failed to generate meme\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏\n  app.post('/api/ai/infographic', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { title, keyPoints, statistics } = req.body;\n\n      if (!title || !keyPoints || !statistics) {\n        return res.status(400).json({ message: \"Title, key points and statistics are required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generateInfographic({\n        title,\n        keyPoints,\n        statistics\n      });\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Infographic Generated',\n        description: `Generated infographic: ${title}`,\n        platformId: null,\n        status: 'success',\n        metadata: { title, cost: result.cost },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating infographic:\", error);\n      res.status(500).json({ message: \"Failed to generate infographic\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏\n  app.post('/api/ai/voiceover', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text, voice, speed } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ message: \"Text is required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generateVoiceover(text, voice, speed);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Voiceover Generated',\n        description: `Generated voiceover (${text.length} chars)`,\n        platformId: null,\n        status: 'success',\n        metadata: { voice, speed, cost: result.cost },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating voiceover:\", error);\n      res.status(500).json({ message: \"Failed to generate voiceover\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ-—Å–∫—Ä–∏–ø—Ç–∞\n  app.post('/api/ai/video-script', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { topic, duration, tone } = req.body;\n\n      if (!topic) {\n        return res.status(400).json({ message: \"Topic is required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generateVideoScript(topic, duration, tone);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Video Script Generated',\n        description: `Generated video script for ${topic}`,\n        platformId: null,\n        status: 'success',\n        metadata: { topic, duration, tone },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating video script:\", error);\n      res.status(500).json({ message: \"Failed to generate video script\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω-—à–∞–±–ª–æ–Ω–∞\n  app.post('/api/ai/design-template', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { platform, content } = req.body;\n\n      if (!platform || !content) {\n        return res.status(400).json({ message: \"Platform and content are required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generateDesignTemplate(platform, content);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Design Template Generated',\n        description: `Generated design template for ${platform}`,\n        platformId: null,\n        status: 'success',\n        metadata: { platform, content },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating design template:\", error);\n      res.status(500).json({ message: \"Failed to generate design template\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/ai/game-content', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { type, topic, difficulty } = req.body;\n\n      if (!type || !topic || !difficulty) {\n        return res.status(400).json({ message: \"Type, topic, and difficulty are required\" });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.generateGameContent(type, topic, difficulty);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Game Content Generated',\n        description: `Generated ${type} game content on ${topic}`,\n        platformId: null,\n        status: 'success',\n        metadata: { type, difficulty, points: result.points },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating game content:\", error);\n      res.status(500).json({ message: \"Failed to generate game content\" });\n    }\n  });\n\n  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ—Ç–∞\n  app.post('/api/ai/bot-personality', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { personality, niche } = req.body;\n\n      if (!personality || !niche) {\n        return res.status(400).json({ message: \"Personality and niche are required\" });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.createBotPersonality(personality, niche);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Bot Personality Created',\n        description: `Created ${personality} personality for ${niche}`,\n        platformId: null,\n        status: 'success',\n        metadata: { personality, niche },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error creating bot personality:\", error);\n      res.status(500).json({ message: \"Failed to create bot personality\" });\n    }\n  });\n\n  // –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–∞–∫–∞\n  app.post('/api/ai/content-pack', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { niche, posts, style } = req.body;\n\n      if (!niche || !posts) {\n        return res.status(400).json({ message: \"Niche and posts count are required\" });\n      }\n\n      const result = await (await import('./services/visualContentAI')).visualContentAI.generateContentPack({\n        niche,\n        posts,\n        style: style || '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'\n      });\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Content Pack Generated',\n        description: `Generated content pack: ${result.covers.length} covers, ${result.illustrations.length} illustrations, ${result.memes.length} memes`,\n        platformId: null,\n        status: 'success',\n        metadata: { niche, posts, totalCost: result.totalCost },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating content pack:\", error);\n      res.status(500).json({ message: \"Failed to generate content pack\" });\n    }\n  });\n\n  // === –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï AI –¢–†–ï–ô–î–ò–ù–ì –ú–ê–†–®–†–£–¢–´ ===\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è viral TikTok –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/ai/viral-tiktok', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { trend, hooks } = req.body;\n\n      if (!trend || !hooks || !Array.isArray(hooks)) {\n        return res.status(400).json({ message: \"Trend and hooks array are required\" });\n      }\n\n      const result = await aiContentService.generateViralTikTokContent(trend, hooks);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Viral TikTok Generated',\n        description: `Generated viral TikTok content for trend: ${trend}`,\n        platformId: null,\n        status: 'success',\n        metadata: { trend, hooks },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating viral TikTok content:\", error);\n      res.status(500).json({ message: \"Failed to generate viral TikTok content\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è YouTube –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç–∏–ª–µ —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤\n  app.post('/api/ai/youtube-analysis', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { markets, style } = req.body;\n\n      if (!markets || !Array.isArray(markets) || !style) {\n        return res.status(400).json({ message: \"Markets array and style are required\" });\n      }\n\n      const result = await aiContentService.generateYouTubeAnalysis(markets, style);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI YouTube Analysis Generated',\n        description: `Generated YouTube analysis in ${style} style for ${markets.join(', ')}`,\n        platformId: null,\n        status: 'success',\n        metadata: { markets, style },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating YouTube analysis:\", error);\n      res.status(500).json({ message: \"Failed to generate YouTube analysis\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è live —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n  app.post('/api/ai/live-signal', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { symbol, action, entry, targets, stopLoss, leverage, confidence } = req.body;\n\n      if (!symbol || !action || !entry || !targets || !stopLoss) {\n        return res.status(400).json({ message: \"Symbol, action, entry, targets, and stopLoss are required\" });\n      }\n\n      const result = await aiContentService.generateLiveSignalPost(\n        symbol, action, entry, targets, stopLoss, leverage, confidence\n      );\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Live Signal Generated',\n        description: `Generated live signal for ${symbol} (${action})`,\n        platformId: null,\n        status: 'success',\n        metadata: { symbol, action, entry, targets, stopLoss, leverage },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating live signal:\", error);\n      res.status(500).json({ message: \"Failed to generate live signal\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è crypto –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n  app.post('/api/ai/crypto-predictions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { timeframe, coins, reasoning } = req.body;\n\n      if (!timeframe || !coins || !reasoning || !Array.isArray(coins) || !Array.isArray(reasoning)) {\n        return res.status(400).json({ message: \"Timeframe, coins array, and reasoning array are required\" });\n      }\n\n      const result = await aiContentService.generateCryptoPredictions(timeframe, coins, reasoning);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Crypto Predictions Generated',\n        description: `Generated crypto predictions for ${timeframe}: ${coins.join(', ')}`,\n        platformId: null,\n        status: 'success',\n        metadata: { timeframe, coins, reasoning },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating crypto predictions:\", error);\n      res.status(500).json({ message: \"Failed to generate crypto predictions\" });\n    }\n  });\n\n  // –ê–Ω–∞–ª–∏–∑ –º–µ–º–∫–æ–∏–Ω–æ–≤\n  app.post('/api/ai/memecoin-analysis', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { coin, metrics } = req.body;\n\n      if (!coin || !metrics) {\n        return res.status(400).json({ message: \"Coin and metrics are required\" });\n      }\n\n      const result = await aiContentService.generateMemeCoinAnalysis(coin, metrics);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Memecoin Analysis Generated',\n        description: `Generated memecoin analysis for ${coin}`,\n        platformId: null,\n        status: 'success',\n        metadata: { coin, metrics },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating memecoin analysis:\", error);\n      res.status(500).json({ message: \"Failed to generate memecoin analysis\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è forex –æ–±—É—á–µ–Ω–∏—è\n  app.post('/api/ai/forex-education', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { topic, experience, focus } = req.body;\n\n      if (!topic || !experience || !focus) {\n        return res.status(400).json({ message: \"Topic, experience, and focus are required\" });\n      }\n\n      const result = await aiContentService.generateForexEducation(topic, experience, focus);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Forex Education Generated',\n        description: `Generated forex education on ${topic} for ${experience} traders`,\n        platformId: null,\n        status: 'success',\n        metadata: { topic, experience, focus },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating forex education:\", error);\n      res.status(500).json({ message: \"Failed to generate forex education\" });\n    }\n  });\n\n  // === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê (Grammarly-–ø–æ–¥–æ–±–Ω–∞—è) ===\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å—Ç–∏–ª—è\n  app.post('/api/ai/check-grammar', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text, targetAudience } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ message: \"Text is required\" });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.checkGrammarAndStyle(\n        text,\n        targetAudience || 'professional'\n      );\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Grammar Check Completed',\n        description: `Checked ${text.length} characters, found ${result.grammarIssues.length} issues`,\n        platformId: null,\n        status: 'success',\n        metadata: { seoScore: result.seoScore, readabilityScore: result.readabilityScore },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error checking grammar:\", error);\n      res.status(500).json({ message: \"Failed to check grammar\" });\n    }\n  });\n\n  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/ai/analyze-sentiment', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ message: \"Text is required\" });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.analyzeSentiment(text);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Sentiment Analysis Completed',\n        description: `Analyzed sentiment: ${result.sentiment} (${result.score})`,\n        platformId: null,\n        status: 'success',\n        metadata: { sentiment: result.sentiment, emotions: result.emotions },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error analyzing sentiment:\", error);\n      res.status(500).json({ message: \"Failed to analyze sentiment\" });\n    }\n  });\n\n  // TLDR –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n  app.post('/api/ai/generate-tldr', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text, maxLength } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ message: \"Text is required\" });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.generateTLDR(text, maxLength || 200);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'TLDR Generated',\n        description: `Generated TLDR for ${text.length} characters`,\n        platformId: null,\n        status: 'success',\n        metadata: { keyPoints: result.keyPoints.length },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating TLDR:\", error);\n      res.status(500).json({ message: \"Failed to generate TLDR\" });\n    }\n  });\n\n  // === –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ===\n\n  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–µ–º\n  app.post('/api/ai/analyze-trends', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { platform, niche } = req.body;\n\n      if (!platform || !niche) {\n        return res.status(400).json({ message: \"Platform and niche are required\" });\n      }\n\n      const result = await aiContentService.analyzeTrendingTopics(platform, niche);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Trends Analyzed',\n        description: `Analyzed trending topics for ${platform} ${niche}`,\n        platformId: null,\n        status: 'success',\n        metadata: { platform, niche },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error analyzing trends:\", error);\n      res.status(500).json({ message: \"Failed to analyze trends\" });\n    }\n  });\n\n  // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞\n  app.post('/api/ai/optimize-hashtags-pro', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, platform, targetAudience } = req.body;\n\n      if (!content || !platform) {\n        return res.status(400).json({ message: \"Content and platform are required\" });\n      }\n\n      const result = await aiContentService.optimizeHashtags(content, platform, targetAudience);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Hashtags Optimized',\n        description: `Optimized hashtags for ${platform}`,\n        platformId: null,\n        status: 'success',\n        metadata: { platform, targetAudience },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error optimizing hashtags:\", error);\n      res.status(500).json({ message: \"Failed to optimize hashtags\" });\n    }\n  });\n\n  // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n  app.post('/api/ai/competitor-analysis', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { competitors, analysisType } = req.body;\n\n      if (!competitors || !Array.isArray(competitors) || !analysisType) {\n        return res.status(400).json({ message: \"Competitors array and analysis type are required\" });\n      }\n\n      const result = await aiContentService.generateCompetitorAnalysis(competitors, analysisType);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Competitor Analysis',\n        description: `Analyzed competitors for ${analysisType}: ${competitors.join(', ')}`,\n        platformId: null,\n        status: 'success',\n        metadata: { competitors, analysisType },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error analyzing competitors:\", error);\n      res.status(500).json({ message: \"Failed to analyze competitors\" });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è hook-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n  app.post('/api/ai/generate-hooks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { contentType, emotion } = req.body;\n\n      if (!contentType || !emotion) {\n        return res.status(400).json({ message: \"Content type and emotion are required\" });\n      }\n\n      const result = await aiContentService.generateHookLibrary(contentType, emotion);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Hooks Generated',\n        description: `Generated ${contentType} hooks with ${emotion} emotion`,\n        platformId: null,\n        status: 'success',\n        metadata: { contentType, emotion },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating hooks:\", error);\n      res.status(500).json({ message: \"Failed to generate hooks\" });\n    }\n  });\n\n  // === AI VIDEO GENERATION (KLING AI) ===\n\n  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/ai-video/analyze-viral', isAuthenticated, async (req: any, res) => {\n    try {\n      const { topic, platform, limit } = req.body;\n\n      if (!topic) {\n        return res.status(400).json({ message: 'Topic is required' });\n      }\n\n      const analysis = await klingAIService.analyzeTopVideos(\n        topic,\n        platform || 'tiktok',\n        limit || 10\n      );\n\n      res.json({\n        success: true,\n        analysis,\n        message: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analysis.topVideos.length} —Ç–æ–ø–æ–≤—ã—Ö –≤–∏–¥–µ–æ`\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ:', error);\n      res.status(500).json({\n        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –í–ò–†–£–°–ù–û–ì–û –≤–∏–¥–µ–æ —Å –±—Ä–µ–Ω–¥–æ–º\n  app.post('/api/ai-video/generate-viral-branded', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { topic, brandConfig, options } = req.body;\n\n      if (!topic || !brandConfig || !brandConfig.name) {\n        return res.status(400).json({\n          message: 'Topic and brand config (with name) are required'\n        });\n      }\n\n      console.log(`üé¨ –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –±—Ä–µ–Ω–¥–∞: ${brandConfig.name}`);\n      console.log(`üìù –¢–µ–º–∞: ${topic}`);\n\n      const result = await klingAIService.generateViralBrandedVideo(\n        topic,\n        brandConfig,\n        options\n      );\n\n      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î\n      const videoRecord = await storage.createAIVideo({\n        userId,\n        postId: null,\n        videoId: result.videoId,\n        prompt: result.prompt,\n        config: {\n          ...options,\n          brand: brandConfig,\n          viralAnalysis: result.analysis\n        },\n        status: 'processing',\n        cost: result.cost\n      });\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Viral Branded Video Generated',\n        description: `–°–æ–∑–¥–∞–Ω–æ –≤–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ \"${topic}\" —Å –±—Ä–µ–Ω–¥–æ–º ${brandConfig.name}`,\n        platformId: null,\n        status: 'success',\n        metadata: {\n          videoId: result.videoId,\n          brand: brandConfig.name,\n          viralFactors: result.analysis.commonElements,\n          cost: result.cost\n        }\n      });\n\n      res.json({\n        success: true,\n        video: videoRecord,\n        analysis: result.analysis,\n        brandedElements: result.brandedElements,\n        prompt: result.prompt,\n        message: `‚úÖ –í–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è! Task ID: ${result.videoId}`\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', error);\n      res.status(500).json({\n        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }
  });\n\n  // Generate AI video with HeyGen or Synthesia\n  app.post('/api/ai-video/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { prompt, config, postId } = req.body;\n\n      if (!prompt) {\n        return res.status(400).json({ message: \"Prompt is required\" });\n      }\n\n      const { klingAIService } = await import('./services/klingAIService');\n      const videoResult = await klingAIService.generateTextToVideo(prompt, config);\n\n      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n      const aiVideo = await storage.createAIVideo({\n        userId,\n        postId: postId || null,\n        videoId: videoResult.taskId,\n        prompt,\n        config: config || {},\n        status: 'processing',\n        provider: videoResult.provider,\n        cost: videoResult.cost\n      });\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Video Generation Started',\n        description: `Video generation started: ${prompt.substring(0, 50)}...`,\n        platformId: null,\n        status: 'success',\n        metadata: { aiVideoId: aiVideo.id, taskId: videoResult.taskId },\n      });\n\n      res.json({\n        ...videoResult,\n        id: aiVideo.id\n      });\n    } catch (error) {\n      console.error(\"Error generating video:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Failed to generate video\"\n      });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Image-to-Video)\n  app.post('/api/ai-video/generate-from-image', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { imageUrl, prompt, config, postId } = req.body;\n\n      if (!imageUrl || !prompt) {\n        return res.status(400).json({ message: \"Image URL and prompt are required\" });\n      }\n\n      const videoResult = await klingAIService.generateImageToVideo(imageUrl, prompt, config);\n\n      const aiVideo = await storage.createAIVideo({\n        userId,\n        postId: postId || null,\n        videoId: videoResult.taskId,\n        prompt,\n        config: { ...config, imageUrl },\n        status: 'processing',\n        provider: videoResult.provider,\n        cost: videoResult.cost\n      });\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Image-to-Video Started',\n        description: `Image-to-video generation started`,\n        platformId: null,\n        status: 'success',\n        metadata: { aiVideoId: aiVideo.id, taskId: videoResult.taskId },\n      });\n\n      res.json({\n        ...videoResult,\n        id: aiVideo.id\n      });\n    } catch (error) {\n      console.error(\"Error generating video from image:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Failed to generate video from image\"\n      });\n    }\n  });\n\n  // === PRO PLAN ACTIVATION ===\n  app.post('/api/subscription/activate-pro', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { monetizationService } = await import('./services/monetization');\n\n      const result = await monetizationService.activateProPlan(userId);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Pro Features Unlocked',\n        description: 'üöÄ –í—Å–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã',\n        status: 'success',\n        metadata: {\n          payment: 50,\n          features: [\n            '10,000 AI –∫—Ä–µ–¥–∏—Ç–æ–≤/–º–µ—Å—è—Ü',\n            '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã',\n            '5 –ø–ª–∞—Ç—Ñ–æ—Ä–º',\n            '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',\n            '–í–∏—Ä—É—Å–Ω—ã–π –¥–≤–∏–∂–æ–∫',\n            '–ê–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ',\n            '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞',\n            'AI –æ–±—É—á–µ–Ω–∏–µ'\n          ]\n        }\n      });\n\n      res.json({\n        success: true,\n        message: 'üéâ PRO –ü–õ–ê–ù –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!',\n        plan: result.plan,\n        features: result.features,\n        unlocked: [\n          '‚úÖ Unlimited AI –∫–æ–Ω—Ç–µ–Ω—Ç',\n          '‚úÖ Viral Growth Engine',\n          '‚úÖ Brand Domination',\n          '‚úÖ Competitor Surveillance',\n          '‚úÖ Auto Promotion Bot',\n          '‚úÖ Deep Analytics',\n          '‚úÖ AI Learning System',\n          '‚úÖ Priority Support'\n        ]\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Pro:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Pro –ø–ª–∞–Ω' });\n    }\n  });\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n  app.get('/api/subscription/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n\n      res.json({\n        active: true,\n        plan: 'pro',\n        credits: 10000,\n        features: {\n          unlimitedPosts: true,\n          platforms: 5,\n          advancedAI: true,\n          viralEngine: true,\n          analytics: true,\n          autoPromotion: true\n        },\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n      });\n    } catch (error) {\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏' });\n    }\n  });\n\n  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –¢–µ–º–∞ ‚Üí –°–∫—Ä–∏–ø—Ç ‚Üí –í–∏–¥–µ–æ\n  app.post('/api/ai-video/auto-generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { topic, config, postId } = req.body;\n\n      if (!topic) {\n        return res.status(400).json({ message: \"Topic is required\" });\n      }\n\n      const { klingAIService } = await import('./services/klingAIService');\n      const result = await klingAIService.autoGenerateVideo(topic, config);\n\n      const aiVideo = await storage.createAIVideo({\n        userId,\n        postId: postId || null,\n        videoId: result.video.taskId,\n        prompt: topic,\n        config: { ...config, script: result.script },\n        status: 'processing',\n        provider: result.video.provider,\n        cost: result.video.cost\n      });\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Auto Video Generation',\n        description: `Auto video generation for topic: ${topic}`,\n        platformId: null,\n        status: 'success',\n        metadata: { aiVideoId: aiVideo.id, taskId: result.video.taskId },\n      });\n\n      res.json({\n        script: result.script,\n        video: {\n          ...result.video,\n          id: aiVideo.id\n        }\n      });\n    } catch (error) {\n      console.error(\"Error in auto video generation:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Failed to auto-generate video\"\n      });\n    }\n  });\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ\n  app.get('/api/ai-video/status/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const aiVideo = await storage.getAIVideo(parseInt(req.params.id));\n\n      if (!aiVideo || aiVideo.userId !== userId) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n\n      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É Kling AI –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω\n      if (aiVideo.status === 'processing') {\n        const { klingAIService } = await import('./services/klingAIService');\n        const status = await klingAIService.checkVideoStatus(aiVideo.videoId);\n\n        if (status.status === 'completed') {\n          await storage.updateAIVideoStatus(\n            aiVideo.id,\n            'completed',\n            status.videoUrl,\n            status.thumbnailUrl\n          );\n          aiVideo.status = 'completed';\n          aiVideo.videoUrl = status.videoUrl || null;\n          aiVideo.thumbnailUrl = status.thumbnailUrl || null;\n        } else if (status.status === 'failed') {\n          await storage.updateAIVideoStatus(aiVideo.id, 'failed');\n          aiVideo.status = 'failed';\n        }\n      }\n\n      res.json(aiVideo);\n    } catch (error) {\n      console.error(\"Error checking video status:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Failed to check video status\"\n      });\n    }\n  });\n\n  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ AI –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n  app.get('/api/ai-video/user-videos', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n\n      const videos = await storage.getUserAIVideos(userId, limit);\n      res.json(videos);\n    } catch (error) {\n      console.error(\"Error fetching user videos:\", error);\n      res.status(500).json({ message: \"Failed to fetch user videos\" });\n    }\n  });\n\n  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï ===\n\n  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Lucifer\n  app.post('/api/client/init-lucifer', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n\n      const luciferProfile = {\n        name: 'Lucifer Tradera',\n        platforms: {\n          youtube: 'https://www.youtube.com/@Lucifer_tradera',\n          tiktok: 'https://vm.tiktok.com/ZNHnt6CTrMdwp-ckGNa',\n          telegram: ['https://t.me/Lucifer_Izzy_bot', 'https://t.me/Lucifer_tradera']\n        },\n        niche: 'trading',\n        contentType: 'trading_signals',\n      };\n\n      // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑\n      const analysis = await clientAnalysisService.analyzeClientProfile(luciferProfile);\n\n      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n      const strategy = await promotionEngine.createPromotionStrategy(luciferProfile);\n\n      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é\n      await storage.createActivityLog({\n        userId,\n        action: 'Client Initialized',\n        description: 'Lucifer Tradera profile analyzed and promotion strategy created',\n        status: 'success',\n        metadata: { client: 'Lucifer_tradera', analysis, strategy },\n      });\n\n      res.json({\n        message: '–ö–ª–∏–µ–Ω—Ç Lucifer Tradera —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',\n        analysis,\n        strategy,\n        recommendations: analysis.recommendations,\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' });\n    }\n  });\n\n  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n  app.post('/api/promotion/start', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const { strategy } = req.body;\n      const result = await promotionEngine.executePromotionStrategy(userId, strategy);\n\n      res.json({\n        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',\n        result,\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' });\n    }\n  });\n\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n  app.get('/api/promotion/metrics/:clientId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { clientId } = req.params;\n\n      const metrics = await promotionEngine.getPromotionMetrics(userId, clientId);\n\n      res.json(metrics);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏' });\n    }\n  });\n\n  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n  app.post('/api/promotion/adapt-strategy', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { strategyId, performanceData } = req.body;\n\n      const adaptedStrategy = await promotionEngine.adaptStrategy(strategyId, performanceData);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Strategy Adapted',\n        description: `Strategy ${strategyId} adapted based on performance`,\n        status: 'success',\n        metadata: { strategyId, adaptedStrategy },\n      });\n\n      res.json({\n        message: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞',\n        adaptedStrategy,\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é' });\n    }\n  });\n\n  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n  app.get('/api/promotion/results', isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const days = parseInt(req.query.days as string) || 7;\n      const results = await promotionEngine.analyzePromotionResults(userId, days);\n\n      res.json(results);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const platformId = req.query.platformId ? parseInt(req.query.platformId as string) : undefined;\n      const analytics = await storage.getUserAnalytics(userId, platformId);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  app.get('/api/analytics/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const dashboardData = await analyticsService.getDashboardData(userId);\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Safety routes\n  app.get('/api/safety/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const safetyStatus = await safetyService.getUserSafetyStatus(userId);\n      res.json(safetyStatus);\n    } catch (error) {\n      console.error(\"Error fetching safety status:\", error);\n      res.status(500).json({ message: \"Failed to fetch safety status\" });\n    }\n  });\n\n  app.post('/api/safety/check', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const result = await safetyService.performSafetyCheck(userId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error performing safety check:\", error);\n      res.status(500).json({ message: \"Failed to perform safety check\" });\n    }\n  });\n\n  // Scheduler routes\n  app.get('/api/scheduler/jobs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const jobs = await schedulerService.getUserJobs(userId);\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error fetching scheduled jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch scheduled jobs\" });\n    }\n  });\n\n  app.post('/api/scheduler/emergency-stop', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await schedulerService.emergencyStop(userId);\n\n      // Log activity\n      await storage.createActivityLog({\n        userId,\n        action: 'Emergency Stop',\n        description: 'All automation stopped by user',\n        platformId: null,\n        status: 'warning',\n        metadata: null,\n      });\n\n      res.json({ message: 'Emergency stop activated' });\n    } catch (error) {\n      console.error(\"Error performing emergency stop:\", error);\n      res.status(500).json({ message: \"Failed to perform emergency stop\" });\n    }\n  });\n\n  // Master Automation routes\n  app.post('/api/automation/start', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await masterAutomation.startFullAutomation(userId);\n\n      res.json({\n        message: 'Full automation started',\n        status: 'running'\n      });\n    } catch (error) {\n      console.error(\"Error starting master automation:\", error);\n      res.status(500).json({ message: \"Failed to start automation\" });\n    }\n  });\n\n  app.post('/api/automation/stop', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await masterAutomation.stopAutomation(userId);\n\n      res.json({\n        message: 'Automation stopped',\n        status: 'stopped'\n      });\n    } catch (error) {\n      console.error(\"Error stopping master automation:\", error);\n      res.status(500).json({ message: \"Failed to stop automation\" });\n    }\n  });\n\n  app.get('/api/automation/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const status = await masterAutomation.getAutomationStatus(userId);\n\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error getting automation status:\", error);\n      res.status(500).json({ message: \"Failed to get automation status\" });\n    }\n  });\n\n  // Activity logs\n  app.get('/api/activity', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const activities = await storage.getUserActivityLogs(userId, limit);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activity logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  // Deep Analytics Routes\n  app.get('/api/analytics/platform/:platformId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { platformId } = req.params;\n      const userId = req.user.claims.sub;\n      const days = parseInt(req.query.days as string) || 30;\n      const analytics = await storage.getPlatformAnalytics(userId, parseInt(platformId), days);\n\n      const latestMetrics = analytics[0]?.metrics || {\n        followers: 0,\n        following: 0,\n        posts: 0,\n        likes: 0,\n        comments: 0,\n        shares: 0,\n        views: 0,\n        impressions: 0,\n        reach: 0,\n        engagement_rate: 0,\n        growth_rate: 0,\n      };\n\n      res.json(latestMetrics);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã' });\n    }\n  });\n\n  app.get('/api/analytics/insights', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const type = req.query.type as string;\n      const insights = await storage.getAIInsights(userId, type);\n      res.json(insights);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∏–Ω—Å–∞–π—Ç–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI –∏–Ω—Å–∞–π—Ç—ã' });\n    }\n  });\n\n  app.get('/api/analytics/competitors/:platformId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { platformId } = req.params;\n      const userId = req.user.claims.sub;\n      const competitors = await storage.getCompetitorAnalyses(userId, parseInt(platformId));\n\n      const competitorData = competitors.map(comp => ({\n        handle: comp.competitorHandle,\n        name: comp.competitorName || comp.competitorHandle,\n        metrics: {\n          followers: comp.metrics.followers,\n          engagement_rate: comp.metrics.engagement_rate,\n          posting_frequency: comp.metrics.posting_frequency,\n        },\n        insights: [\n          `–°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${comp.metrics.engagement_rate.toFixed(1)}%`,\n          `–ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ${comp.metrics.posting_frequency.toFixed(1)} –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å`,\n          `${comp.metrics.followers.toLocaleString()} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,\n        ],\n      }));\n\n      res.json(competitorData);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });\n    }\n  });\n\n  app.get('/api/analytics/trends/:platformId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { platformId } = req.params;\n      const category = req.query.category as string;\n      const days = parseInt(req.query.days as string) || 7;\n      const trends = await storage.getTrendAnalysis(parseInt(platformId), category, days);\n\n      const trendData = trends.map(trend => ({\n        name: trend.trend_name,\n        volume: trend.data.volume,\n        growth_rate: trend.data.growth_rate,\n        confidence: parseFloat(trend.confidence),\n        category: trend.category,\n      }));\n\n      res.json(trendData);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã' });\n    }\n  });\n\n  app.post('/api/analytics/analyze-content', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, platform } = req.body;\n\n      if (!content || !platform) {\n        return res.status(400).json({ error: '–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });\n      }\n\n      const platformData = await storage.getUserAccounts(userId);\n      const targetPlatform = platformData.find(p => p.platformId.toString() === platform);\n\n      let historicalData: any[] = [];\n      if (targetPlatform) {\n        historicalData = await storage.getContentPerformance(userId, targetPlatform.platformId, 30);\n      }\n\n      const analysis = await aiAnalyticsService.analyzeContent(content, platform, historicalData);\n      res.json(analysis);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç' });\n    }\n  });\n\n  app.post('/api/analytics/optimize-hashtags', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, platform, targetAudience } = req.body;\n\n      if (!content || !platform) {\n        return res.status(400).json({ error: '–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });\n      }\n\n      const hashtagOptimization = await aiAnalyticsService.optimizeHashtags(\n        content,\n        platform,\n        targetAudience\n      );\n\n      res.json(hashtagOptimization);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à—Ç–µ–≥–∏' });\n    }\n  });\n\n  // Social Media OAuth Integration Routes\n  app.get('/api/social/auth/:platformId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const platformId = parseInt(req.params.platformId);\n      const state = require('crypto').randomUUID();\n\n      const service = socialMediaManager.getService(platformId);\n      if (!service) {\n        return res.status(400).json({ error: 'Platform not supported' });\n      }\n\n      const authUrl = await service.getAuthUrl(userId, state);\n\n      // Store state for CSRF protection\n      req.session.oauthState = { state, userId, platformId };\n\n      res.json({ authUrl });\n    } catch (error) {\n      console.error('OAuth initialization error:', error);\n      res.status(500).json({ error: 'Failed to initialize OAuth' });\n    }\n  });\n\n  app.get('/api/social/callback', isAuthenticated, async (req: any, res) => {\n    try {\n      const { code, state, error } = req.query;\n\n      if (error) {\n        return res.status(400).json({ error: `OAuth error: ${error}` });\n      }\n\n      if (!code || !state) {\n        return res.status(400).json({ error: 'Missing authorization code or state' });\n      }\n\n      const sessionState = req.session.oauthState;\n      if (!sessionState || sessionState.state !== state) {\n        return res.status(400).json({ error: 'Invalid state parameter' });\n      }\n\n      const { userId, platformId } = sessionState;\n\n      const service = socialMediaManager.getService(platformId);\n      if (!service) {\n        return res.status(400).json({ error: 'Platform not supported' });\n      }\n\n      // Exchange code for tokens\n      const tokens = await service.exchangeCodeForToken(code, state);\n\n      // Create or update user account\n      const existingAccount = await storage.getUserAccount(userId, platformId);\n\n      let accountId: number;\n      if (existingAccount) {\n        await storage.updateUserAccount(existingAccount.id, {\n          accessToken: tokens.accessToken,\n          refreshToken: tokens.refreshToken,\n          tokenExpiry: tokens.expiresAt,\n          authStatus: 'connected',\n        });\n        accountId = existingAccount.id;\n      } else {\n        const newAccount = await storage.createUserAccount({\n          userId,\n          platformId,\n          accountHandle: 'New Account', // Will be updated with actual data\n          accessToken: tokens.accessToken,\n          refreshToken: tokens.refreshToken,\n          tokenExpiry: tokens.expiresAt,\n          authStatus: 'connected',\n        });\n        accountId = newAccount.id;\n      }\n\n      // For Instagram, get Business Account ID automatically\n      if (platformId === 1) { // Instagram\n        try {\n          const instagramService = service as any; // Cast to access Instagram-specific methods\n          if (instagramService.getInstagramBusinessAccountId) {\n            const businessAccountId = await instagramService.getInstagramBusinessAccountId(tokens.accessToken);\n\n            if (businessAccountId) {\n              // Get existing platform config and merge with business account ID\n              const currentAccount = await storage.getUserAccount(userId, platformId);\n              const existingConfig = (currentAccount && currentAccount.platformConfig) || {};\n\n              await storage.updateUserAccount(accountId, {\n                platformConfig: {\n                  ...existingConfig,\n                  businessAccountId,\n                },\n                accountHandle: `Instagram Business Account`,\n              });\n              console.log(`Instagram Business Account ID obtained: ${businessAccountId}`);\n            } else {\n              console.warn('Instagram Business Account ID not found. User may need to connect Instagram to Facebook page.');\n            }\n          }\n        } catch (error) {\n          console.error('Failed to get Instagram Business Account ID:', error);\n          // Don't fail the entire OAuth flow for this\n        }\n      }\n\n      // Clean up session\n      delete req.session.oauthState;\n\n      // Log successful connection\n      const platform = await storage.getPlatform(platformId);\n      await storage.createActivityLog({\n        userId,\n        platformId,\n        action: 'Platform Connected',\n        description: `Successfully connected ${platform?.displayName} account`,\n        status: 'success',\n        metadata: {},\n      });\n\n      res.json({ success: true, message: 'Platform connected successfully' });\n    } catch (error) {\n      console.error('OAuth callback error:', error);\n      res.status(500).json({ error: 'Failed to complete OAuth flow' });\n    }\n  });\n\n  app.post('/api/social/disconnect/:accountId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const accountId = parseInt(req.params.accountId);\n\n      const account = await storage.getUserAccount(userId, accountId);\n      if (!account) {\n        return res.status(404).json({ error: 'Account not found' });\n      }\n\n      await storage.updateUserAccount(accountId, {\n        isActive: false,\n        authStatus: 'disconnected',\n        accessToken: null,\n        refreshToken: null,\n        tokenExpiry: null,\n      });\n\n      // Log disconnection\n      const platform = await storage.getPlatform(account.platformId);\n      await storage.createActivityLog({\n        userId,\n        platformId: account.platformId,\n        action: 'Platform Disconnected',\n        description: `Disconnected ${platform?.displayName} account`,\n        status: 'success',\n        metadata: {},\n      });\n\n      res.json({ success: true, message: 'Account disconnected successfully' });\n    } catch (error) {\n      console.error('Disconnect account error:', error);\n      res.status(500).json({ error: 'Failed to disconnect account' });\n    }\n  });\n\n  app.post('/api/social/post', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, mediaUrls, platformIds } = req.body;\n\n      if (!content) {\n        return res.status(400).json({ error: 'Content is required' });\n      }\n\n      const postData = { content, mediaUrls };\n      let results;\n\n      if (platformIds && platformIds.length > 0) {\n        // Post to specific platforms\n        results = {} as { [platformId: number]: any };\n        const userAccounts = await storage.getUserAccounts(userId);\n\n        for (const platformId of platformIds) {\n          const account = userAccounts.find(acc => \n            acc.platformId === platformId && \n            acc.isActive && \n            acc.authStatus === 'connected'\n          );\n\n          if (account) {\n            const service = socialMediaManager.getService(platformId);\n            if (service) {\n              (results as any)[platformId] = await service.post(account, postData);\n            }\n          } else {\n            (results as any)[platformId] = {\n              success: false,\n              error: 'Account not connected for this platform',\n            };\n          }\n        }\n      } else {\n        // Post to all connected platforms\n        results = await socialMediaManager.postToAllPlatforms(userId, postData);\n      }\n\n      // Log posting activity\n      const successfulPosts = Object.values(results).filter((r: any) => r.success).length;\n      const totalPosts = Object.keys(results).length;\n\n      await storage.createActivityLog({\n        userId,\n        platformId: null,\n        action: 'Multi-Platform Post',\n        description: `Posted to ${successfulPosts}/${totalPosts} platforms`,\n        status: successfulPosts > 0 ? 'success' : 'error',\n        metadata: { results },\n      });\n\n      res.json({ results, summary: { successful: successfulPosts, total: totalPosts } });\n    } catch (error) {\n      console.error('Social media posting error:', error);\n      res.status(500).json({ error: 'Failed to post content' });\n    }\n  });\n\n  app.post('/api/social/validate-tokens', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await socialMediaManager.validateAllTokens(userId);\n\n      const updatedAccounts = await storage.getUserAccounts(userId);\n      res.json({\n        success: true,\n        accounts: updatedAccounts.map(acc => ({\n          id: acc.id,\n          platformId: acc.platformId,\n          authStatus: acc.authStatus,\n          isActive: acc.isActive,\n        }))\n      });\n    } catch (error) {\n      console.error('Token validation error:', error);\n      res.status(500).json({ error: 'Failed to validate tokens' });\n    }\n  });\n\n  // === AI –û–ë–£–ß–ï–ù–ò–ï –ò –†–ê–ó–í–ò–¢–ò–ï –°–ò–°–¢–ï–ú–´ ===\n\n  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞\n  app.post('/api/ai/initialize-learning', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { clientProfile } = req.body;\n\n      await aiLearningEngine.trainOnClientData(userId, clientProfile);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'AI Learning Initialized',\n        description: 'AI —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞',\n        status: 'success',\n        metadata: { clientProfile: clientProfile.name },\n      });\n\n      res.json({\n        message: 'AI —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞',\n        learningStatus: 'initialized',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è AI:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ AI' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n  app.post('/api/ai/generate-advanced-strategy', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { clientProfile } = req.body;\n\n      const strategy = await aiLearningEngine.generateAdvancedPromotionStrategy(clientProfile);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Advanced Strategy Generated',\n        description: '–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è AI —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è',\n        status: 'success',\n        metadata: { strategy: strategy },\n      });\n\n      res.json({\n        strategy,\n        message: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é' });\n    }\n  });\n\n  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/ai/predict-content-success', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, platform, timing, clientProfile } = req.body;\n\n      const prediction = await aiLearningEngine.predictContentSuccess(\n        content,\n        platform,\n        new Date(timing),\n        clientProfile\n      );\n\n      res.json({\n        prediction,\n        message: '–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/ai/generate-unique-content', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { clientProfile, contentType, platform } = req.body;\n\n      const uniqueContent = await aiLearningEngine.generateUniqueContent(\n        clientProfile,\n        contentType,\n        platform\n      );\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Unique Content Generated',\n        description: `–°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ${contentType} –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è ${platform}`,\n        status: 'success',\n        metadata: { contentType, platform, uniqueness_score: uniqueContent.uniqueness_score },\n      });\n\n      res.json({\n        content: uniqueContent,\n        message: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n  app.post('/api/ai/generate-viral-triggers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { contentType, platform, audience } = req.body;\n\n      const viralTriggers = await aiLearningEngine.generateViralTriggers(\n        contentType,\n        platform,\n        audience\n      );\n\n      res.json({\n        triggers: viralTriggers,\n        message: '–í–∏—Ä—É—Å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã' });\n    }\n  });\n\n  // –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n  app.post('/api/ai/continuous-learning', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n\n      await aiLearningEngine.continuousLearning();\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Continuous Learning Cycle',\n        description: '–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI',\n        status: 'success',\n        metadata: { timestamp: new Date() },\n      });\n\n      res.json({\n        message: '–¶–∏–∫–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω',\n        status: 'learning_updated',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ' });\n    }\n  });\n\n  // –û—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏ AI\n  app.get('/api/ai/learning-report', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n\n      const report = await aiLearningEngine.generateLearningReport(userId);\n\n      res.json({\n        report,\n        message: '–û—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏ AI –≥–æ—Ç–æ–≤',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±—É—á–µ–Ω–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç' });\n    }\n  });\n\n  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)\n  app.post('/api/ai/auto-learning', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n\n      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ\n      setInterval(async () => {\n        try {\n          await aiLearningEngine.continuousLearning();\n          console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');\n        } catch (error) {\n          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:', error);\n        }\n      }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å\n\n      res.json({\n        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',\n        frequency: '–∫–∞–∂–¥—ã–π —á–∞—Å',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ' });\n    }\n  });\n\n  // === –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –í–ò–†–£–°–ù–û–ì–û –†–û–°–¢–ê ===\n\n  // –ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞\n  app.post('/api/viral/analyze-potential', isAuthenticated, async (req: any, res) => {\n    try {\n      const { content, platform } = req.body;\n      const viralMetrics = await viralGrowthEngine.analyzeViralPotential(content, platform);\n      res.json({ metrics: viralMetrics, message: '–ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω' });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/viral/generate-content', isAuthenticated, async (req: any, res) => {\n    try {\n      const { niche, platform, targetEmotion } = req.body;\n      const viralContent = await viralGrowthEngine.generateViralContent(niche, platform, targetEmotion);\n\n      res.json({\n        content: viralContent,\n        message: '–í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' });\n    }\n  });\n\n  // –ó–∞–ø—É—Å–∫ –≤–∏—Ä—É—Å–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏\n  app.post('/api/viral/launch-campaign', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { campaignType, niche } = req.body;\n\n      const campaign = await viralGrowthEngine.launchViralCampaign(userId, campaignType, niche);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Viral Campaign Launched',\n        description: `–ó–∞–ø—É—â–µ–Ω–∞ –≤–∏—Ä—É—Å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è: ${campaignType}`,\n        status: 'success',\n        metadata: campaign,\n      });\n\n      res.json({\n        campaign,\n        message: '–í–∏—Ä—É—Å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏—Ä—É—Å–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—É—Å–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n  app.post('/api/viral/psychological-triggers', isAuthenticated, async (req: any, res) => {\n    try {\n      const { audience, goal } = req.body;\n      const triggers = await viralGrowthEngine.generatePsychologicalTriggers(audience, goal);\n\n      res.json({\n        triggers,\n        message: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã' });\n    }\n  });\n\n  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/viral/emotional-content', isAuthenticated, async (req: any, res) => {\n    try {\n      const { emotion, niche, platform } = req.body;\n      const emotionalContent = await viralGrowthEngine.createEmotionalContent(emotion, niche, platform);\n\n      res.json({\n        content: emotionalContent,\n        emotion,\n        message: `–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (${emotion}) —Å–æ–∑–¥–∞–Ω`,\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' });\n    }\n  });\n\n  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞\n  app.post('/api/viral/neuromarketing', isAuthenticated, async (req: any, res) => {\n    try {\n      const { content } = req.body;\n      const enhancedContent = await viralGrowthEngine.applyNeuroMarketingPrinciples(content);\n\n      res.json({\n        original: content,\n        enhanced: enhancedContent,\n        message: '–ù–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥' });\n    }\n  });\n\n  // === –°–ò–°–¢–ï–ú–ê –°–õ–ï–ñ–ï–ù–ò–Ø –ó–ê –ö–û–ù–ö–£–†–ï–ù–¢–ê–ú–ò ===\n\n  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n  app.post('/api/competitors/monitor', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { niche } = req.body;\n\n      const intelligence = await competitorSurveillance.monitorCompetitors(niche);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Competitor Intelligence',\n        description: `–°–æ–±—Ä–∞–Ω–∞ —Ä–∞–∑–≤–µ–¥–∫–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º –≤ –Ω–∏—à–µ: ${niche}`,\n        status: 'success',\n        metadata: intelligence,\n      });\n\n      res.json({\n        intelligence,\n        message: '–†–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º –ø–æ–ª—É—á–µ–Ω—ã',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });\n    }\n  });\n\n  // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n  app.post('/api/competitors/analyze-strategies', isAuthenticated, async (req: any, res) => {\n    try {\n      const { competitors } = req.body;\n      const strategies = await competitorSurveillance.analyzeCompetitorStrategies(competitors);\n\n      res.json({\n        strategies,\n        message: '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });\n    }\n  });\n\n  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n  app.post('/api/competitors/counter-strategy', isAuthenticated, async (req: any, res) => {\n    try {\n      const { competitorHandle, theirStrategy } = req.body;\n      const counterStrategy = await competitorSurveillance.createCounterStrategy(competitorHandle, theirStrategy);\n\n      res.json({\n        counterStrategy,\n        message: '–ö–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é' });\n    }\n  });\n\n  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n  app.post('/api/competitors/predict-moves', isAuthenticated, async (req: any, res) => {\n    try {\n      const { competitorData, marketTrends } = req.body;\n      const predictions = await competitorSurveillance.predictCompetitorMoves(competitorData, marketTrends);\n\n      res.json({\n        predictions,\n        message: '–î–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω—ã',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });\n    }\n  });\n\n  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n  app.post('/api/competitors/setup-monitoring', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { competitors } = req.body;\n\n      await competitorSurveillance.setupAutomaticMonitoring(userId, competitors);\n\n      res.json({\n        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',\n        competitors: competitors.length,\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' });\n    }\n  });\n\n  // === –°–ò–°–¢–ï–ú–ê –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø –ë–†–ï–ù–î–ê ===\n\n  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n  app.post('/api/domination/create-plan', isAuthenticated, async (req: any, res) => {\n    try {\n      const { clientProfile, targetMarketShare } = req.body;\n      const dominationPlan = await brandDominationEngine.createDominationPlan(clientProfile, targetMarketShare);\n\n      res.json({\n        plan: dominationPlan,\n        message: '–ü–ª–∞–Ω –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' });\n    }\n  });\n\n  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤–æ–π –∏–º–ø–µ—Ä–∏–∏\n  app.post('/api/domination/build-empire', isAuthenticated, async (req: any, res) => {\n    try {\n      const { clientProfile } = req.body;\n      const empire = await brandDominationEngine.buildBrandEmpire(clientProfile);\n\n      res.json({\n        empire,\n        message: '–ë—Ä–µ–Ω–¥–æ–≤–∞—è –∏–º–ø–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤–æ–π –∏–º–ø–µ—Ä–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥–æ–≤—É—é –∏–º–ø–µ—Ä–∏—é' });\n    }\n  });\n\n  // –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞\n  app.post('/api/domination/aggressive-growth', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { clientProfile } = req.body;\n\n      const results = await brandDominationEngine.executeAggressiveGrowth(userId, clientProfile);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Aggressive Growth Launched',\n        description: '–ó–∞–ø—É—â–µ–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞ –∏ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',\n        status: 'success',\n        metadata: results,\n      });\n\n      res.json({\n        results,\n        message: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞!',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç' });\n    }\n  });\n\n  // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞–º–ø–∞–Ω–∏—è\n  app.post('/api/domination/psychological-campaign', isAuthenticated, async (req: any, res) => {\n    try {\n      const { targetAudience, competitorWeaknesses } = req.body;\n      const campaign = await brandDominationEngine.launchPsychologicalCampaign(targetAudience, competitorWeaknesses);\n\n      res.json({\n        campaign,\n        message: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞–º–ø–∞–Ω–∏—é' });\n    }\n  });\n\n  // –ü–ª–∞–Ω –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏\n  app.post('/api/domination/monopolization-plan', isAuthenticated, async (req: any, res) => {\n    try {\n      const { niche } = req.body;\n      const monopolizationPlan = await brandDominationEngine.createMonopolizationPlan(niche);\n\n      res.json({\n        plan: monopolizationPlan,\n        message: '–ü–ª–∞–Ω –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏ —Ä—ã–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω',\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–∏' });\n    }\n  });\n\n  // Setup advanced promotion strategy routes\n  setupPromotionStrategyRoutes(app);\n\n  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–ó–£–ê–õ–ê ===\n\n  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞\n  app.post('/api/auto-visual/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { postText, platform } = req.body;\n\n      if (!postText || !platform) {\n        return res.status(400).json({ error: 'Post text and platform are required' });\n      }\n\n      const { autoVisualGenerator } = await import('./services/autoVisualGenerator');\n      const result = await autoVisualGenerator.generateVisualForPost(\n        postText,\n        platform,\n        userId\n      );\n\n      res.json({\n        success: true,\n        visual: result,\n        message: '–í–∏–∑—É–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω'\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª' });\n    }\n  });\n\n  // –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–æ–≤\n  app.post('/api/auto-visual/batch', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { posts } = req.body;\n\n      if (!posts || !Array.isArray(posts)) {\n        return res.status(400).json({ error: 'Posts array is required' });\n      }\n\n      const { autoVisualGenerator } = await import('./services/autoVisualGenerator');\n      const results = await autoVisualGenerator.generateVisualsForMultiplePosts(\n        posts,\n        userId\n      );\n\n      res.json({\n        success: true,\n        visuals: results,\n        count: results.length,\n        totalCost: results.reduce((sum, r) => sum + r.cost, 0)\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—ã' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª–∞\n  app.post('/api/auto-visual/viral', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { contentType, topic, platform } = req.body;\n\n      if (!contentType || !topic || !platform) {\n        return res.status(400).json({ error: 'Content type, topic, and platform are required' });\n      }\n\n      const { autoVisualGenerator } = await import('./services/autoVisualGenerator');\n      const result = await autoVisualGenerator.generateViralVisual(\n        contentType,\n        topic,\n        platform,\n        userId\n      );\n\n      res.json({\n        success: true,\n        visual: result,\n        message: `–í–∏—Ä—É—Å–Ω—ã–π ${contentType} –≤–∏–∑—É–∞–ª —Å–æ–∑–¥–∞–Ω`\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –≤–∏–∑—É–∞–ª' });\n    }\n  });\n\n  // === TELEGRAM PROMO BOT ROUTES ===\n\n  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–º–æ-–±–æ—Ç–∞\n  app.post('/api/promo-bot/start', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { channelId } = req.body;\n\n      if (!channelId) {\n        return res.status(400).json({ error: 'Channel ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });\n      }\n\n      const { TelegramPromoBot } = await import('./services/telegramPromoBot');\n      const bot = new TelegramPromoBot(userId, channelId);\n      const result = await bot.initialize();\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Promo Bot Started',\n        description: `Telegram –ø—Ä–æ–º–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}`,\n        status: 'success',\n        metadata: { channelId },\n      });\n\n      res.json({\n        success: true,\n        message: '–ü—Ä–æ–º–æ-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',\n        channelId,\n      });\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–º–æ-–±–æ—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ-–±–æ—Ç' });\n    }\n  });\n\n  // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ-–±–æ—Ç–∞\n  app.get('/api/promo-bot/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const { isActive } = await import('./services/telegramPromoBot');\n\n      res.json({\n        active: isActive,\n        features: [\n          '–í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å AI',\n          '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ 3x/–¥–µ–Ω—å',\n          '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',\n          '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',\n          '–¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑',\n          '–†–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞'\n        ],\n        cost: '$0.01/–¥–µ–Ω—å (~$0.30/–º–µ—Å—è—Ü)',\n      });\n    } catch (error) {\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å' });\n    }\n  });\n\n  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–º–æ-–±–æ—Ç–∞\n  app.post('/api/promo-bot/stop', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { promoBot } = await import('./services/telegramPromoBot');\n\n      if (promoBot) {\n        await promoBot.stopPolling({ cancel: true });\n      }\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Promo Bot Stopped',\n        description: 'Telegram –ø—Ä–æ–º–æ-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',\n        status: 'success',\n        metadata: {},\n      });\n\n      res.json({ success: true, message: '–ü—Ä–æ–º–æ-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });\n    } catch (error) {\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ-–±–æ—Ç' });\n    }\n  });\n\n  // === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê ===\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å—Ç–∏–ª—è\n  app.post('/api/content/check-grammar', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text, targetAudience } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.checkGrammarAndStyle(text, targetAudience);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Grammar Check',\n        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞',\n        status: 'success',\n        metadata: { issuesFound: result.grammarIssues.length },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É' });\n    }\n  });\n\n  // SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n  app.post('/api/content/optimize-seo', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, targetKeywords, platform } = req.body;\n\n      if (!content || !targetKeywords) {\n        return res.status(400).json({ error: '–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.optimizeForSEO(\n        content,\n        targetKeywords,\n        platform || 'telegram'\n      );\n\n      await storage.createActivityLog({\n        userId,\n        action: 'SEO Optimization',\n        description: 'SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞',\n        status: 'success',\n        metadata: { score: result.score },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è SEO' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TLDR\n  app.post('/api/content/generate-tldr', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text, maxLength } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.generateTLDR(text, maxLength);\n\n      await storage.createActivityLog({\n        userId,\n        action: 'TLDR Generated',\n        description: '–°–æ–∑–¥–∞–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',\n        status: 'success',\n        metadata: { originalLength: text.length, summaryLength: result.summary.length },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TLDR:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ' });\n    }\n  });\n\n  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n  app.post('/api/content/analyze-sentiment', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.analyzeSentiment(text);\n\n      res.json(result);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å' });\n    }\n  });\n\n  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n  app.post('/api/content/generate-game', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { type, topic, difficulty } = req.body;\n\n      if (!type || !topic) {\n        return res.status(400).json({ error: '–¢–∏–ø –∏ —Ç–µ–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });\n      }\n\n      const { contentOptimizationService } = await import('./services/contentOptimization');\n      const result = await contentOptimizationService.generateGameContent(\n        type,\n        topic,\n        difficulty || 'medium'\n      );\n\n      await storage.createActivityLog({\n        userId,\n        action: 'Game Content Generated',\n        description: `–°–æ–∑–¥–∞–Ω ${type} –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏`,\n        status: 'success',\n        metadata: { type, topic, difficulty },\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);\n      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç' });\n    }\n  });\n\n  // Object Storage routes (referenced from javascript_object_storage integration)\n  app.post('/api/objects/upload', isAuthenticated, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.get('/objects/:objectPath(*)', isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.put('/api/telegram/media', isAuthenticated, async (req: any, res) => {\n    if (!req.body.mediaURL) {\n      return res.status(400).json({ error: \"mediaURL is required\" });\n    }\n\n    const userId = req.user?.claims?.sub;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.mediaURL,\n        {\n          owner: userId,\n          visibility: \"public\",\n        }\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting media:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Brand Style endpoints\n  app.post('/api/brand-styles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const style = await storage.createBrandStyle({ ...req.body, userId });\n      res.json(style);\n    } catch (error) {\n      console.error('Error creating brand style:', error);\n      res.status(500).json({ error: 'Failed to create brand style' });\n    }\n  });\n\n  app.get('/api/brand-styles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const styles = await storage.getUserBrandStyles(userId);\n      res.json(styles);\n    } catch (error) {\n      console.error('Error fetching brand styles:', error);\n      res.status(500).json({ error: 'Failed to fetch brand styles' });\n    }\n  });\n\n  app.get('/api/brand-styles/default', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const style = await storage.getDefaultBrandStyle(userId);\n      res.json(style || null);\n    } catch (error) {\n      console.error('Error fetching default brand style:', error);\n      res.status(500).json({ error: 'Failed to fetch default brand style' });\n    }\n  });\n\n  app.get('/api/brand-styles/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const style = await storage.getBrandStyle(id);\n      if (!style) {\n        return res.status(404).json({ error: 'Brand style not found' });\n      }\n      res.json(style);\n    } catch (error) {\n      console.error('Error fetching brand style:', error);\n      res.status(500).json({ error: 'Failed to fetch brand style' });\n    }\n  });\n\n  app.put('/api/brand-styles/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const style = await storage.updateBrandStyle(id, req.body);\n      res.json(style);\n    } catch (error) {\n      console.error('Error updating brand style:', error);\n      res.status(500).json({ error: 'Failed to update brand style' });\n    }\n  });\n\n  app.post('/api/brand-styles/:id/set-default', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const id = parseInt(req.params.id);\n      await storage.setDefaultBrandStyle(userId, id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error setting default brand style:', error);\n      res.status(500).json({ error: 'Failed to set default brand style' });\n    }\n  });\n\n  // Trend Video endpoints\n  app.post('/api/trends', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const trend = await storage.createTrendVideo({ ...req.body, userId });\n      res.json(trend);\n    } catch (error) {\n      console.error('Error creating trend:', error);\n      res.status(500).json({ error: 'Failed to create trend' });\n    }\n  });\n\n  app.get('/api/trends', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const trends = await storage.getTrendVideos(userId, limit);\n      res.json(trends);\n    } catch (error) {\n      console.error('Error fetching trends:', error);\n      res.status(500).json({ error: 'Failed to fetch trends' });\n    }\n  });\n\n  app.get('/api/trends/top', isAuthenticated, async (req: any, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const trends = await storage.getTopTrends(limit);\n      res.json(trends);\n    } catch (error) {\n      console.error('Error fetching top trends:', error);\n      res.status(500).json({ error: 'Failed to fetch top trends' });\n    }\n  });\n\n  app.get('/api/trends/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const trend = await storage.getTrendVideo(id);\n      if (!trend) {\n        return res.status(404).json({ error: 'Trend not found' });\n      }\n      res.json(trend);\n    } catch (error) {\n      console.error('Error fetching trend:', error);\n      res.status(500).json({ error: 'Failed to fetch trend' });\n    }\n  });\n\n  app.get('/api/trends/:id/with-style', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const result = await storage.getTrendWithBrandStyle(id);\n      res.json(result);\n    } catch (error) {\n      console.error('Error fetching trend with style:', error);\n      res.status(500).json({ error: 'Failed to fetch trend with style' });\n    }\n  });\n\n  app.put('/api/trends/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const trend = await storage.updateTrendVideo(id, req.body);\n      res.json(trend);\n    } catch (error) {\n      console.error('Error updating trend:', error);\n      res.status(500).json({ error: 'Failed to update trend' });\n    }\n  });\n\n  app.put('/api/trends/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status, clonedVideoId, clonedPostId } = req.body;\n      const trend = await storage.updateTrendVideoStatus(id, status, clonedVideoId, clonedPostId);\n      res.json(trend);\n    } catch (error) {\n      console.error('Error updating trend status:', error);\n      res.status(500).json({ error: 'Failed to update trend status' });\n    }\n  });\n\n  app.get('/api/trends/pending/with-style', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const trends = await storage.getPendingTrendsWithDefaultStyle(userId, limit);\n      res.json(trends);\n    } catch (error) {\n      console.error('Error fetching pending trends with style:', error);\n      res.status(500).json({ error: 'Failed to fetch pending trends' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n", "last_modified": "2024-07-22T13:11:51.760Z"}
]