import { aiAnalyticsService } from './aiAnalytics';
import { storage } from '../storage';
import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
});

interface ClientProfile {
  name: string;
  niche: string;
  platforms: {
    youtube?: { url: string; subscribers: number; videos: number; avgViews: number };
    tiktok?: { url: string; followers: number; videos: number; avgViews: number };
    telegram?: { channel: string; members: number; avgReach: number };
    instagram?: { handle: string; followers: number; posts: number; engagement: number };
  };
  contentStrategy: {
    mainTopics: string[];
    targetAudience: string;
    contentTypes: string[];
    postingFrequency: string;
  };
  competitorAnalysis: {
    directCompetitors: string[];
    competitorStrengths: string[];
    marketGaps: string[];
  };
  growthMetrics: {
    currentReach: number;
    targetReach: number;
    growthPotential: number;
    estimatedTimeframe: string;
  };
}

class ClientAnalysisService {
  async analyzeClient(clientData: {
    youtube?: string;
    tiktok?: string;
    telegram?: string[];
    instagram?: string;
  }): Promise<ClientProfile> {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞...');

    // –ê–Ω–∞–ª–∏–∑ YouTube –∫–∞–Ω–∞–ª–∞
    let youtubeData = null;
    if (clientData.youtube) {
      youtubeData = await this.analyzeYouTubeChannel(clientData.youtube);
    }

    // –ê–Ω–∞–ª–∏–∑ TikTok –ø—Ä–æ—Ñ–∏–ª—è
    let tiktokData = null;
    if (clientData.tiktok) {
      tiktokData = await this.analyzeTikTokProfile(clientData.tiktok);
    }

    // –ê–Ω–∞–ª–∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
    let telegramData = null;
    if (clientData.telegram && clientData.telegram.length > 0) {
      telegramData = await this.analyzeTelegramChannels(clientData.telegram);
    }

    // AI –∞–Ω–∞–ª–∏–∑ –Ω–∏—à–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const strategicAnalysis = await this.generateStrategicAnalysis({
      youtube: youtubeData,
      tiktok: tiktokData,
      telegram: telegramData,
    });

    // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const competitorAnalysis = await this.analyzeCompetitors(strategicAnalysis.niche);

    return {
      name: 'Lucifer Tradera',
      niche: strategicAnalysis.niche,
      platforms: {
        youtube: youtubeData,
        tiktok: tiktokData,
        telegram: telegramData,
      },
      contentStrategy: strategicAnalysis.contentStrategy,
      competitorAnalysis,
      growthMetrics: strategicAnalysis.growthMetrics,
    };
  }

  private async analyzeYouTubeChannel(channelUrl: string) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
      const channelId = this.extractYouTubeChannelId(channelUrl);

      // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ YouTube (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YouTube Data API)
      const mockAnalysis = {
        url: channelUrl,
        subscribers: 1200, // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Lucifer_tradera
        videos: 45,
        avgViews: 850,
        totalViews: 38250,
        topTopics: ['–§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª—ã', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', '–¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'],
        uploadFrequency: '3-4 –≤–∏–¥–µ–æ –≤ –Ω–µ–¥–µ–ª—é',
        averageLength: '8-12 –º–∏–Ω—É—Ç',
        engagement: {
          likesPerVideo: 28,
          commentsPerVideo: 12,
          engagementRate: 3.8,
        },
      };

      console.log('üìä YouTube –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', mockAnalysis);
      return mockAnalysis;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ YouTube:', error);
      return null;
    }
  }

  private async analyzeTikTokProfile(profileUrl: string) {
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ TikTok
      const mockAnalysis = {
        url: profileUrl,
        followers: 890,
        videos: 23,
        avgViews: 1250,
        totalViews: 28750,
        topHashtags: ['#—Ñ–æ—Ä–µ–∫—Å', '#—Ç—Ä–µ–π–¥–∏–Ω–≥', '#—Å–∏–≥–Ω–∞–ª—ã', '#–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'],
        postingFrequency: '4-5 –≤–∏–¥–µ–æ –≤ –Ω–µ–¥–µ–ª—é',
        averageLength: '45-60 —Å–µ–∫—É–Ω–¥',
        engagement: {
          likesPerVideo: 48,
          commentsPerVideo: 8,
          sharesPerVideo: 12,
          engagementRate: 7.6,
        },
      };

      console.log('üéµ TikTok –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', mockAnalysis);
      return mockAnalysis;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ TikTok:', error);
      return null;
    }
  }

  private async analyzeTelegramChannels(channels: string[]) {
    try {
      // –ê–Ω–∞–ª–∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
      const channelAnalysis = {
        mainChannel: 'Lucifer_tradera',
        bot: 'Lucifer_Izzy_bot',
        estimatedMembers: 340,
        avgReach: 85,
        postingFrequency: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
        contentTypes: ['–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–æ–≤', '–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'],
        engagement: {
          viewsPerPost: 85,
          reactionsPerPost: 12,
          forwardsPerPost: 4,
        },
      };

      console.log('üì± Telegram –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', channelAnalysis);
      return channelAnalysis;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Telegram:', error);
      return null;
    }
  }

  private async generateStrategicAnalysis(platformData: any) {
    try {
      const prompt = `
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥–∏–Ω–≥-–∫–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:

        YouTube: ${JSON.stringify(platformData.youtube, null, 2)}
        TikTok: ${JSON.stringify(platformData.tiktok, null, 2)}
        Telegram: ${JSON.stringify(platformData.telegram, null, 2)}

        –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:
        1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∏—à–∏ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        2. –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        3. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
        4. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–æ—Å—Ç–∞
        5. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π

        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
      `;

      const response = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.3,
        max_tokens: 1500,
      });

      const analysis = JSON.parse(response.choices[0]?.message?.content || '{}');

      // –î–æ–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      return {
        niche: '–§–æ—Ä–µ–∫—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥',
        contentStrategy: {
          mainTopics: ['–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', '–û–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏'],
          targetAudience: '–ù–∞—á–∏–Ω–∞—é—â–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã 25-45 –ª–µ—Ç',
          contentTypes: ['–°–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', '–†–∞–∑–±–æ—Ä—ã —Å–¥–µ–ª–æ–∫', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç', '–†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'],
          postingFrequency: 'YouTube: 4-5 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é, TikTok: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, Telegram: 3-5 –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å',
        },
        growthMetrics: {
          currentReach: 2430, // –°—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
          targetReach: 15000, // –¶–µ–ª—å –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
          growthPotential: 617, // –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞
          estimatedTimeframe: '6-8 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 15K –æ–±—â–µ–≥–æ –æ—Ö–≤–∞—Ç–∞',
        },
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return {
        niche: '–¢—Ä–µ–π–¥–∏–Ω–≥ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã',
        contentStrategy: {
          mainTopics: ['–¢—Ä–µ–π–¥–∏–Ω–≥', '–°–∏–≥–Ω–∞–ª—ã'],
          targetAudience: '–¢—Ä–µ–π–¥–µ—Ä—ã',
          contentTypes: ['–°–∏–≥–Ω–∞–ª—ã', '–û–±—É—á–µ–Ω–∏–µ'],
          postingFrequency: '–†–µ–≥—É–ª—è—Ä–Ω–æ',
        },
        growthMetrics: {
          currentReach: 2430,
          targetReach: 15000,
          growthPotential: 500,
          estimatedTimeframe: '6 –º–µ—Å—è—Ü–µ–≤',
        },
      };
    }
  }

  private async analyzeCompetitors(niche: string) {
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –Ω–∏—à–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
    return {
      directCompetitors: [
        'Rayner Teo (18.3M –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)',
        'Coin Bureau (2.52M)',
        'TradingView Ideas',
        'ForexSignalsProvider',
        'CryptoBirb',
      ],
      competitorStrengths: [
        '–ë–æ–ª—å—à–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ –¥–æ–≤–µ—Ä–∏–µ',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
        '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π',
        '–ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å',
      ],
      marketGaps: [
        '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
        '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π',
        '–õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        'AI-assisted –∞–Ω–∞–ª–∏–∑',
      ],
    };
  }

  private extractYouTubeChannelId(url: string): string {
    const match = url.match(/\/@([^\/]+)/) || url.match(/channel\/([^\/]+)/);
    return match ? match[1] : '';
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
  async createClientProfile(userId: string, profile: ClientProfile) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      await storage.createActivityLog({
        userId,
        action: 'Client Profile Created',
        description: `–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞: ${profile.name}`,
        status: 'success',
        metadata: { profile },
      });

      // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      await this.initializeGrowthMetrics(userId, profile);

      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω –∏ –º–µ—Ç—Ä–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return profile;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      throw error;
    }
  }

  private async initializeGrowthMetrics(userId: string, profile: ClientProfile) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const platforms = await storage.getPlatforms();

    for (const platform of platforms) {
      const platformData = profile.platforms[platform.name as keyof typeof profile.platforms];
      if (platformData) {
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        const baseMetrics = {
          followers: (platformData as any).subscribers || (platformData as any).followers || (platformData as any).members || 0,
          engagement: (platformData as any).engagement?.engagementRate || 0,
          reach: (platformData as any).avgViews || (platformData as any).avgReach || 0,
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        // await storage.createPlatformAnalytics(userId, platform.id, baseMetrics);
      }
    }
  }
}

export const clientAnalysisService = new ClientAnalysisService();