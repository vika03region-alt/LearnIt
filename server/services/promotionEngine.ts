import { aiContentService } from './aiContent';
import { socialMediaManager } from './socialMediaIntegration';
import { storage } from '../storage';
import { safetyService } from './safety';
import { aiAnalyticsService } from './aiAnalytics';

interface PromotionStrategy {
  clientId: string;
  platforms: string[];
  contentCalendar: ContentCalendarEntry[];
  targetMetrics: {
    followerGrowth: number;
    engagementIncrease: number;
    reachExpansion: number;
  };
  budget: {
    aiCredits: number;
    paidPromotion?: number;
  };
}

interface ContentCalendarEntry {
  date: string;
  platform: string;
  contentType: string;
  topic: string;
  scheduledTime: string;
  targeting?: {
    hashtags: string[];
    audience: string;
  };
}

class PromotionEngine {
  async createPromotionStrategy(clientProfile: any): Promise<PromotionStrategy> {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è:', clientProfile.name);

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
    const competitorInsights = await this.analyzeCompetitorStrategies(clientProfile.niche);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ 30 –¥–Ω–µ–π
    const contentCalendar = await this.generateContentCalendar(clientProfile, 30);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    const targetMetrics = this.calculateTargetMetrics(clientProfile);

    return {
      clientId: clientProfile.name,
      platforms: Object.keys(clientProfile.platforms),
      contentCalendar,
      targetMetrics,
      budget: {
        aiCredits: 2000, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü
        paidPromotion: 500, // USD
      },
    };
  }

  private async analyzeCompetitorStrategies(niche: string) {
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ç–æ–ø-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ
    return {
      bestPostingTimes: {
        youtube: ['09:00', '14:00', '19:00'],
        tiktok: ['08:00', '12:00', '17:00', '21:00'],
        telegram: ['07:00', '12:00', '18:00', '22:00'],
      },
      topHashtags: {
        general: ['#—Ç—Ä–µ–π–¥–∏–Ω–≥', '#—Ñ–æ—Ä–µ–∫—Å', '#–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '#—Å–∏–≥–Ω–∞–ª—ã', '#–∞–Ω–∞–ª–∏–∑'],
        trending: ['#btc2025', '#tradingview', '#technicalanalysis', '#daytrading'],
        niche: ['#forexsignals', '#cryptosignals', '#fxtrading', '#bitcoinanalysis'],
      },
      contentTypes: {
        educational: 40,
        signals: 30,
        analysis: 20,
        entertainment: 10,
      },
    };
  }

  private async generateContentCalendar(clientProfile: any, days: number): Promise<ContentCalendarEntry[]> {
    const calendar: ContentCalendarEntry[] = [];
    const competitorData = await this.analyzeCompetitorStrategies(clientProfile.niche);

    const contentTypes = [
      '–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª',
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
      '–û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      '–†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
      '–†–∞–∑–±–æ—Ä —Å–¥–µ–ª–∫–∏',
    ];

    const platforms = ['youtube', 'tiktok', 'telegram'];

    for (let day = 0; day < days; day++) {
      const date = new Date();
      date.setDate(date.getDate() + day);
      const dateStr = date.toISOString().split('T')[0];

      // YouTube - 4-5 –≤–∏–¥–µ–æ –≤ –Ω–µ–¥–µ–ª—é
      if ([1, 3, 5, 0].includes(date.getDay())) {
        calendar.push({
          date: dateStr,
          platform: 'youtube',
          contentType: contentTypes[Math.floor(Math.random() * contentTypes.length)],
          topic: this.generateTopicForDate(date, 'youtube'),
          scheduledTime: competitorData.bestPostingTimes.youtube[Math.floor(Math.random() * 3)],
          targeting: {
            hashtags: ['#—Ñ–æ—Ä–µ–∫—Å', '#—Ç—Ä–µ–π–¥–∏–Ω–≥', '#–∞–Ω–∞–ª–∏–∑', '#–æ–±—É—á–µ–Ω–∏–µ'],
            audience: '–¢—Ä–µ–π–¥–µ—Ä—ã 25-45 –ª–µ—Ç',
          },
        });
      }

      // TikTok - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
      calendar.push({
        date: dateStr,
        platform: 'tiktok',
        contentType: '–ö–æ—Ä–æ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª/—Ç—Ä–µ–Ω–¥',
        topic: this.generateTopicForDate(date, 'tiktok'),
        scheduledTime: competitorData.bestPostingTimes.tiktok[Math.floor(Math.random() * 4)],
        targeting: {
          hashtags: ['#—Ñ–æ—Ä–µ–∫—Å', '#—Ç—Ä–µ–π–¥–∏–Ω–≥', '#—Å–∏–≥–Ω–∞–ª—ã', '#crypto', '#fx'],
          audience: '–ú–æ–ª–æ–¥—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã 18-35 –ª–µ—Ç',
        },
      });

      // Telegram - 3-5 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
      for (let post = 0; post < 3; post++) {
        calendar.push({
          date: dateStr,
          platform: 'telegram',
          contentType: post === 0 ? '–£—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑' : post === 1 ? '–î–Ω–µ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª' : '–í–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä',
          topic: this.generateTopicForDate(date, 'telegram', post),
          scheduledTime: competitorData.bestPostingTimes.telegram[post] || '12:00',
          targeting: {
            hashtags: [],
            audience: '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞',
          },
        });
      }
    }

    return calendar;
  }

  private generateTopicForDate(date: Date, platform: string, postIndex?: number): string {
    const topics = {
      youtube: [
        '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ EUR/USD –Ω–∞ –Ω–µ–¥–µ–ª—é',
        '–ö–∞–∫ —á–∏—Ç–∞—Ç—å —è–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–∫',
        '–¢–æ–ø-5 –æ—à–∏–±–æ–∫ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤',
        '–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
        '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: –∫–∞–∫ –Ω–µ —Å–ª–∏–≤–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç',
      ],
      tiktok: [
        '–°–∏–≥–Ω–∞–ª –¥–Ω—è: BTC –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–æ—Å—Ç—É',
        '–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
        '–ü–æ—á–µ–º—É 90% —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Ç–µ—Ä—è—é—Ç –¥–µ–Ω—å–≥–∏',
        '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å–µ–≥–æ–¥–Ω—è: —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç—å',
        '–°–µ–∫—Ä–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏',
      ],
      telegram: [
        '–£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–æ–≤ –∏ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',
        '–°–ò–ì–ù–ê–õ: EUR/USD –ø–æ–∫—É–ø–∫–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        '–í–µ—á–µ—Ä–Ω–∏–π —Ä–∞–∑–±–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–¥–µ–π',
      ],
    };

    const platformTopics = topics[platform as keyof typeof topics] || topics.telegram;
    if (postIndex !== undefined && platform === 'telegram') {
      return platformTopics[postIndex] || platformTopics[0];
    }

    return platformTopics[Math.floor(Math.random() * platformTopics.length)];
  }

  private calculateTargetMetrics(clientProfile: any) {
    const current = clientProfile.growthMetrics.currentReach;
    const target = clientProfile.growthMetrics.targetReach;

    return {
      followerGrowth: Math.round((target - current) * 0.15), // 15% –≤ –º–µ—Å—è—Ü
      engagementIncrease: 25, // +25% –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
      reachExpansion: Math.round((target - current) * 0.12), // +12% –æ—Ö–≤–∞—Ç
    };
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  async executePromotionStrategy(
    userId: string, 
    strategy: PromotionStrategy
  ): Promise<{ executed: number; scheduled: number; errors: string[] }> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è...');

    let executed = 0;
    let scheduled = 0;
    const errors: string[] = [];

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    const todayTasks = strategy.contentCalendar.filter(task => task.date === today);

    for (const task of todayTasks) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        const safetyCheck = await safetyService.performSafetyCheck(userId);
        if (safetyCheck.issues.length > 0) {
          errors.push(`–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${safetyCheck.issues.join(', ')}`);
          continue;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å AI
        const content = await this.generateContentForTask(task);
        if (!content) {
          errors.push(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è ${task.platform}`);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        const currentTime = new Date();
        const scheduledTime = new Date(`${task.date}T${task.scheduledTime}:00`);

        if (scheduledTime <= currentTime) {
          // –ü—É–±–ª–∏–∫—É–µ–º —Å–µ–π—á–∞—Å
          const result = await this.publishContent(userId, task.platform, content);
          if (result.success) {
            executed++;
            await this.logPromotionActivity(userId, task, 'executed', content);
          } else {
            errors.push(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ${task.platform}: ${result.error}`);
          }
        } else {
          // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
          await this.scheduleContent(userId, task, content);
          scheduled++;
          await this.logPromotionActivity(userId, task, 'scheduled', content);
        }

      } catch (error) {
        errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${task.platform}: ${error.message}`);
      }
    }

    console.log(`‚úÖ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${executed} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, ${scheduled} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ`);
    return { executed, scheduled, errors };
  }

  private async generateContentForTask(task: ContentCalendarEntry): Promise<string | null> {
    try {
      let contentType = 'market_analysis';

      if (task.contentType.includes('—Å–∏–≥–Ω–∞–ª') || task.contentType.includes('–°–ò–ì–ù–ê–õ')) {
        contentType = 'live_signal';
      } else if (task.contentType.includes('–æ–±—É—á–∞—é—â–∏–π') || task.contentType.includes('—É—Ä–æ–∫')) {
        contentType = 'forex_education';
      } else if (task.platform === 'tiktok') {
        contentType = 'viral_tiktok';
      }

      const result = await aiContentService.generateContent(
        `–°–æ–∑–¥–∞–π ${task.contentType.toLowerCase()} –Ω–∞ —Ç–µ–º—É: ${task.topic}. 
         –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${task.platform}. 
         –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${task.targeting?.audience || '—Ç—Ä–µ–π–¥–µ—Ä—ã'}.`,
        contentType,
        [task.platform]
      );

      return result.content;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      return null;
    }
  }

  private async publishContent(userId: string, platform: string, content: string) {
    try {
      // –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
      const result = await socialMediaManager.postToAllPlatforms(userId, {
        content,
        mediaUrls: [],
      });

      return { success: true, result };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  private async scheduleContent(userId: string, task: ContentCalendarEntry, content: string) {
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    // –ó–¥–µ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è schedulerService –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    console.log(`üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${task.platform} –Ω–∞ ${task.date} ${task.scheduledTime}`);
  }

  private async logPromotionActivity(
    userId: string, 
    task: ContentCalendarEntry, 
    status: string, 
    content: string
  ) {
    await storage.createActivityLog({
      userId,
      action: `Promotion ${status}`,
      description: `${task.platform}: ${task.contentType} - ${task.topic.substring(0, 50)}...`,
      status: status === 'executed' ? 'success' : 'warning',
      metadata: { task, content: content.substring(0, 100) },
    });
  }

  // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  async analyzePromotionResults(userId: string, days: number = 7) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
      const analytics = await analyticsService.getEngagementAnalytics(userId, days);
      const activities = await storage.getUserActivities(userId, days);

      const promotionActivities = activities.filter(a => 
        a.action.includes('Promotion') || a.action.includes('Post')
      );

      // –ê–Ω–∞–ª–∏–∑ —Å AI
      const aiAnalysis = await aiAnalyticsService.analyzeAudience(userId, 1); // Instagram –∫–∞–∫ –ø—Ä–∏–º–µ—Ä

      return {
        summary: {
          totalPosts: promotionActivities.length,
          avgEngagement: analytics.reduce((sum, a) => sum + a.totalEngagement, 0) / analytics.length,
          reachGrowth: this.calculateReachGrowth(analytics),
          topPerforming: this.findTopPerformingContent(analytics),
        },
        recommendations: [
          '–£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ TikTok',
          '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª–∞—Ö –≤ Telegram',
          '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–±—É—á–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ YouTube',
        ],
        nextSteps: [
          '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
          '–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é',
          '–£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤',
        ],
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      throw error;
    }
  }

  private calculateReachGrowth(analytics: any[]): number {
    if (analytics.length < 2) return 0;
    const latest = analytics[analytics.length - 1];
    const previous = analytics[analytics.length - 2];
    return ((latest.totalEngagement - previous.totalEngagement) / previous.totalEngagement) * 100;
  }

  private findTopPerformingContent(analytics: any[]) {
    return analytics
      .sort((a, b) => b.totalEngagement - a.totalEngagement)
      .slice(0, 3)
      .map(a => ({
        platform: a.platform,
        engagement: a.totalEngagement,
        type: '–í—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å',
      }));
  }
}

export const promotionEngine = new PromotionEngine();