
import TelegramBot from 'node-telegram-bot-api';

interface BusinessConfig {
  workingHours: { start: number; end: number };
  autoReply: {
    enabled: boolean;
    message: string;
    delay: number;
  };
  greeting: {
    enabled: boolean;
    message: string;
  };
  awayMessage: {
    enabled: boolean;
    message: string;
  };
}

class TelegramBusinessService {
  private config: BusinessConfig = {
    workingHours: { start: 9, end: 18 },
    autoReply: {
      enabled: true,
      message: '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.',
      delay: 3000,
    },
    greeting: {
      enabled: true,
      message: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞ Lucifer Tradera.\n\nüí° –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\nüìä /signals - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\nüìà /analysis - –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\nüéì /education - –æ–±—É—á–µ–Ω–∏–µ\nüíé /vip - VIP –¥–æ—Å—Ç—É–ø',
    },
    awayMessage: {
      enabled: true,
      message: 'üåô –ú—ã —Å–µ–π—á–∞—Å –æ—Ñ—Ñ–ª–∞–π–Ω. –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9:00-18:00 –ú–°–ö.\n\n–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç–∏–º —É—Ç—Ä–æ–º!',
    },
  };

  constructor(private bot: TelegramBot) {}

  // –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å AI –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
  async setupAutoResponder() {
    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const text = msg.text || '';
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
      const hour = new Date().getHours();
      const isWorkingHours = hour >= this.config.workingHours.start && hour <= this.config.workingHours.end;

      if (!isWorkingHours && this.config.awayMessage.enabled) {
        await this.bot.sendMessage(chatId, this.config.awayMessage.message);
        return;
      }

      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (text === '/start' && this.config.greeting.enabled) {
        await this.bot.sendMessage(chatId, this.config.greeting.message, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä –°–∏–≥–Ω–∞–ª—ã', callback_data: 'signals' },
                { text: 'üìà –ê–Ω–∞–ª–∏–∑', callback_data: 'analysis' },
              ],
              [
                { text: 'üéì –û–±—É—á–µ–Ω–∏–µ', callback_data: 'education' },
                { text: 'üíé VIP', callback_data: 'vip' },
              ],
            ],
          },
        });
        return;
      }

      // AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
      if (this.config.autoReply.enabled && !text.startsWith('/')) {
        setTimeout(async () => {
          const aiResponse = await this.generateAIResponse(text);
          await this.bot.sendMessage(chatId, aiResponse);
        }, this.config.autoReply.delay);
      }
    });
  }

  // FAQ –±–æ—Ç —Å AI
  async setupFAQBot() {
    const faq = [
      {
        keywords: ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ'],
        answer: 'üí∞ *–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:*\n\nüÜì –ë–∞–∑–æ–≤—ã–π - –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n‚≠ê PRO - 2,990‚ÇΩ/–º–µ—Å\nüíé VIP - 9,990‚ÇΩ/–º–µ—Å\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /pricing',
      },
      {
        keywords: ['—Å–∏–≥–Ω–∞–ª', '—Ç–æ—Ä–≥–æ–≤–ª—è', '—Ç—Ä–µ–π–¥–∏–Ω–≥'],
        answer: 'üìä *–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:*\n\n‚úÖ 10-15 —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å\n‚úÖ 85% —Ç–æ—á–Ω–æ—Å—Ç—å\n‚úÖ –í—Å–µ —Ä—ã–Ω–∫–∏: Crypto, Forex, Stocks\n\n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å: /signals',
      },
      {
        keywords: ['–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '—É—á–∏—Ç—å—Å—è'],
        answer: 'üéì *–û–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É:*\n\nüìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏\nüìπ –í–∏–¥–µ–æ-–∫—É—Ä—Å—ã\nüë®‚Äçüè´ –õ–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ (VIP)\n\n–ù–∞—á–∞—Ç—å: /education',
      },
    ];

    this.bot.on('message', async (msg) => {
      const text = (msg.text || '').toLowerCase();
      
      for (const item of faq) {
        if (item.keywords.some(keyword => text.includes(keyword))) {
          await this.bot.sendMessage(msg.chat.id, item.answer, { parse_mode: 'Markdown' });
          break;
        }
      }
    });
  }

  // –ë–∏–∑–Ω–µ—Å-—Å—Ç–∞—Ç—É—Å—ã
  async setBusinessStatus(status: 'online' | 'busy' | 'offline') {
    const statusMessages = {
      online: '‚úÖ –û–Ω–ª–∞–π–Ω - –æ—Ç–≤–µ—á–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ',
      busy: '‚è≥ –ó–∞–Ω—è—Ç—ã - –æ—Ç–≤–µ—Ç–∏–º —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç',
      offline: 'üåô –û—Ñ—Ñ–ª–∞–π–Ω - –æ—Ç–≤–µ—Ç–∏–º —É—Ç—Ä–æ–º',
    };

    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±—ã Telegram Business API
    console.log(`üì± –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: ${statusMessages[status]}`);
  }

  // AI –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
  private async generateAIResponse(userMessage: string): Promise<string> {
    try {
      const { geminiService } = await import('./geminiService');
      
      const context = `
–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞ Lucifer Tradera - —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É.
–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userMessage}"

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ:
- –°–∏–≥–Ω–∞–ª–∞—Ö - –ø—Ä–µ–¥–ª–æ–∂–∏ /signals
- –û–±—É—á–µ–Ω–∏–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏ /education
- VIP - –ø—Ä–µ–¥–ª–æ–∂–∏ /vip
- –¶–µ–Ω–∞—Ö - –ø—Ä–µ–¥–ª–æ–∂–∏ /pricing
`;

      const response = await geminiService.generateContent(context, '–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
      return response.content || '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
    } catch (error) {
      return '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
    }
  }

  // Telegram Login Widget –¥–ª—è —Å–∞–π—Ç–∞
  generateLoginWidget(domain: string): string {
    const botUsername = process.env.BOTTG?.split(':')[0] || 'your_bot';
    
    return `
<script async src="https://telegram.org/js/telegram-widget.js?22" 
  data-telegram-login="${botUsername}" 
  data-size="large" 
  data-auth-url="${domain}/auth/telegram" 
  data-request-access="write">
</script>`;
  }

  // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —á–∞—Ç –¥–ª—è —Å–∞–π—Ç–∞
  generateChatWidget(channelUsername: string): string {
    return `
<script async src="https://telegram.org/js/telegram-widget.js?22" 
  data-telegram-discussion="${channelUsername}" 
  data-comments-limit="5" 
  data-colorful="1">
</script>`;
  }
}

export const telegramBusinessService = new TelegramBusinessService(null as any);
