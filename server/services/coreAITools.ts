
import OpenAI from "openai";

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Grok 2 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ (–∫–∞–∫ –≤ telegramBot.ts)
const grok = new OpenAI({
  apiKey: process.env.XAI_API_KEY || '',
  baseURL: 'https://api.x.ai/v1'
});

/**
 * –Ø–î–†–û AI-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏)
 * 
 * 5 —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –í–°–ï —Ç–æ–ø-–∫–∞–Ω–∞–ª—ã:
 * 1. –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (Rayner Teo, Coin Bureau) - –æ—Å–Ω–æ–≤–∞ —Ä–æ—Å—Ç–∞
 * 2. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ (–≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç) - +30% –æ—Ö–≤–∞—Ç–∞
 * 3. –•–µ—à—Ç–µ–≥–∏ (Coin Bureau: 0‚Üí2.5M) - –¥–µ—à—ë–≤—ã–π —Ä–æ—Å—Ç
 * 4. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (The Trading Channel) - –∫–æ–ø–∏—Ä—É–π –ª—É—á—à–µ–µ
 * 5. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (Rayner: score>70) - —ç–∫–æ–Ω–æ–º—å –≤—Ä–µ–º—è
 * 
 * –°–¢–û–ò–ú–û–°–¢–¨: ~$0.01/–º–µ—Å—è—Ü (Grok 2)
 * ROI: –ò–∑–º–µ—Ä–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 */

class CoreAITools {
  // 1. –í–ò–†–£–°–ù–´–ô –ö–û–ù–¢–ï–ù–¢ (–≥–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç)
  async generateViralContent(params: {
    topic: string;
    platform: 'tiktok' | 'youtube' | 'instagram' | 'telegram';
    niche: string;
  }): Promise<{ content: string; viralScore: number; cost: number }> {
    const prompt = `–°–æ–∑–¥–∞–π –í–ò–†–£–°–ù–´–ô –ø–æ—Å—Ç –¥–ª—è ${params.platform} –ø—Ä–æ "${params.topic}" –≤ –Ω–∏—à–µ ${params.niche}:

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
- –°–∏–ª—å–Ω—ã–π —Ö—É–∫ (–ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã —Ä–µ—à–∞—é—Ç –≤—Å—ë)
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä (FOMO, –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ, —à–æ–∫)
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
- 350-600 —Å–∏–º–≤–æ–ª–æ–≤

–°–¢–ò–õ–¨: –∫–∞–∫ —É —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤ (Rayner Teo, Coin Bureau)
–¶–ï–õ–¨: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ`;

    const response = await grok.chat.completions.create({
      model: 'grok-2-latest',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.85,
      max_tokens: 600
    });

    const content = response.choices[0].message.content || '';
    const tokensUsed = response.usage?.total_tokens || 0;
    const cost = (tokensUsed * 0.0000001); // Grok 2 –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã–π

    return {
      content,
      viralScore: this.calculateViralScore(content, params.platform),
      cost
    };
  }

  // 2. –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í (—á—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ —Å–µ–π—á–∞—Å)
  async analyzeTrends(params: {
    platform: string;
    niche: string;
  }): Promise<{ trends: string[]; opportunities: string[] }> {
    const prompt = `–¢–æ–ø-5 —Ç—Ä–µ–Ω–¥–æ–≤ ${params.platform} –≤ –Ω–∏—à–µ ${params.niche} (–æ–∫—Ç—è–±—Ä—å 2025):

1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã (—á—Ç–æ –æ–±—Å—É–∂–¥–∞—é—Ç)
2. –§–æ—Ä–º–∞—Ç—ã (—á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–≥–¥–µ –ø—Ä–æ–±–µ–ª)

–¢–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ, –±–µ–∑ –≤–æ–¥—ã. –î–æ 400 —Å–∏–º–≤–æ–ª–æ–≤.`;

    const response = await grok.chat.completions.create({
      model: 'grok-2-latest',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 500
    });

    const result = response.choices[0].message.content || '';
    const lines = result.split('\n').filter(l => l.trim());

    return {
      trends: lines.slice(0, 5),
      opportunities: lines.slice(5, 8)
    };
  }

  // 3. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –•–ï–®–¢–ï–ì–û–í (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞)
  async optimizeHashtags(params: {
    content: string;
    platform: string;
  }): Promise<{ hashtags: string[]; expectedReach: number }> {
    // –ë–∞–∑–æ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
    const baseHashtags: Record<string, string[]> = {
      tiktok: ['#fyp', '#viral', '#trading', '#crypto', '#forex'],
      instagram: ['#trading', '#crypto', '#forex', '#bitcoin', '#investment'],
      youtube: ['#shorts', '#trading', '#crypto'],
      telegram: ['#—Ç—Ä–µ–π–¥–∏–Ω–≥', '#–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '#—Å–∏–≥–Ω–∞–ª—ã']
    };

    const base = baseHashtags[params.platform] || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º 3-5 —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const prompt = `–ò–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑–≤–ª–µ–∫–∏ 3-5 —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤: "${params.content.substring(0, 200)}"`;
    
    const response = await grok.chat.completions.create({
      model: 'grok-2-latest',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.5,
      max_tokens: 100
    });

    const specificHashtags = (response.choices[0].message.content || '')
      .split(/\s+/)
      .filter(h => h.startsWith('#'))
      .slice(0, 5);

    const allHashtags = [...new Set([...base, ...specificHashtags])].slice(0, 10);

    return {
      hashtags: allHashtags,
      expectedReach: allHashtags.length * 1000 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    };
  }

  // 4. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–ù–ö–£–†–ï–ù–¢–û–í (—á—Ç–æ —É –Ω–∏—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç)
  async analyzeCompetitor(params: {
    handle: string;
    niche: string;
  }): Promise<{ strengths: string[]; weaknesses: string[]; opportunities: string[] }> {
    const prompt = `–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ "${params.handle}" –≤ –Ω–∏—à–µ ${params.niche}:

1. –ß—Ç–æ –¥–µ–ª–∞—é—Ç –•–û–†–û–®–û (3 –ø—É–Ω–∫—Ç–∞)
2. –ß—Ç–æ –¥–µ–ª–∞—é—Ç –ü–õ–û–•–û (3 –ø—É–Ω–∫—Ç–∞)
3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—Å (3 –ø—É–Ω–∫—Ç–∞)

–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –î–æ 400 —Å–∏–º–≤–æ–ª–æ–≤.`;

    const response = await grok.chat.completions.create({
      model: 'grok-2-latest',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 500
    });

    const result = response.choices[0].message.content || '';
    const sections = result.split(/\d\./);

    return {
      strengths: sections[1]?.split('\n').filter(l => l.trim()).slice(0, 3) || [],
      weaknesses: sections[2]?.split('\n').filter(l => l.trim()).slice(0, 3) || [],
      opportunities: sections[3]?.split('\n').filter(l => l.trim()).slice(0, 3) || []
    };
  }

  // 5. –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –£–°–ü–ï–•–ê (—Å—Ç–æ–∏—Ç –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å)
  async predictSuccess(params: {
    content: string;
    platform: string;
    timing: Date;
  }): Promise<{ score: number; suggestions: string[] }> {
    const hour = params.timing.getHours();
    const optimalHours: Record<string, number[]> = {
      tiktok: [9, 12, 15, 19, 21],
      instagram: [11, 14, 17, 19],
      youtube: [14, 16, 20],
      telegram: [8, 12, 18, 21]
    };

    let score = 50; // –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

    // +30 –∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    if (optimalHours[params.platform]?.includes(hour)) {
      score += 30;
    }

    // +20 –∑–∞ –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const length = params.content.length;
    if (length >= 200 && length <= 600) {
      score += 20;
    }

    // –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI
    const prompt = `–û—Ü–µ–Ω–∏ –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (0-100): "${params.content.substring(0, 300)}"

–ö—Ä–∏—Ç–µ—Ä–∏–∏:
- –•—É–∫
- –≠–º–æ—Ü–∏–∏
- –¶–µ–Ω–Ω–æ—Å—Ç—å
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

–û–¥–Ω–æ —á–∏—Å–ª–æ.`;

    const response = await grok.chat.completions.create({
      model: 'grok-2-latest',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.3,
      max_tokens: 50
    });

    const aiScore = parseInt(response.choices[0].message.content || '50');
    score = (score + aiScore) / 2;

    const suggestions: string[] = [];
    if (score < 70) {
      if (length < 200) suggestions.push('–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)');
      if (length > 600) suggestions.push('–°–æ–∫—Ä–∞—Ç–∏ –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
      if (!optimalHours[params.platform]?.includes(hour)) {
        suggestions.push(`–û–ø—É–±–ª–∏–∫—É–π –≤ ${optimalHours[params.platform]?.[0] || 12}:00 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞`);
      }
      if (!params.content.includes('#')) suggestions.push('–î–æ–±–∞–≤—å —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ö–≤–∞—Ç–∞');
    }

    return { score: Math.round(score), suggestions };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
  private calculateViralScore(content: string, platform: string): number {
    let score = 0;
    
    // –•—É–∫ –≤ –ø–µ—Ä–≤—ã—Ö 50 —Å–∏–º–≤–æ–ª–∞—Ö
    const hook = content.substring(0, 50);
    if (/[üö®üí•‚ö°‚ùå‚úÖüî•üí∞]/u.test(hook)) score += 20;
    if (/(!|\?|\.\.\.)/g.test(hook)) score += 15;
    
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    const emotional = ['–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '—à–æ–∫–∏—Ä—É—é—â–µ', '—Å—Ä–æ—á–Ω–æ', '—Å–µ–∫—Ä–µ—Ç', '—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ'];
    if (emotional.some(word => content.toLowerCase().includes(word))) score += 25;
    
    // –ß–∏—Å–ª–∞ –∏ –¥–∞–Ω–Ω—ã–µ
    if (/\d+%|\$\d+|\d+x/g.test(content)) score += 20;
    
    // –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    if (/–ø–æ–¥–ø–∏—à–∏—Å—å|–ª–∞–π–∫|–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π|–ø–æ–¥–µ–ª–∏—Å—å/i.test(content)) score += 20;
    
    return Math.min(score, 100);
  }
}

export const coreAITools = new CoreAITools();
