import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI || "");

export async function analyzeNicheWithGemini(username?: string): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });

    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. –ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∏—à–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username || "–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"}.

–°–¥–µ–ª–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ô –∏ –î–ï–¢–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑:

üéØ **–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ò–®–ò**
–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∏—à—É –Ω–∞ –æ—Å–Ω–æ–≤–µ username/–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –ø—Ä–µ–¥–ª–æ–∂–∏ 3 –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.

üìä **–ê–ù–ê–õ–ò–ó –ö–û–ù–ö–£–†–ï–ù–¢–û–í**
- –¢–æ–ø-3 –∏–≥—Ä–æ–∫–∞ –≤ —ç—Ç–æ–π –Ω–∏—à–µ
- –ò—Ö —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

üíé **–¢–û–ß–ö–ò –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò**
- –ö–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
- –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

üë• **–¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø**
**–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è**: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –¥–æ—Ö–æ–¥
**–ë–æ–ª–∏**: 3-5 –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
**–ñ–µ–ª–∞–Ω–∏—è**: —á–µ–≥–æ —Ö–æ—Ç—è—Ç –¥–æ—Å—Ç–∏—á—å

üì± **–ö–û–ù–¢–ï–ù–¢-–°–¢–†–ê–¢–ï–ì–ò–Ø**
**–§–æ—Ä–º–∞—Ç—ã**: –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
**–¢–µ–º—ã**: 5-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤
**–ß–∞—Å—Ç–æ—Ç–∞**: –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π

üöÄ **–¢–û–ü-3 –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ë–´–°–¢–†–û–ì–û –†–û–°–¢–ê**
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ Markdown –¥–ª—è Telegram (–∏—Å–ø–æ–ª—å–∑—É–π *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, \`–∫–æ–¥\`).`;

    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();

    return text || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑";
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—à–∏:", error);
    throw new Error(`Gemini API –æ—à–∏–±–∫–∞: ${error.message}`);
  }
}

export async function generateContentWithGemini(
  topic: string,
  brandStyle?: {
    tone: string;
    keywords: string[];
    targetAudience: string;
  }
): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });

    const styleContext = brandStyle
      ? `
–°—Ç–∏–ª—å –±—Ä–µ–Ω–¥–∞:
- –¢–æ–Ω: ${brandStyle.tone}
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${brandStyle.keywords.join(", ")}
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${brandStyle.targetAudience}
`
      : "";

    const prompt = `–°–æ–∑–¥–∞–π –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram –Ω–∞ —Ç–µ–º—É: "${topic}"

${styleContext}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: 150-300 —Å–∏–º–≤–æ–ª–æ–≤
- –ù–∞—á–Ω–∏ —Å —Ö—É–∫–∞ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ü–µ–ø–ª—è—Ç—å)
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();

    return text || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç";
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
    throw new Error(`Gemini API –æ—à–∏–±–∫–∞: ${error.message}`);
  }
}

export async function analyzeTrendVideoWithGemini(
  trendDescription: string,
  videoUrl?: string
): Promise<{
  whyItWorks: string;
  keyElements: string[];
  adaptationStrategy: string;
}> {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:

–û–ø–∏—Å–∞–Ω–∏–µ: ${trendDescription}
${videoUrl ? `URL: ${videoUrl}` : ""}

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "whyItWorks": "–ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ç—Ä–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "keyElements": ["—ç–ª–µ–º–µ–Ω—Ç1", "—ç–ª–µ–º–µ–Ω—Ç2", "—ç–ª–µ–º–µ–Ω—Ç3"],
  "adaptationStrategy": "–∫–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–≤–æ–π –±—Ä–µ–Ω–¥ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
}`;

    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();

    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }

    return {
      whyItWorks: "–¢—Ä–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∏—Ä—É—Å–Ω–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏.",
      keyElements: ["–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫", "–ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"],
      adaptationStrategy: "–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥ –≤–∞—à –±—Ä–µ–Ω–¥, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—É—é –∏–¥–µ—é —Ç—Ä–µ–Ω–¥–∞.",
    };
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞:", error);
    throw new Error(`Gemini API –æ—à–∏–±–∫–∞: ${error.message}`);
  }
}

export async function generateImagePromptWithGemini(
  trendDescription: string,
  brandStyle?: string
): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });

    const prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞:

–¢—Ä–µ–Ω–¥: ${trendDescription}
${brandStyle ? `–°—Ç–∏–ª—å –±—Ä–µ–Ω–¥–∞: ${brandStyle}` : ""}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–º–ø—Ç—É:
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã, –æ—Å–≤–µ—â–µ–Ω–∏—è, —Ä–∞–∫—É—Ä—Å–∞
- –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å (cinematic, professional, vibrant –∏ —Ç.–¥.)
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
- –î–ª–∏–Ω–∞: 50-150 —Å–ª–æ–≤
- –ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Fal.ai

–¢–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();

    return text || "Professional high-quality image, vibrant colors, engaging composition";
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:", error);
    throw new Error(`Gemini API –æ—à–∏–±–∫–∞: ${error.message}`);
  }
}

export async function generateTradingContentWithGemini(params: {
  type: 'signal' | 'analysis' | 'education';
  market?: string;
  trend?: string;
  audience?: string;
}): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });

    const prompts = {
      signal: `–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è ${params.market || '–∫—Ä–∏–ø—Ç–æ —Ä—ã–Ω–∫–∞'}. 
–í–∫–ª—é—á–∏: —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, —Ü–µ–ª–∏, —Å—Ç–æ–ø-–ª–æ—Å—Å, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ. 
–§–æ—Ä–º–∞—Ç –¥–ª—è ${params.audience || '–æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤'}. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
      
      analysis: `–°–æ–∑–¥–∞–π –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ ${params.market || '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'}.
–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: ${params.trend || '–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ'}.
–í–∫–ª—é—á–∏: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª, –ø—Ä–æ–≥–Ω–æ–∑. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
      
      education: `–°–æ–∑–¥–∞–π –æ–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –¥–ª—è ${params.audience || '–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'}.
–¢–µ–º–∞: ${params.market || '–æ—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞'}.
–°—Ç–∏–ª—å: –ø–æ–Ω—è—Ç–Ω—ã–π, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
    };

    const result = await model.generateContent(prompts[params.type]);
    const response = result.response;
    return response.text();
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
    throw new Error(`Gemini API –æ—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const geminiService = {
  generateContent: async (prompt: string, systemInstruction?: string) => {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    const result = await model.generateContent(prompt);
    return {
      content: result.response.text(),
      tokensUsed: 0,
      cost: 0
    };
  },
  analyzeImage: async (imageData: string, prompt: string) => {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    const result = await model.generateContent([prompt, { inlineData: { data: imageData, mimeType: "image/jpeg" } }]);
    return { analysis: result.response.text() };
  },
  generateViralContent: async (platform: string, niche: string, trend?: string) => {
    return await generateContentWithGemini(`–°–æ–∑–¥–∞–π –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è ${platform} –≤ –Ω–∏—à–µ ${niche}${trend ? ` –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞: ${trend}` : ''}`);
  },
  analyzeCompetitor: async (competitorUrl: string, platform: string) => {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –Ω–∞ ${platform}: ${competitorUrl}. –î–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞.`;
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    const result = await model.generateContent(prompt);
    return { analysis: result.response.text() };
  }
};
