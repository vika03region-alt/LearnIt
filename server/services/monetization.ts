
import { storage } from '../storage';

interface SubscriptionPlan {
  id: string;
  name: string;
  price: number;
  features: string[];
  limits: {
    postsPerMonth: number;
    platformsCount: number;
    aiCredits: number;
  };
}

class MonetizationService {
  private plans: SubscriptionPlan[] = [
    {
      id: 'free',
      name: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
      price: 0,
      features: ['5 –ø–æ—Å—Ç–æ–≤ –≤ –º–µ—Å—è—Ü', '1 –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–ë–∞–∑–æ–≤—ã–π AI'],
      limits: { postsPerMonth: 5, platformsCount: 1, aiCredits: 100 }
    },
    {
      id: 'pro',
      name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
      price: 29,
      features: ['–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã', '5 –ø–ª–∞—Ç—Ñ–æ—Ä–º', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
      limits: { postsPerMonth: -1, platformsCount: 5, aiCredits: 10000 }
    },
    {
      id: 'enterprise',
      name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π',
      price: 99,
      features: ['–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ', '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
      limits: { postsPerMonth: -1, platformsCount: -1, aiCredits: -1 }
    }
  ];

  async createSubscription(userId: string, planId: string): Promise<any> {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Stripe/PayPal
    const subscription = {
      success: true,
      subscriptionId: `sub_${Date.now()}`,
      userId,
      planId,
      status: 'active',
      startDate: new Date(),
      nextBillingDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
    await storage.createActivityLog({
      userId,
      action: 'Subscription Activated',
      description: `Activated ${planId} plan - $50 payment received`,
      status: 'success',
      metadata: { planId, amount: 50 }
    });

    return subscription;
  }

  async activateProPlan(userId: string): Promise<any> {
    const proPlan = this.plans.find(p => p.id === 'pro');
    
    await storage.createActivityLog({
      userId,
      action: 'Pro Plan Activated',
      description: 'Pro subscription activated with $50 payment',
      status: 'success',
      metadata: { 
        plan: 'pro',
        features: proPlan?.features,
        payment: 50
      }
    });

    return {
      success: true,
      plan: proPlan,
      message: 'üéâ Pro –ø–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!',
      features: {
        aiCredits: 10000,
        platforms: 5,
        postsPerMonth: -1,
        advancedAI: true,
        analytics: true,
        viralGrowth: true,
        autoPromotion: true
      }
    };
  }

  async checkUsageLimits(userId: string, action: string): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
      const userPlan = this.plans.find(p => p.id === 'free'); // –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
      
      if (!userPlan) return false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
      if (action === 'create_post') {
        const thisMonth = new Date().getMonth();
        const activities = await storage.getUserActivityLogs(userId, 30);
        const postsThisMonth = activities.filter(a => 
          a.action === 'Post Created' && 
          new Date(a.createdAt).getMonth() === thisMonth
        ).length;

        return userPlan.limits.postsPerMonth === -1 || postsThisMonth < userPlan.limits.postsPerMonth;
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
      return false;
    }
  }
}

export const monetizationService = new MonetizationService();
