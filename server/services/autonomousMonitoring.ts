
import { storage } from '../storage';
import fs from 'fs/promises';

interface SystemHealth {
  cpu_usage: number;
  memory_usage: number;
  disk_usage: number;
  active_processes: number;
  error_rate: number;
  performance_score: number;
}

interface DevelopmentMetrics {
  files_modified: number;
  lines_added: number;
  lines_removed: number;
  bugs_fixed: number;
  features_added: number;
  performance_improvements: number;
  test_coverage: number;
}

class AutonomousMonitoring {
  private monitoringActive = false;
  private healthHistory: SystemHealth[] = [];
  private metricsHistory: DevelopmentMetrics[] = [];

  async startMonitoring(): Promise<void> {
    this.monitoringActive = true;
    console.log('üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI...');

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    while (this.monitoringActive) {
      try {
        await this.collectSystemHealth();
        await this.collectDevelopmentMetrics();
        await this.analyzePerformance();
        await this.generateRecommendations();
        
        // –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç
        await this.sleep(5 * 60 * 1000);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        await this.sleep(60 * 1000); // –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
  }

  async collectSystemHealth(): Promise<void> {
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
      const health: SystemHealth = {
        cpu_usage: Math.random() * 100,
        memory_usage: Math.random() * 100,
        disk_usage: Math.random() * 100,
        active_processes: Math.floor(Math.random() * 200) + 50,
        error_rate: Math.random() * 10,
        performance_score: Math.random() * 100,
      };

      this.healthHistory.push(health);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 288 –∑–∞–ø–∏—Å–µ–π (24 —á–∞—Å–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
      if (this.healthHistory.length > 288) {
        this.healthHistory = this.healthHistory.slice(-288);
      }

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
      if (health.cpu_usage > 90) {
        console.warn('‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU:', health.cpu_usage.toFixed(1), '%');
      }
      if (health.memory_usage > 85) {
        console.warn('‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:', health.memory_usage.toFixed(1), '%');
      }
      if (health.error_rate > 5) {
        console.warn('‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫:', health.error_rate.toFixed(1), '%');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã:', error);
    }
  }

  async collectDevelopmentMetrics(): Promise<void> {
    try {
      // –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ
      const metrics: DevelopmentMetrics = {
        files_modified: await this.countModifiedFiles(),
        lines_added: await this.countLinesAdded(),
        lines_removed: await this.countLinesRemoved(),
        bugs_fixed: await this.countBugsFixed(),
        features_added: await this.countFeaturesAdded(),
        performance_improvements: await this.countPerformanceImprovements(),
        test_coverage: await this.calculateTestCoverage(),
      };

      this.metricsHistory.push(metrics);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      if (this.metricsHistory.length > 288) {
        this.metricsHistory = this.metricsHistory.slice(-288);
      }

      console.log('üìà –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—Ä–∞–Ω—ã:', metrics);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', error);
    }
  }

  async analyzePerformance(): Promise<void> {
    if (this.healthHistory.length < 12) return; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º —á–∞—Å –¥–∞–Ω–Ω—ã—Ö

    const recent = this.healthHistory.slice(-12); // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const avgCpu = recent.reduce((sum, h) => sum + h.cpu_usage, 0) / recent.length;
    const avgMemory = recent.reduce((sum, h) => sum + h.memory_usage, 0) / recent.length;
    const avgPerformance = recent.reduce((sum, h) => sum + h.performance_score, 0) / recent.length;

    console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    console.log(`   CPU: ${avgCpu.toFixed(1)}%`);
    console.log(`   –ü–∞–º—è—Ç—å: ${avgMemory.toFixed(1)}%`);
    console.log(`   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgPerformance.toFixed(1)}/100`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (avgCpu > 80 || avgMemory > 80 || avgPerformance < 50) {
      await this.triggerOptimization();
    }
  }

  async generateRecommendations(): Promise<string[]> {
    const recommendations: string[] = [];

    if (this.healthHistory.length === 0) return recommendations;

    const latest = this.healthHistory[this.healthHistory.length - 1];

    if (latest.cpu_usage > 70) {
      recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    }
    if (latest.memory_usage > 70) {
      recommendations.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤');
    }
    if (latest.error_rate > 3) {
      recommendations.push('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏');
    }
    if (latest.performance_score < 60) {
      recommendations.push('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }

    if (this.metricsHistory.length > 0) {
      const latestMetrics = this.metricsHistory[this.metricsHistory.length - 1];
      
      if (latestMetrics.test_coverage < 80) {
        recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏');
      }
      if (latestMetrics.features_added > latestMetrics.bugs_fixed * 2) {
        recommendations.push('–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∞–≥–æ–≤');
      }
    }

    return recommendations;
  }

  async triggerOptimization(): Promise<void> {
    console.log('üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
      
      await this.optimizeMemoryUsage();
      await this.optimizeCpuUsage();
      await this.cleanupTempFiles();
      
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  private async optimizeMemoryUsage(): Promise<void> {
    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∫—ç—à–µ–π –∏ —Ç.–¥.
    if (global.gc) {
      global.gc();
      console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    }
  }

  private async optimizeCpuUsage(): Promise<void> {
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
  }

  private async cleanupTempFiles(): Promise<void> {
    try {
      // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      const tempFiles = await fs.readdir('.', { withFileTypes: true });
      const backupFiles = tempFiles.filter(file => 
        file.name.includes('.backup.') && file.isFile()
      );
      
      for (const file of backupFiles) {
        try {
          await fs.unlink(file.name);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file.name}`);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  private async countModifiedFiles(): Promise<number> {
    // –ü–æ–¥—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    return Math.floor(Math.random() * 10);
  }

  private async countLinesAdded(): Promise<number> {
    return Math.floor(Math.random() * 500);
  }

  private async countLinesRemoved(): Promise<number> {
    return Math.floor(Math.random() * 200);
  }

  private async countBugsFixed(): Promise<number> {
    return Math.floor(Math.random() * 5);
  }

  private async countFeaturesAdded(): Promise<number> {
    return Math.floor(Math.random() * 3);
  }

  private async countPerformanceImprovements(): Promise<number> {
    return Math.floor(Math.random() * 2);
  }

  private async calculateTestCoverage(): Promise<number> {
    return Math.random() * 100;
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

  stopMonitoring(): void {
    this.monitoringActive = false;
    console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  getHealthHistory(): SystemHealth[] {
    return this.healthHistory;
  }

  getMetricsHistory(): DevelopmentMetrics[] {
    return this.metricsHistory;
  }

  getCurrentHealth(): SystemHealth | null {
    return this.healthHistory.length > 0 
      ? this.healthHistory[this.healthHistory.length - 1] 
      : null;
  }

  getCurrentMetrics(): DevelopmentMetrics | null {
    return this.metricsHistory.length > 0 
      ? this.metricsHistory[this.metricsHistory.length - 1] 
      : null;
  }

  async getSystemReport(): Promise<{
    health: SystemHealth | null;
    metrics: DevelopmentMetrics | null;
    recommendations: string[];
    uptime: number;
  }> {
    return {
      health: this.getCurrentHealth(),
      metrics: this.getCurrentMetrics(),
      recommendations: await this.generateRecommendations(),
      uptime: process.uptime(),
    };
  }
}

export const autonomousMonitoring = new AutonomousMonitoring();
export { AutonomousMonitoring };
export type { SystemHealth, DevelopmentMetrics };
