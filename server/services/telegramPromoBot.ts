
import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';
import OpenAI from 'openai';
import { storage } from '../storage';

const TELEGRAM_TOKEN = process.env.BOTTG || '';

const grok = new OpenAI({
  apiKey: process.env.XAI_API_KEY || '',
  baseURL: 'https://api.x.ai/v1'
});

let promoBot: TelegramBot | null = null;
let isActive = false;

// –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const contentCache = new Map<string, { content: string; timestamp: number }>();
const userStats = new Map<number, {
  interactions: number;
  lastActive: Date;
  preferences: string[];
}>();

const CACHE_TTL = 3600000; // 1 —á–∞—Å

class TelegramPromoBot {
  private bot: TelegramBot | null = null;
  private userId: string;
  private channelId: string;

  constructor(userId: string, channelId: string) {
    this.userId = userId;
    this.channelId = channelId;
  }

  async initialize() {
    if (!TELEGRAM_TOKEN) {
      throw new Error('Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
      // –û—á–∏—â–∞–µ–º webhook
      const tempBot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });
      await tempBot.deleteWebHook();
      await new Promise(resolve => setTimeout(resolve, 3000));

      this.bot = new TelegramBot(TELEGRAM_TOKEN, {
        polling: {
          interval: 1000,
          autoStart: true,
          params: { timeout: 30 }
        }
      });

      this.setupHandlers();
      this.setupScheduler();
      isActive = true;
      promoBot = this.bot;

      await storage.createActivityLog({
        userId: this.userId,
        action: 'Promo Bot Started',
        description: 'Telegram –ø—Ä–æ–º–æ-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
        status: 'success',
        metadata: { channelId: this.channelId },
      });

      console.log('‚úÖ Telegram –ø—Ä–æ–º–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–º–æ-–±–æ—Ç–∞:', error);
      throw error;
    }
  }

  private setupHandlers() {
    if (!this.bot) return;

    // === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
    
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const welcome = `üöÄ <b>–≠–§–§–ï–ö–¢–ò–í–ù–´–ô –ü–†–û–ú–û-–ë–û–¢</b>

üíé –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∑—Ä—ã–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –≤ Telegram!

<b>üéØ –ß–¢–û –Ø –£–ú–ï–Æ:</b>

üìù <b>–ö–û–ù–¢–ï–ù–¢</b>
‚Ä¢ /viral - –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç (AI)
‚Ä¢ /schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
‚Ä¢ /analytics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞

üöÄ <b>–ü–†–û–î–í–ò–ñ–ï–ù–ò–ï</b>
‚Ä¢ /growth - –ü–ª–∞–Ω —Ä–æ—Å—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π
‚Ä¢ /competitors - –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
‚Ä¢ /trends - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã

üí° <b>AI –ü–û–ú–û–©–ù–ò–ö</b>
‚Ä¢ /suggest - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ /optimize - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ /autopilot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞—á–Ω–∏—Ç–µ —Å /viral
üì¢ –ö–∞–Ω–∞–ª: ${this.channelId}`;

      await this.bot!.sendMessage(chatId, welcome, { parse_mode: 'HTML' });
      this.updateUserStats(chatId, 'start');
    });

    // === –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê ===
    this.bot.onText(/\/viral(?:\s+(.+))?/, async (msg, match) => {
      const chatId = msg.chat.id;
      const topic = match && match[1] ? match[1] : '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ Telegram';

      await this.bot!.sendMessage(chatId, 'üî• –°–æ–∑–¥–∞—é –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...');

      try {
        const cached = this.getCachedContent(topic);
        if (cached) {
          await this.bot!.sendMessage(chatId, 
            `üî• <b>–í–ò–†–£–°–ù–´–ô –ü–û–°–¢</b>\n\n${cached}\n\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n/publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å`,
            { parse_mode: 'HTML' }
          );
          return;
        }

        const prompt = `–°–æ–∑–¥–∞–π –í–ò–†–£–°–ù–´–ô –ø–æ—Å—Ç –¥–ª—è Telegram –ø—Ä–æ "${topic}":

1. –ù–∞—á–Ω–∏ —Å –º–æ—â–Ω–æ–≥–æ —Ö—É–∫–∞ (—ç–º–æ–¥–∑–∏ + —à–æ–∫–∏—Ä—É—é—â–∏–π —Ñ–∞–∫—Ç)
2. –°–æ–∑–¥–∞–π –∏–Ω—Ç—Ä–∏–≥—É –∏ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ
3. –î–∞–π —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
4. –î–æ–±–∞–≤—å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
5. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
6. 350-500 —Å–∏–º–≤–æ–ª–æ–≤
7. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: FOMO, –¥–µ—Ñ–∏—Ü–∏—Ç, –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç

–§–æ—Ä–º–∞—Ç: –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å —ç–º–æ–¥–∑–∏`;

        const response = await grok.chat.completions.create({
          model: 'grok-2-latest',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.9,
          max_tokens: 600
        });

        const content = response.choices[0].message.content || '';
        this.setCachedContent(topic, content);

        await this.bot!.sendMessage(chatId,
          `üî• <b>–í–ò–†–£–°–ù–´–ô –ü–û–°–¢</b>\n\n${content}\n\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n/publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å`,
          { parse_mode: 'HTML' }
        );

        this.updateUserStats(chatId, 'viral');
      } catch (error) {
        await this.bot!.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /viral –µ—â–µ —Ä–∞–∑');
      }
    });

    // === –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    this.bot.onText(/\/analytics/, async (msg) => {
      const chatId = msg.chat.id;
      
      try {
        const stats = await storage.getUserAnalytics(this.userId);
        
        const analytics = `üìä <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê</b>

üì¢ –ö–∞–Ω–∞–ª: ${this.channelId}

üìà <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –ü–æ—Å—Ç–æ–≤: ${stats.totalPosts || 0}
‚Ä¢ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats.aiGenerations || 0}
‚Ä¢ –û—Ö–≤–∞—Ç: ${stats.reach || 'N/A'}

üí° <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${stats.engagement || 0}%
‚Ä¢ –†–æ—Å—Ç: ${stats.growth || 0}%

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /viral 2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
‚úÖ –ü—É–±–ª–∏–∫—É–π—Ç–µ –≤ 9:00, 15:00, 20:00
‚úÖ –°–ª–µ–¥–∏—Ç–µ –∑–∞ /trends

/growth - –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ä–æ—Å—Ç–∞`;

        await this.bot!.sendMessage(chatId, analytics, { parse_mode: 'HTML' });
      } catch (error) {
        await this.bot!.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
      }
    });

    // === –ü–õ–ê–ù –†–û–°–¢–ê ===
    this.bot.onText(/\/growth/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot!.sendMessage(chatId, 'üìà –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–æ—Å—Ç–∞...');

      try {
        const prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–æ—Å—Ç–∞ Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ 30 –¥–Ω–µ–π:

–ù–ï–î–ï–õ–Ø 1 (–¥–Ω–∏ 1-7): –§–£–ù–î–ê–ú–ï–ù–¢
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
- –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +100-200 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

–ù–ï–î–ï–õ–Ø 2 (–¥–Ω–∏ 8-14): –í–ò–†–£–°–ù–û–°–¢–¨
- –í–∏—Ä—É—Å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
- –†–µ–∑—É–ª—å—Ç–∞—Ç: +300-500

–ù–ï–î–ï–õ–Ø 3 (–¥–Ω–∏ 15-21): –ú–ê–°–®–¢–ê–ë
- –ü–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ (–±—é–¥–∂–µ—Ç)
- –ö—Ä–æ—Å—Å-–ø—Ä–æ–º–æ
- –†–µ–∑—É–ª—å—Ç–∞—Ç: +500-800

–ù–ï–î–ï–õ–Ø 4 (–¥–Ω–∏ 22-30): –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–Ø
- –£–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏
- –†–µ–∑—É–ª—å—Ç–∞—Ç: +300-500

–ò–¢–û–ì–û: 1200-2000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü

–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏, –±–µ–∑ –≤–æ–¥—ã. –î–æ 1200 —Å–∏–º–≤–æ–ª–æ–≤.`;

        const response = await grok.chat.completions.create({
          model: 'grok-2-latest',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.8,
          max_tokens: 1500
        });

        const plan = response.choices[0].message.content || '';
        await this.bot!.sendMessage(chatId, `üìà <b>–ü–õ–ê–ù –†–û–°–¢–ê –ù–ê 30 –î–ù–ï–ô</b>\n\n${plan}`, { parse_mode: 'HTML' });
      } catch (error) {
        await this.bot!.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞');
      }
    });

    // === –ö–û–ù–ö–£–†–ï–ù–¢–´ ===
    this.bot.onText(/\/competitors/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot!.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...');

      try {
        const prompt = `–¢–û–ü-3 Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞:

–î–ª—è –∫–∞–∂–¥–æ–≥–æ:
1. –ù–∞–∑–≤–∞–Ω–∏–µ
2. –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
3. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
4. –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
5. –ß—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å

–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –î–æ 800 —Å–∏–º–≤–æ–ª–æ–≤.`;

        const response = await grok.chat.completions.create({
          model: 'grok-2-latest',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 1000
        });

        const analysis = response.choices[0].message.content || '';
        await this.bot!.sendMessage(chatId, `üîç <b>–ê–ù–ê–õ–ò–ó –ö–û–ù–ö–£–†–ï–ù–¢–û–í</b>\n\n${analysis}`, { parse_mode: 'HTML' });
      } catch (error) {
        await this.bot!.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
      }
    });

    // === –¢–†–ï–ù–î–´ ===
    this.bot.onText(/\/trends/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot!.sendMessage(chatId, 'üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã...');

      try {
        const prompt = `–ì–ª–∞–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã Telegram 2025:

1. –ö–æ–Ω—Ç–µ–Ω—Ç-—Ç—Ä–µ–Ω–¥—ã (—Ç–æ–ø-5)
2. –§–æ—Ä–º–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—Ä—ã–≤–∞—é—Ç
3. 3 –∏–¥–µ–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –°–ï–ì–û–î–ù–Ø

–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –î–æ 600 —Å–∏–º–≤–æ–ª–æ–≤.`;

        const response = await grok.chat.completions.create({
          model: 'grok-2-latest',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.9,
          max_tokens: 800
        });

        const trends = response.choices[0].message.content || '';
        await this.bot!.sendMessage(chatId, `üìà <b>–¢–†–ï–ù–î–´ 2025</b>\n\n${trends}`, { parse_mode: 'HTML' });
      } catch (error) {
        await this.bot!.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤');
      }
    });

    // === –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
    this.bot.onText(/\/suggest/, async (msg) => {
      const chatId = msg.chat.id;
      const stats = userStats.get(chatId);
      const hour = new Date().getHours();

      let suggestion = '';

      if (!stats || stats.interactions < 5) {
        suggestion = `üåü <b>–í–´ –ù–û–í–ò–ß–û–ö!</b>

–†–µ–∫–æ–º–µ–Ω–¥—É—é:
1. /viral - —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç
2. /growth - –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ä–æ—Å—Ç–∞
3. /autopilot - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–∏–ª–æ—Ç

–ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å! üöÄ`;
      } else if (hour >= 9 && hour <= 11) {
        suggestion = `‚òÄÔ∏è <b>–£–¢–†–û - –í–†–ï–ú–Ø –î–ï–ô–°–¢–í–û–í–ê–¢–¨!</b>

–°–µ–π—á–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
1. /viral - —Å–æ–∑–¥–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
2. /publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
3. /analytics - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–£—Ç—Ä–æ = –ª—É—á—à–∏–π –æ—Ö–≤–∞—Ç! üìà`;
      } else if (hour >= 19 && hour <= 21) {
        suggestion = `üåô <b>–í–ï–ß–ï–† - –ü–ò–ö–û–í–û–ï –í–†–ï–ú–Ø!</b>

–ú–∞–∫—Å–∏–º—É–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –æ–Ω–ª–∞–π–Ω:
1. /viral - –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç
2. –î–æ–±–∞–≤—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ (–æ–ø—Ä–æ—Å)
3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–∏

–í–µ—á–µ—Ä = –º–∞–∫—Å–∏–º—É–º –≤–æ–≤–ª–µ—á–µ–Ω–∏—è! üî•`;
      } else {
        suggestion = `üí° <b>–°–ï–ô–ß–ê–° –•–û–†–û–®–ï–ï –í–†–ï–ú–Ø</b>

–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
1. /competitors - –∏–∑—É—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
2. /trends - —É–∑–Ω–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã
3. /growth - —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Ç

–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ = —É—Å–ø–µ—Ö! üéØ`;
      }

      await this.bot!.sendMessage(chatId, suggestion, { parse_mode: 'HTML' });
    });

    // === –ê–í–¢–û–ü–ò–õ–û–¢ ===
    this.bot.onText(/\/autopilot/, async (msg) => {
      const chatId = msg.chat.id;
      
      const info = `ü§ñ <b>–†–ï–ñ–ò–ú –ê–í–¢–û–ü–ò–õ–û–¢–ê</b>

‚úÖ <b>–ß–¢–û –í–ö–õ–Æ–ß–ï–ù–û:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
‚Ä¢ AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´:</b>
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 2 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ +40% –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç

üí∞ <b>–°–¢–û–ò–ú–û–°–¢–¨ AI:</b>
‚Ä¢ ~$0.01/–¥–µ–Ω—å
‚Ä¢ ~$0.30/–º–µ—Å—è—Ü
‚Ä¢ ROI: 10x+

‚öôÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>
/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/pause - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å

‚úÖ –ê–≤—Ç–æ–ø–∏–ª–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!`;

      await this.bot!.sendMessage(chatId, info, { parse_mode: 'HTML' });
    });

    // === AI –ü–û–ú–û–©–ù–ò–ö (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞) ===
    this.bot.on('message', async (msg) => {
      if (!msg.text || msg.text.startsWith('/')) return;

      const chatId = msg.chat.id;
      const text = msg.text;

      try {
        await this.bot!.sendChatAction(chatId, 'typing');

        const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –≤ Telegram. 
–í–æ–ø—Ä–æ—Å: "${text}"

–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç —Å:
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏
- –≠–º–æ–¥–∑–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

–î–æ 400 —Å–∏–º–≤–æ–ª–æ–≤.`;

        const response = await grok.chat.completions.create({
          model: 'grok-2-latest',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.8,
          max_tokens: 500
        });

        const answer = response.choices[0].message.content || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help';
        await this.bot!.sendMessage(chatId, answer);
      } catch (error) {
        await this.bot!.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ /start');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      if (error.message.includes('409')) {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç 409 - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥');
        setTimeout(() => this.initialize(), 5000);
      } else if (!error.message.includes('ETELEGRAM')) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ polling:', error.message.substring(0, 100));
      }
    });
  }

  private setupScheduler() {
    // –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç (9:00)
    cron.schedule('0 9 * * *', async () => {
      await this.autoPost('—É—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞');
      console.log('‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –∞–≤—Ç–æ–ø–æ—Å—Ç');
    });

    // –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç (15:00)
    cron.schedule('0 15 * * *', async () => {
      await this.autoPost('–ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é');
      console.log('‚úÖ –î–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–ø–æ—Å—Ç');
    });

    // –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç (20:00)
    cron.schedule('0 20 * * *', async () => {
      await this.autoPost('–≤–µ—á–µ—Ä–Ω–∏–π –∏–Ω—Å–∞–π—Ç –æ —Ç—Ä–µ–Ω–¥–∞—Ö');
      console.log('‚úÖ –í–µ—á–µ—Ä–Ω–∏–π –∞–≤—Ç–æ–ø–æ—Å—Ç');
    });
  }

  private async autoPost(topic: string) {
    try {
      const prompt = `–°–æ–∑–¥–∞–π –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram –ø—Ä–æ "${topic}":
- –ú–æ—â–Ω—ã–π —Ö—É–∫
- –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
- 300-400 —Å–∏–º–≤–æ–ª–æ–≤
- –≠–º–æ–¥–∑–∏`;

      const response = await grok.chat.completions.create({
        model: 'grok-2-latest',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.85,
        max_tokens: 500
      });

      const content = response.choices[0].message.content || '';
      
      if (this.bot && this.channelId) {
        await this.bot.sendMessage(this.channelId, content);
        
        await storage.createActivityLog({
          userId: this.userId,
          action: 'Auto Post Published',
          description: `–ê–≤—Ç–æ–ø–æ—Å—Ç: ${topic}`,
          status: 'success',
          metadata: { topic, content: content.substring(0, 100) },
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞:', error);
    }
  }

  private getCachedContent(key: string): string | null {
    const cached = contentCache.get(key);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return cached.content;
    }
    contentCache.delete(key);
    return null;
  }

  private setCachedContent(key: string, content: string): void {
    contentCache.set(key, { content, timestamp: Date.now() });
  }

  private updateUserStats(chatId: number, action: string): void {
    const stats = userStats.get(chatId) || {
      interactions: 0,
      lastActive: new Date(),
      preferences: []
    };

    stats.interactions++;
    stats.lastActive = new Date();
    if (!stats.preferences.includes(action)) {
      stats.preferences.push(action);
    }

    userStats.set(chatId, stats);
  }

  async stop() {
    if (this.bot) {
      await this.bot.stopPolling({ cancel: true });
      this.bot = null;
      isActive = false;
      promoBot = null;
      console.log('üõë –ü—Ä–æ–º–æ-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

export { TelegramPromoBot, promoBot, isActive };
