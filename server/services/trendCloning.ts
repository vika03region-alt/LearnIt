import OpenAI from 'openai';
import { storage } from '../storage.js';
import { klingAIService } from './klingAIService.js';
import type { TrendVideo, BrandStyle } from '@shared/schema';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
});

const grok = new OpenAI({
  apiKey: process.env.XAI_API_KEY || '',
  baseURL: 'https://api.x.ai/v1'
});

export interface AdaptedTrendResult {
  adaptedPrompt: string;
  adaptedScript: string;
}

export interface CloneTrendResult {
  success: boolean;
  videoUrl?: string;
  aiVideoId?: number;
  cost: number;
  error?: string;
}

class TrendCloningService {
  
  async adaptTrendToBrand(
    trend: TrendVideo,
    brandStyle: BrandStyle
  ): Promise<AdaptedTrendResult> {
    try {
      console.log('üé® –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞ –ø–æ–¥ –±—Ä–µ–Ω–¥-—Å—Ç–∏–ª—å...');
      console.log(`üìä –¢—Ä–µ–Ω–¥: ${trend.title || trend.concept || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      console.log(`üéØ –ë—Ä–µ–Ω–¥: ${brandStyle.name}`);

      const systemPrompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ –ø–æ–¥ –±—Ä–µ–Ω–¥. –í–æ–∑—å–º–∏ –∫–æ–Ω—Ü–µ–ø—Ç –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –µ–≥–æ –ø–æ–¥ —Å—Ç–∏–ª—å –±—Ä–µ–Ω–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.";

      const userPrompt = `–ê–¥–∞–ø—Ç–∏—Ä—É–π —ç—Ç–æ—Ç –≤–∏—Ä—É—Å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ–¥ –Ω–∞—à –±—Ä–µ–Ω–¥-—Å—Ç–∏–ª—å:

–í–ò–†–£–°–ù–´–ô –¢–†–ï–ù–î:
- –ö–æ–Ω—Ü–µ–ø—Ç: ${trend.concept || trend.title || '–í–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ'}
- –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${trend.visualElements || '–¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞'}
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${trend.description || '–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö'}

–ë–†–ï–ù–î-–°–¢–ò–õ–¨:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${brandStyle.name}
- –¢–æ–Ω: ${brandStyle.tone}
- –í–∏–¥–µ–æ —Å—Ç–∏–ª—å: ${brandStyle.videoStyle || '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π'}
${brandStyle.videoPromptTemplate ? `- –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞: ${brandStyle.videoPromptTemplate}` : ''}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ—Ö—Ä–∞–Ω–∏ –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
2. –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–æ–Ω –∏ —Å—Ç–∏–ª—å –±—Ä–µ–Ω–¥–∞ (${brandStyle.tone})
3. –°–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è AI)
4. –°–æ–∑–¥–∞–π —Å—Ü–µ–Ω–∞—Ä–∏–π/—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ (—á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)

–í–µ—Ä–Ω–∏ JSON:
{
  "adaptedPrompt": "–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ AI (–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–æ–≤, —Å—Ç–∏–ª—å, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)",
  "adaptedScript": "–ö—Ä–∞—Ç–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
}`;

      const aiProvider = process.env.XAI_API_KEY ? grok : openai;
      const model = process.env.XAI_API_KEY ? 'grok-2-latest' : 'gpt-4';

      console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º ${process.env.XAI_API_KEY ? 'Grok' : 'OpenAI'} –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏`);

      const response = await aiProvider.chat.completions.create({
        model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        response_format: { type: 'json_object' },
        temperature: 0.8,
        max_tokens: 1000
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');

      let adaptedPrompt = result.adaptedPrompt || result.adapted_prompt || '';
      let adaptedScript = result.adaptedScript || result.adapted_script || '';

      if (brandStyle.videoPromptTemplate) {
        console.log('üìù –ü—Ä–∏–º–µ–Ω—è—é —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –±—Ä–µ–Ω–¥–∞...');
        
        adaptedPrompt = brandStyle.videoPromptTemplate
          .replace('{concept}', trend.concept || trend.title || 'trending video')
          .replace('{visualElements}', (trend.visualElements || []).join(', '))
          .replace('{tone}', brandStyle.tone)
          .replace('{style}', brandStyle.videoStyle || 'professional')
          .replace('{adaptedPrompt}', adaptedPrompt);
      }

      if (!adaptedPrompt || adaptedPrompt.length < 10) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç');
      }

      console.log('‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      console.log(`üìù –ü—Ä–æ–º–ø—Ç: ${adaptedPrompt.substring(0, 100)}...`);

      return {
        adaptedPrompt,
        adaptedScript
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–∞:', error);
      throw new Error(`Failed to adapt trend to brand: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async cloneTrendVideo(
    trendId: number,
    userId: string
  ): Promise<CloneTrendResult> {
    try {
      console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞...');
      console.log(`üìä Trend ID: ${trendId}, User ID: ${userId}`);

      const { trend, brandStyle } = await storage.getTrendWithBrandStyle(trendId);

      if (!trend) {
        return {
          success: false,
          cost: 0,
          error: '–¢—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      console.log(`üìä –¢—Ä–µ–Ω–¥ –Ω–∞–π–¥–µ–Ω: ${trend.title || trend.concept}`);

      if (!brandStyle) {
        console.log('‚ö†Ô∏è –ë—Ä–µ–Ω–¥-—Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π...');
        const defaultStyle = await storage.getDefaultBrandStyle(userId);
        
        if (!defaultStyle) {
          return {
            success: false,
            cost: 0,
            error: '–ù–µ—Ç –±—Ä–µ–Ω–¥-—Å—Ç–∏–ª—è. –°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ /brandstyle'
          };
        }
        
        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±—Ä–µ–Ω–¥-—Å—Ç–∏–ª—å: ${defaultStyle.name}`);
      }

      const styleToUse = brandStyle || await storage.getDefaultBrandStyle(userId);

      if (!styleToUse) {
        return {
          success: false,
          cost: 0,
          error: '–ù–µ—Ç –±—Ä–µ–Ω–¥-—Å—Ç–∏–ª—è'
        };
      }

      console.log('üé® –ê–¥–∞–ø—Ç–∏—Ä—É—é —Ç—Ä–µ–Ω–¥ –ø–æ–¥ –±—Ä–µ–Ω–¥...');
      const { adaptedPrompt, adaptedScript } = await this.adaptTrendToBrand(trend, styleToUse);

      console.log('üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Fal.ai...');
      console.log(`üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${adaptedPrompt.substring(0, 100)}...`);

      const videoConfig = {
        model: 'wan' as const,
        resolution: '720p' as const,
        aspectRatio: (styleToUse.aspectRatio || '9:16') as '16:9' | '9:16' | '1:1'
      };

      const videoResult = await klingAIService.generateFalVideo(
        adaptedPrompt,
        videoConfig
      );

      console.log(`‚úÖ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${videoResult.videoUrl || 'processing...'}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${videoResult.cost}`);

      const aiVideo = await storage.createAIVideo({
        userId,
        prompt: adaptedPrompt,
        videoUrl: videoResult.videoUrl,
        thumbnailUrl: videoResult.thumbnailUrl,
        provider: videoResult.provider,
        duration: videoResult.duration || 5,
        resolution: '720p',
        aspectRatio: videoConfig.aspectRatio,
        status: videoResult.status,
        taskId: videoResult.taskId,
        cost: videoResult.cost,
        metadata: {
          trendId,
          brandStyleId: styleToUse.id,
          adaptedScript
        }
      });

      console.log(`üíæ AI Video —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ID ${aiVideo.id}`);

      await storage.updateTrendVideo(trendId, {
        adaptedPrompt,
        adaptedScript
      });

      console.log('üìù –¢—Ä–µ–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º');

      await storage.updateTrendVideoStatus(trendId, 'cloned', aiVideo.id);

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "cloned"');

      return {
        success: true,
        videoUrl: videoResult.videoUrl,
        aiVideoId: aiVideo.id,
        cost: videoResult.cost
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞:', error);
      return {
        success: false,
        cost: 0,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  async checkVideoStatus(taskId: string): Promise<{
    status: 'queued' | 'processing' | 'completed' | 'failed';
    videoUrl?: string;
    thumbnailUrl?: string;
  }> {
    try {
      const result = await klingAIService.checkVideoStatus(taskId);
      return {
        status: result.status,
        videoUrl: result.videoUrl,
        thumbnailUrl: result.thumbnailUrl
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ:', error);
      return {
        status: 'failed'
      };
    }
  }
}

export const trendCloningService = new TrendCloningService();
