
import { geminiService } from './geminiService';

interface VoiceConfig {
  provider: 'elevenlabs' | 'google' | 'openai';
  voiceId: string;
  language: string;
  speed: number;
}

class TelegramVoiceAIService {
  private config: VoiceConfig = {
    provider: 'elevenlabs',
    voiceId: 'professional_male',
    language: 'ru',
    speed: 1.0,
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  async generateVoiceSignal(signalData: {
    pair: string;
    action: 'BUY' | 'SELL';
    entry: number;
    target: number;
    stopLoss: number;
  }): Promise<string> {
    const script = `
–ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –õ—é—Ü–∏—Ñ–µ—Ä –¢—Ä–µ–π–¥–µ—Ä–∞!

–ü–∞—Ä–∞: ${signalData.pair}
–î–µ–π—Å—Ç–≤–∏–µ: ${signalData.action === 'BUY' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: ${signalData.entry}
–¶–µ–ª—å: ${signalData.target}
–°—Ç–æ–ø-–ª–æ—Å—Å: ${signalData.stopLoss}

–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${((signalData.target - signalData.entry) / signalData.entry * 100).toFixed(2)} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤

–£–¥–∞—á–∏ –≤ —Å–¥–µ–ª–∫–µ!
`;

    return await this.textToSpeech(script);
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
  async generateDailyPodcast(marketData: any): Promise<string> {
    const analysis = await geminiService.generateContent(
      `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞—É–¥–∏–æ-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ (2-3 –º–∏–Ω—É—Ç—ã):
      
–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(marketData)}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
2. –ì–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è
3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø-3 –∞–∫—Ç–∏–≤–æ–≤
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
5. –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

–°—Ç–∏–ª—å: —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å —é–º–æ—Ä–æ–º`,
      '–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏'
    );

    return await this.textToSpeech(analysis.content);
  }

  // AI —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async transcribeUserVoice(voiceFileId: string): Promise<{
    text: string;
    intent: string;
    suggestedResponse: string;
  }> {
    // 1. –°–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —á–µ—Ä–µ–∑ Telegram API
    // 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (OpenAI Whisper / Google Speech-to-Text)
    // 3. –ê–Ω–∞–ª–∏–∑ intent —á–µ—Ä–µ–∑ Gemini
    // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞

    const transcription = '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?'; // Mock
    
    const analysis = await geminiService.generateContent(
      `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${transcription}"
      
–û–ø—Ä–µ–¥–µ–ª–∏:
1. intent (–≤–æ–ø—Ä–æ—Å/–∑–∞–ø—Ä–æ—Å/–∂–∞–ª–æ–±–∞)
2. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç`,
      'JSON —Ñ–æ—Ä–º–∞—Ç'
    );

    return {
      text: transcription,
      intent: 'signal_request',
      suggestedResponse: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ /signals. –°–µ–π—á–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ BTC/USDT!',
    };
  }

  // Text-to-Speech —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  private async textToSpeech(text: string): Promise<string> {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ElevenLabs / Google TTS / OpenAI TTS
    
    // Mock –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    return 'https://example.com/voice.ogg';
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendVoiceAlert(chatId: number, alertType: 'signal' | 'news' | 'analysis', data: any): Promise<void> {
    const scripts = {
      signal: `–°—Ä–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª! ${data.pair} - ${data.action} –ø–æ ${data.price}!`,
      news: `–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! ${data.headline}`,
      analysis: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞: ${data.summary}`,
    };

    const voiceUrl = await this.textToSpeech(scripts[alertType]);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API
    console.log(`üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
  }
}

export const telegramVoiceAI = new TelegramVoiceAIService();
