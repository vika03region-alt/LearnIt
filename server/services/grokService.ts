
import OpenAI from "openai";

interface GrokResponse {
  content: string;
  tokensUsed: number;
  cost: number;
}

class GrokService {
  private grok: OpenAI | null = null;
  private isGrokAvailable = false;

  constructor() {
    this.initializeGrok();
  }

  private initializeGrok(): void {
    const grokApiKey = process.env.GROK_API_KEY;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Grok API Key:', {
      exists: !!grokApiKey,
      length: grokApiKey?.length || 0,
      starts_with_grok: grokApiKey?.startsWith('grok-') || false,
      preview: grokApiKey ? `${grokApiKey.substring(0, 8)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    });
    
    if (grokApiKey && grokApiKey.startsWith('grok-')) {
      try {
        // Grok –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
        this.grok = new OpenAI({
          apiKey: grokApiKey,
          baseURL: "https://api.x.ai/v1", // xAI API endpoint
        });
        this.isGrokAvailable = true;
        console.log('ü§ñ Grok API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üîó API Endpoint: https://api.x.ai/v1');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Grok API:', error);
        this.isGrokAvailable = false;
      }
    } else {
      if (!grokApiKey) {
        console.log('‚ö†Ô∏è GROK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      } else {
        console.log('‚ö†Ô∏è GROK_API_KEY –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "grok-"');
        console.log('üìù –¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:', grokApiKey.substring(0, 10) + '...');
      }
      this.isGrokAvailable = false;
    }
  }

  public isAvailable(): boolean {
    return this.isGrokAvailable && this.grok !== null;
  }

  async generateContent(
    prompt: string,
    systemPrompt?: string,
    options?: {
      model?: string;
      temperature?: number;
      maxTokens?: number;
    }
  ): Promise<GrokResponse> {
    if (!this.isAvailable()) {
      throw new Error("Grok API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GROK_API_KEY –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö.");
    }

    try {
      const response = await this.grok!.chat.completions.create({
        model: options?.model || "grok-beta", // –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å Grok
        messages: [
          ...(systemPrompt ? [{ role: "system" as const, content: systemPrompt }] : []),
          { role: "user" as const, content: prompt }
        ],
        temperature: options?.temperature || 0.7,
        max_tokens: options?.maxTokens || 1000,
      });

      const content = response.choices[0]?.message?.content || '';
      const tokensUsed = response.usage?.total_tokens || 0;
      
      // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è Grok (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
      const cost = tokensUsed * 0.00001; // $0.01 per 1000 tokens (–ø—Ä–∏–º–µ—Ä–Ω–æ)

      return {
        content,
        tokensUsed,
        cost,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ Grok API:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Grok: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async generateTradingContent(
    contentType: 'signal' | 'analysis' | 'prediction' | 'education',
    prompt: string
  ): Promise<GrokResponse> {
    const systemPrompts = {
      signal: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å —á–µ—Ç–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –≤—Ö–æ–¥–∞, —Ü–µ–ª—è–º–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º–∏. –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.`,
      analysis: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–æ–≤. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –≥–ª—É–±–æ–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏.`,
      prediction: `–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–¥–∞–º. –î–µ–ª–∞–π –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫.`,
      education: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.`
    };

    return this.generateContent(
      prompt,
      systemPrompts[contentType],
      {
        model: "grok-beta",
        temperature: contentType === 'education' ? 0.3 : 0.7,
        maxTokens: 1500
      }
    );
  }

  async analyzeMarketSentiment(
    markets: string[],
    timeframe: string = '24h'
  ): Promise<GrokResponse> {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è ${markets.join(', ')} –∑–∞ –ø–µ—Ä–∏–æ–¥ ${timeframe}. 
    –£—á—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤. 
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –æ—Ü–µ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç 1 –¥–æ 10 (–≥–¥–µ 1 - –∫—Ä–∞–π–Ω–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ, 10 - –∫—Ä–∞–π–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ).`;

    return this.generateContent(
      prompt,
      `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º. 
      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –Ω–æ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞, –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.`,
      {
        model: "grok-beta",
        temperature: 0.4,
        maxTokens: 800
      }
    );
  }

  async generateViralContent(
    platform: 'tiktok' | 'instagram' | 'youtube' | 'telegram',
    niche: string,
    trend: string
  ): Promise<GrokResponse> {
    const platformStyles = {
      tiktok: '–∫–æ—Ä–æ—Ç–∫–∏–π, —Ü–µ–ø–ª—è—é—â–∏–π, —Å —Ö—É–∫–∞–º–∏ –≤ –ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã',
      instagram: '–≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π, —Å —ç–º–æ–¥–∑–∏ –∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏',
      youtube: '–ø–æ–¥—Ä–æ–±–Ω—ã–π, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π, —Å –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º',
      telegram: '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –ø—Ä—è–º–æ–π, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏'
    };

    const prompt = `–°–æ–∑–¥–∞–π –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è ${platform} –≤ –Ω–∏—à–µ ${niche}, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—Ä–µ–Ω–¥ "${trend}".
    –°—Ç–∏–ª—å: ${platformStyles[platform]}
    –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –∏ –ø–æ–±—É–∂–¥–∞—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—é.`;

    return this.generateContent(
      prompt,
      `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. 
      –°–æ–∑–¥–∞–≤–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫.`,
      {
        model: "grok-beta",
        temperature: 0.8,
        maxTokens: 1200
      }
    );
  }

  async compareWithOtherAI(prompt: string): Promise<{
    grokResponse: GrokResponse;
    comparison: string;
  }> {
    const grokResponse = await this.generateContent(prompt);
    
    const comparisonPrompt = `–°—Ä–∞–≤–Ω–∏ —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —Å —Ç–µ–º, —á—Ç–æ –º–æ–≥ –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å GPT –∏–ª–∏ Claude. 
    –í —á–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∞ Grok? –ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏?`;

    const comparison = await this.generateContent(
      comparisonPrompt,
      `–¢—ã Grok - AI —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –∞–Ω–∞–ª–∏–∑—É –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 
      –û–±—ä—è—Å–Ω–∏ —Å–≤–æ–∏ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ.`,
      {
        temperature: 0.5,
        maxTokens: 500
      }
    );

    return {
      grokResponse,
      comparison: comparison.content
    };
  }

  getStatus(): {
    available: boolean;
    model: string;
    features: string[];
    diagnostics?: {
      apiKeyExists: boolean;
      apiKeyFormat: boolean;
      endpoint: string;
      initialized: boolean;
    };
  } {
    const grokApiKey = process.env.GROK_API_KEY;
    
    return {
      available: this.isAvailable(),
      model: this.isAvailable() ? "grok-beta" : "unavailable",
      features: this.isAvailable() ? [
        "–ö–æ–Ω—Ç–µ–Ω—Ç-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
        "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤", 
        "–í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
      ] : [],
      diagnostics: {
        apiKeyExists: !!grokApiKey,
        apiKeyFormat: grokApiKey?.startsWith('grok-') || false,
        endpoint: "https://api.x.ai/v1",
        initialized: this.grok !== null
      }
    };
  }
}

export const grokService = new GrokService();
