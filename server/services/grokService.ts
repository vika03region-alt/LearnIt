export const grokService = {
  async testConnection(prompt: string) {
    try {
      console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Grok API...');

      const response = await fetch('https://api.x.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.GROK_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          model: 'grok-beta',
          stream: false,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ Grok API:', errorText);
        throw new Error(`Grok API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Grok API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ');

      return {
        success: true,
        response: data.choices[0]?.message?.content || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç',
        usage: data.usage,
        model: data.model
      };
    } catch (error) {
      console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Grok API:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  },

  async advancedAnalysis(prompt: string, analysisType: string) {
    try {
      console.log(`üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${analysisType}`);

      const systemPrompts = {
        telegram_promotion_analysis: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é Telegram –∫–∞–Ω–∞–ª–æ–≤. 
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–Ω–∞–ª—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ: –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é.
        –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ actionable —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ç–∞–π–º–ª–∞–π–Ω–∞–º–∏.`,

        viral_content_strategy: `–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥—ã, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã.
        –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞.`,

        competitor_analysis: `–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Ä–∞–∑–≤–µ–¥–∫–∏.
        –ò–∑—É—á–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –∏—Ö —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
        –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ø–æ—Å–æ–±—ã –ø—Ä–µ–≤–∑–æ–π—Ç–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∑–∞–Ω—è—Ç—å –∏—Ö –¥–æ–ª—é —Ä—ã–Ω–∫–∞.`
      };

      const systemContent = systemPrompts[analysisType as keyof typeof systemPrompts] || 
                           systemPrompts.telegram_promotion_analysis;

      const response = await fetch('https://api.x.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.GROK_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: systemContent
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          model: 'grok-beta',
          stream: false,
          temperature: 0.8,
          max_tokens: 2000
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Grok:', errorText);
        throw new Error(`Grok advanced analysis error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ Grok –∑–∞–≤–µ—Ä—à–µ–Ω');

      return {
        success: true,
        response: data.choices[0]?.message?.content || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç',
        usage: data.usage,
        model: data.model,
        analysisType
      };
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
      };
    }
  },

  async generatePromotionStrategy(channelUrl: string, niche: string) {
    try {
      const prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ ${channelUrl} –≤ –Ω–∏—à–µ ${niche}.

      –í–∫–ª—é—á–∏:
      1. –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
      2. –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü
      3. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      4. –ú–µ—Ç–æ–¥—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
      5. KPI –∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      6. –ë—é–¥–∂–µ—Ç –∏ ROI –ø—Ä–æ–≥–Ω–æ–∑—ã

      –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ actionable —à–∞–≥–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏.`;

      return await this.advancedAnalysis(prompt, 'telegram_promotion_analysis');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è'
      };
    }
  }
};