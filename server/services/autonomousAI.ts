
import OpenAI from "openai";
import fs from 'fs/promises';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
import { storage } from '../storage';

const execAsync = promisify(exec);

interface CodeAnalysis {
  file_path: string;
  current_code: string;
  issues: string[];
  improvements: string[];
  missing_features: string[];
  optimization_score: number;
}

interface ImplementationPlan {
  priority: 'critical' | 'high' | 'medium' | 'low';
  feature_name: string;
  description: string;
  files_to_modify: string[];
  new_files_to_create: string[];
  estimated_complexity: number;
  implementation_steps: string[];
}

class AutonomousAI {
  private openai: OpenAI;
  private isActive = false;
  private developmentCycle = 0;
  private improvementHistory: any[] = [];

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || '',
    });
  }

  // === –ê–í–¢–û–ù–û–ú–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê ===
  
  async startAutonomousDevelopment(): Promise<void> {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
    this.isActive = true;
    
    while (this.isActive) {
      try {
        console.log(`üîÑ –¶–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ #${++this.developmentCycle}`);
        
        // 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        const systemAnalysis = await this.analyzeCurrentSystem();
        
        // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è
        const priorities = await this.determineDevelopmentPriorities(systemAnalysis);
        
        // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        const implementationPlan = await this.createImplementationPlan(priorities);
        
        // 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        await this.executeImplementationPlan(implementationPlan);
        
        // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        await this.validateImplementation();
        
        // 6. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        await this.learnFromImplementation();
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (1 —á–∞—Å)
        await this.sleep(60 * 60 * 1000);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', error);
        await this.sleep(30 * 60 * 1000); // –ü–∞—É–∑–∞ 30 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
  }

  // === –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ ===
  
  async analyzeCurrentSystem(): Promise<CodeAnalysis[]> {
    const analyses: CodeAnalysis[] = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã
    const criticalFiles = [
      'server/routes.ts',
      'server/services/aiContent.ts',
      'server/services/aiAssistant.ts',
      'server/services/aiLearningEngine.ts',
      'client/src/App.tsx',
      'client/src/components/Sidebar.tsx',
      'shared/schema.ts'
    ];

    for (const filePath of criticalFiles) {
      try {
        const code = await fs.readFile(filePath, 'utf-8');
        const analysis = await this.analyzeCodeFile(filePath, code);
        analyses.push(analysis);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      }
    }

    return analyses;
  }

  private async analyzeCodeFile(filePath: string, code: string): Promise<CodeAnalysis> {
    const prompt = `
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ —Ñ–∞–π–ª–∞ ${filePath}:
      
      ${code.slice(0, 5000)} ${code.length > 5000 ? '...[truncated]' : ''}
      
      –û–ø—Ä–µ–¥–µ–ª–∏:
      1. issues: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –±–∞–≥–∏
      2. improvements: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
      3. missing_features: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      4. optimization_score: –æ—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç 0 –¥–æ 100
      
      –í–µ—Ä–Ω–∏ JSON —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
    `;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.' },
          { role: 'user', content: prompt }
        ],
        response_format: { type: "json_object" },
      });

      const analysis = JSON.parse(response.choices[0].message.content || '{}');
      
      return {
        file_path: filePath,
        current_code: code,
        issues: analysis.issues || [],
        improvements: analysis.improvements || [],
        missing_features: analysis.missing_features || [],
        optimization_score: analysis.optimization_score || 50,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:', error);
      return {
        file_path: filePath,
        current_code: code,
        issues: [],
        improvements: [],
        missing_features: [],
        optimization_score: 50,
      };
    }
  }

  // === –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–í–ò–¢–ò–Ø ===
  
  async determineDevelopmentPriorities(analyses: CodeAnalysis[]): Promise<string[]> {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è
    const allIssues = analyses.flatMap(a => a.issues.map(issue => `${a.file_path}: ${issue}`));
    const allImprovements = analyses.flatMap(a => a.improvements.map(imp => `${a.file_path}: ${imp}`));
    const allMissingFeatures = analyses.flatMap(a => a.missing_features.map(feat => `${a.file_path}: ${feat}`));

    const prompt = `
      –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–ø-10 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
      
      –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:
      ${allIssues.slice(0, 20).join('\n')}
      
      –£–õ–£–ß–®–ï–ù–ò–Ø:
      ${allImprovements.slice(0, 20).join('\n')}
      
      –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò:
      ${allMissingFeatures.slice(0, 20).join('\n')}
      
      –°–æ–∑–¥–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
      –í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.
    `;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã.' },
          { role: 'user', content: prompt }
        ],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      return result.priorities || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:', error);
      return [];
    }
  }

  async createImplementationPlan(priorities: string[]): Promise<ImplementationPlan[]> {
    const plans: ImplementationPlan[] = [];

    for (const priority of priorities.slice(0, 5)) { // –¢–æ–ø-5 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
      const plan = await this.createDetailedPlan(priority);
      if (plan) plans.push(plan);
    }

    return plans.sort((a, b) => {
      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
  }

  private async createDetailedPlan(priorityDescription: string): Promise<ImplementationPlan | null> {
    const prompt = `
      –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è: "${priorityDescription}"
      
      –£—á–∏—Ç—ã–≤–∞–π —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.
      
      –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
      - priority: critical/high/medium/low
      - feature_name: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      - description: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      - files_to_modify: –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
      - new_files_to_create: –º–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
      - estimated_complexity: —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10
      - implementation_steps: –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    `;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã –≤–µ–¥—É—â–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û, —Å–æ–∑–¥–∞—é—â–∏–π –ø–ª–∞–Ω—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.' },
          { role: 'user', content: prompt }
        ],
        response_format: { type: "json_object" },
      });

      return JSON.parse(response.choices[0].message.content || '{}');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞:', error);
      return null;
    }
  }

  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø ===
  
  async executeImplementationPlan(plans: ImplementationPlan[]): Promise<void> {
    for (const plan of plans) {
      console.log(`üöÄ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: ${plan.feature_name}`);
      
      try {
        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        for (const newFile of plan.new_files_to_create) {
          await this.createNewFile(newFile, plan);
        }
        
        // 2. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
        for (const fileToModify of plan.files_to_modify) {
          await this.modifyExistingFile(fileToModify, plan);
        }
        
        // 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await this.handleDependencies(plan);
        
        console.log(`‚úÖ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è ${plan.feature_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.improvementHistory.push({
          cycle: this.developmentCycle,
          feature: plan.feature_name,
          timestamp: new Date(),
          status: 'completed'
        });
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ${plan.feature_name}:`, error);
        this.improvementHistory.push({
          cycle: this.developmentCycle,
          feature: plan.feature_name,
          timestamp: new Date(),
          status: 'failed',
          error: error.message
        });
      }
    }
  }

  private async createNewFile(filePath: string, plan: ImplementationPlan): Promise<void> {
    const prompt = `
      –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ${filePath} –≤ —Ä–∞–º–∫–∞—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ "${plan.feature_name}".
      
      –û–ø–∏—Å–∞–Ω–∏–µ: ${plan.description}
      
      –£—á–∏—Ç—ã–≤–∞–π:
      - TypeScript/React –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
      - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–¥–∞
      - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
      
      –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –∫–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
    `;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥.' },
          { role: 'user', content: prompt }
        ],
      });

      const code = response.choices[0].message.content || '';
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      const dir = path.dirname(filePath);
      await fs.mkdir(dir, { recursive: true });
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
      await fs.writeFile(filePath, code, 'utf-8');
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${filePath}`);
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    }
  }

  private async modifyExistingFile(filePath: string, plan: ImplementationPlan): Promise<void> {
    try {
      const currentCode = await fs.readFile(filePath, 'utf-8');
      
      const prompt = `
        –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–æ–¥ —Ñ–∞–π–ª–∞ ${filePath} –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ "${plan.feature_name}".
        
        –¢–µ–∫—É—â–∏–π –∫–æ–¥:
        ${currentCode.slice(0, 8000)}${currentCode.length > 8000 ? '\n...[–∫–æ–¥ –æ–±—Ä–µ–∑–∞–Ω]' : ''}
        
        –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${plan.description}
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –°–æ—Ö—Ä–∞–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        - –î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
        - –ò—Å–ø–æ–ª—å–∑—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        - TypeScript —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        
        –í–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Ñ–∞–π–ª–∞.
      `;

      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–π –∫–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞.' },
          { role: 'user', content: prompt }
        ],
      });

      const modifiedCode = response.choices[0].message.content || '';
      
      // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
      await fs.writeFile(`${filePath}.backup.${Date.now()}`, currentCode, 'utf-8');
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
      await fs.writeFile(filePath, modifiedCode, 'utf-8');
      console.log(`üîß –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${filePath}`);
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    }
  }

  private async handleDependencies(plan: ImplementationPlan): Promise<void> {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const prompt = `
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã –ª–∏ –Ω–æ–≤—ã–µ npm –ø–∞–∫–µ—Ç—ã:
      
      –§—É–Ω–∫—Ü–∏—è: ${plan.feature_name}
      –û–ø–∏—Å–∞–Ω–∏–µ: ${plan.description}
      
      –í–µ—Ä–Ω–∏ JSON —Å –º–∞—Å—Å–∏–≤–æ–º "dependencies" –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
    `;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º.' },
          { role: 'user', content: prompt }
        ],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      const dependencies = result.dependencies || [];

      if (dependencies.length > 0) {
        console.log(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${dependencies.join(', ')}`);
        await execAsync(`npm install ${dependencies.join(' ')}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error);
    }
  }

  // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø ===
  
  async validateImplementation(): Promise<boolean> {
    try {
      console.log('üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏...');
      
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
      const tscResult = await execAsync('npx tsc --noEmit');
      console.log('‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
      
      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      // (–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã)
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  // === –û–ë–£–ß–ï–ù–ò–ï –ù–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê–• ===
  
  async learnFromImplementation(): Promise<void> {
    const recentHistory = this.improvementHistory.slice(-10);
    
    const prompt = `
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π:
      ${JSON.stringify(recentHistory, null, 2)}
      
      –û–ø—Ä–µ–¥–µ–ª–∏:
      1. –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ
      2. –ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å
      3. –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ü–∏–∫–ª–∞—Ö
      
      –°–æ–∑–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
    `;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã AI –∞–Ω–∞–ª–∏—Ç–∏–∫, –∏–∑—É—á–∞—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.' },
          { role: 'user', content: prompt }
        ],
        response_format: { type: "json_object" },
      });

      const insights = JSON.parse(response.choices[0].message.content || '{}');
      console.log('üß† –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', insights);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ü–∏–∫–ª–æ–≤
      await this.saveInsights(insights);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:', error);
    }
  }

  private async saveInsights(insights: any): Promise<void> {
    try {
      const insightsPath = 'autonomous_ai_insights.json';
      await fs.writeFile(insightsPath, JSON.stringify(insights, null, 2), 'utf-8');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤:', error);
    }
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú ===
  
  stopAutonomousDevelopment(): void {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
    this.isActive = false;
  }

  getStatus(): any {
    return {
      isActive: this.isActive,
      currentCycle: this.developmentCycle,
      improvementsCount: this.improvementHistory.length,
      recentHistory: this.improvementHistory.slice(-5),
    };
  }

  // === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø ===
  
  async enhanceAICapabilities(): Promise<void> {
    console.log('üß† –£–ª—É—á—à–µ–Ω–∏–µ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...');
    
    // –ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–æ–≤
    const aiServices = [
      'server/services/aiContent.ts',
      'server/services/aiAssistant.ts',
      'server/services/aiLearningEngine.ts'
    ];

    for (const service of aiServices) {
      await this.enhanceAIService(service);
    }
  }

  private async enhanceAIService(servicePath: string): Promise<void> {
    try {
      const code = await fs.readFile(servicePath, 'utf-8');
      
      const prompt = `
        –£–ª—É—á—à–∏ AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:
        
        ${code.slice(0, 6000)}
        
        –î–æ–±–∞–≤—å:
        1. –ë–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        2. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        3. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        4. –õ—É—á—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        5. –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        –í–µ—Ä–Ω–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥.
      `;

      const response = await this.openai.chat.completions.create({
        model: 'gpt-5',
        messages: [
          { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ AI —Å–∏—Å—Ç–µ–º–∞–º, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è.' },
          { role: 'user', content: prompt }
        ],
      });

      const enhancedCode = response.choices[0].message.content || '';
      
      // –ë—ç–∫–∞–ø –∏ –∑–∞–ø–∏—Å—å —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
      await fs.writeFile(`${servicePath}.backup.${Date.now()}`, code, 'utf-8');
      await fs.writeFile(servicePath, enhancedCode, 'utf-8');
      
      console.log(`üîß –£–ª—É—á—à–µ–Ω AI —Å–µ—Ä–≤–∏—Å: ${servicePath}`);
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–∞ ${servicePath}:`, error);
    }
  }

  // === –£–¢–ò–õ–ò–¢–´ ===
  
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

export const autonomousAI = new AutonomousAI();
export { AutonomousAI };
