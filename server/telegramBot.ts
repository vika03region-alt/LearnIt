import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';
import OpenAI from 'openai';
import { storage } from './storage';
import { analyzeNicheWithGemini, generateContentWithGemini } from './services/geminiService.js';

const TELEGRAM_TOKEN = process.env.BOTTG || '';
const CHANNEL_ID = '@IIPRB';

const grok = new OpenAI({
  apiKey: process.env.XAI_API_KEY || '',
  baseURL: 'https://api.x.ai/v1'
});

export let bot: TelegramBot | null = null;

const contentTopics = [
  '–ö–∞–∫ ChatGPT —ç–∫–æ–Ω–æ–º–∏—Ç 5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º',
  '–¢–û–ü-5 AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ 2025',
  '–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã',
  'AI –≤ –∫–æ—É—á–∏–Ω–≥–µ: –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
  '–ë—É–¥—É—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: —Ä–æ–ª—å AI –≤ –æ–±—É—á–µ–Ω–∏–∏',
  '–ü—Ä–∞–∫—Ç–∏–∫–∞: —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å AI –∑–∞ 10 –º–∏–Ω—É—Ç',
  '–ö–∞–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å —Å–µ–±—è –ª—É—á—à–µ',
  '–¢–û–ü-3 –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ChatGPT',
  'AI –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç',
  '–ù–µ–π—Ä–æ—Ö–∞–∫–∏–Ω–≥: –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –º—ã—à–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI'
];

// –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∏—à–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Gemini)
async function analyzeClientNiche(userId: string, username?: string): Promise<string> {
  try {
    const analysis = await analyzeNicheWithGemini(username);
    return analysis;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—à–∏:', error);
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–∏—à–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∏—à–∏
async function ensureUser(telegramId: string, username?: string): Promise<{ isNew: boolean; analysis?: string }> {
  try {
    const existingUser = await storage.getUser(telegramId);
    
    if (!existingUser) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await storage.upsertUser({
        id: telegramId,
        email: username ? `${username}@telegram.bot` : `${telegramId}@telegram.bot`,
        name: username || `User ${telegramId}`,
      });
      
      console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${telegramId}`);
      
      // –î–µ–ª–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∏—à–∏
      console.log(`üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—à–∏ –¥–ª—è: ${username || telegramId}`);
      const analysis = await analyzeClientNiche(telegramId, username);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ activity log
      await storage.createActivityLog({
        userId: telegramId,
        platformId: 1, // Telegram
        action: 'Niche Analysis',
        description: 'Deep niche analysis on first login',
        status: 'completed',
        metadata: { analysis }
      });
      
      return { isNew: true, analysis };
    }
    
    return { isNew: false };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}

async function generatePost(topic: string): Promise<string> {
  try {
    const content = await generateContentWithGemini(topic, {
      tone: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π',
      keywords: ['AI', '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '—Ç—Ä–µ–π–¥–∏–Ω–≥'],
      targetAudience: '–ø—Å–∏—Ö–æ–ª–æ–≥–∏, –∫–æ—É—á–∏, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, —Ç—Ä–µ–π–¥–µ—Ä—ã'
    });
    
    return content;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error);
    return `ü§ñ AI –ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–¨\n\n–ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω—ã!\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ üëâ ${CHANNEL_ID}\n\n#AI #–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å #–Ω–µ–π—Ä–æ—Å–µ—Ç–∏`;
  }
}

export async function publishPost() {
  if (!bot) {
    throw new Error('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  
  try {
    const randomTopic = contentTopics[Math.floor(Math.random() * contentTopics.length)];
    const postText = await generatePost(randomTopic);
    
    await bot.sendMessage(CHANNEL_ID, postText);
    console.log(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${new Date().toLocaleString()}`);
    console.log(`üìù –¢–µ–º–∞: ${randomTopic}`);
    return { success: true, topic: randomTopic, text: postText };
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
    throw error;
  }
}

async function publishPoll() {
  if (!bot) return;
  
  try {
    const question = '–ö–∞–∫–æ–π AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —á–∞—â–µ –≤—Å–µ–≥–æ?';
    const options = ['ChatGPT', 'Claude', 'Midjourney', '–î—Ä—É–≥–æ–π'];
    
    await bot.sendPoll(CHANNEL_ID, question, options, {
      is_anonymous: true,
      allows_multiple_answers: false
    });
    
    console.log(`‚úÖ –û–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${new Date().toLocaleString()}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞:', error);
  }
}

export function startTelegramBot() {
  if (!TELEGRAM_TOKEN) {
    console.log('‚ö†Ô∏è BOTTG —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    return;
  }

  bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
  
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üì¢ –ö–∞–Ω–∞–ª: ${CHANNEL_ID}`);
  console.log('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 09:00, 15:00, 20:00 (–ø–æ—Å—Ç—ã), 12:00 –ü–Ω/–ß—Ç (–æ–ø—Ä–æ—Å—ã)');
  console.log('üí° –ö–æ–º–∞–Ω–¥—ã: /start /menu /help');
  console.log('üî• –†–µ–∂–∏–º –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: /niche /spy /trends /viralcheck /blueprint');
  console.log('üéôÔ∏è Voice AI: –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –ø–æ–¥–∫–∞—Å—Ç—ã');
  console.log('üíº Business API: –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∏ FAQ-–±–æ—Ç');
  console.log('‚ú® Premium: —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞');
  console.log('');
  
  cron.schedule('0 9 * * *', () => {
    console.log('‚è∞ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç (9:00)');
    publishPost();
  });
  
  cron.schedule('0 15 * * *', () => {
    console.log('‚è∞ –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç (15:00)');
    publishPost();
  });
  
  cron.schedule('0 20 * * *', () => {
    console.log('‚è∞ –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç (20:00)');
    publishPost();
  });
  
  cron.schedule('0 12 * * 1,4', () => {
    console.log('‚è∞ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–ø—Ä–æ—Å–∞');
    publishPoll();
  });
  
  bot.on('message', async (msg) => {
    if (msg.new_chat_members) {
      const chatId = msg.chat.id;
      await bot!.sendMessage(
        chatId,
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ª—É—á—à–∏–µ –∏–Ω—Å–∞–π—Ç—ã –ø—Ä–æ AI –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã!'
      );
    }
  });

  // === –ë–ò–ó–ù–ï–° –ö–û–ú–ê–ù–î–´ ===
  
  bot.onText(/\/business/, async (msg) => {
    const chatId = msg.chat.id;
    await bot!.sendMessage(chatId, `üíº *TELEGRAM BUSINESS TOOLS*

üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
/webapp - –ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
/invoice - –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
/analytics - –ë–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/autoresponder - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
/chatbot - AI —á–∞—Ç-–±–æ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
/crm - CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞:*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: 234
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 8.9%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 4,500‚ÇΩ
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: 45%`, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/webapp/, async (msg) => {
    const chatId = msg.chat.id;
    await bot!.sendMessage(chatId, '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: 'https://your-domain.repl.co/webapp' }
          }
        ]]
      }
    });
  });

  bot.onText(/\/invoice/, async (msg) => {
    const chatId = msg.chat.id;
    await bot!.sendInvoice(
      chatId,
      'VIP –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª—ã',
      '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º premium —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü',
      `invoice_${Date.now()}`,
      process.env.TELEGRAM_PAYMENT_TOKEN || '',
      'RUB',
      [{ label: 'VIP –ø–æ–¥–ø–∏—Å–∫–∞', amount: 499000 }], // 4990.00 RUB
      {
        photo_url: 'https://your-domain.repl.co/images/vip-banner.jpg',
        need_name: true,
        need_email: true,
      }
    );
  });

  bot.onText(/\/subscription/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    
    await bot!.sendMessage(chatId, `üíé *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*

‚úÖ *–ê–∫—Ç–∏–≤–Ω–∞—è:* VIP Trading Signals
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: 15.02.2025
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 4,990‚ÇΩ/–º–µ—Å

üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –†–∞–Ω–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (99% —Ç–æ—á–Ω–æ—Å—Ç—å)
‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ AI —Ç–æ—Ä–≥–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç –∑–∞ –º–µ—Å—è—Ü: +127,000‚ÇΩ
‚Ä¢ ROI: 2,450%
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 87/92`, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/analytics/, async (msg) => {
    const chatId = msg.chat.id;
    await bot!.sendMessage(chatId, `üìä *BUSINESS ANALYTICS*

üìà *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:*
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: +2,340
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 8,920
‚Ä¢ –û—Ö–≤–∞—Ç –ø–æ—Å—Ç–æ–≤: 145K
‚Ä¢ CTR: 12.8%

üí∞ *–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è:*
‚Ä¢ –î–æ—Ö–æ–¥: 1,234,000‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 4,500‚ÇΩ
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 8.9%
‚Ä¢ LTV –∫–ª–∏–µ–Ω—Ç–∞: 23,400‚ÇΩ

üéØ *–õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã:*
1. "–ö–∞–∫ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª 100K –∑–∞ –Ω–µ–¥–µ–ª—é" - 34K views
2. "5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ" - 28K views
3. "–ú–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä" - 25K views`, { parse_mode: 'Markdown' });
  });

  bot.on('pre_checkout_query', async (query) => {
    await bot!.answerPreCheckoutQuery(query.id, true);
  });

  bot.on('successful_payment', async (msg) => {
    const chatId = msg.chat.id;
    const payment = msg.successful_payment!;
    
    await bot!.sendMessage(chatId, `‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*

üí≥ –°—É–º–º–∞: ${payment.total_amount / 100} ${payment.currency}
üì¶ –ó–∞–∫–∞–∑: ${payment.invoice_payload}

üéâ –í–∞—à–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–ª–∏—Ç—É —Ç—Ä–µ–π–¥–µ—Ä–æ–≤!`, { parse_mode: 'Markdown' });

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ
    const userId = msg.from?.id.toString() || '';
    await storage.createActivityLog({
      userId,
      action: 'Subscription Activated',
      description: `–û–ø–ª–∞—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: ${payment.invoice_payload}`,
      platformId: 1,
      status: 'success',
      metadata: { payment },
    });
  });

  // === –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ===
  
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    const username = msg.from?.username;
    
    try {
      const result = await ensureUser(userId, username);
      
      if (result.isNew && result.analysis) {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∏—à–∏
        await bot!.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Content Creator!

üîç *–ê–ù–ê–õ–ò–ó –í–ê–®–ï–ô –ù–ò–®–ò*
(–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è AI...)`, { parse_mode: 'Markdown' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        await bot!.sendMessage(chatId, result.analysis, { parse_mode: 'Markdown' });
        
        // –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await bot!.sendMessage(chatId, `
üì± *–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:*

üé® *BRAND STYLE*:
/brandstyle - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥
/mybrand - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–µ–Ω–¥
/listbrands - –≤—Å–µ –≤–∞—à–∏ –±—Ä–µ–Ω–¥—ã
/setdefault [id] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å default

üìà *TREND VIDEOS*:
/addtrend [url] - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–¥
/toptrends [limit] - —Ç–æ–ø —Ç—Ä–µ–Ω–¥–æ–≤
/mytrends - –≤–∞—à–∏ —Ç—Ä–µ–Ω–¥—ã
/clonetrend [id] - –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥

üìä *–î–†–£–ì–û–ï*:
/checkchannel - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª
/post - –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`, { parse_mode: 'Markdown' });
      } else {
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await bot!.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

üé® *BRAND STYLE*:
/brandstyle - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥
/mybrand - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–µ–Ω–¥
/listbrands - –≤—Å–µ –≤–∞—à–∏ –±—Ä–µ–Ω–¥—ã
/setdefault [id] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å default

üìà *TREND VIDEOS*:
/addtrend [url] - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–¥
/toptrends [limit] - —Ç–æ–ø —Ç—Ä–µ–Ω–¥–æ–≤
/mytrends - –≤–∞—à–∏ —Ç—Ä–µ–Ω–¥—ã
/clonetrend [id] - –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥

üìä *–î–†–£–ì–û–ï*:
/checkchannel - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª
/post - –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`, { parse_mode: 'Markdown' });
      }
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // === –ö–û–ú–ê–ù–î–ê –ü–†–û–í–ï–†–ö–ò –ö–ê–ù–ê–õ–ê ===
  
  bot.onText(/\/checkchannel/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      await bot!.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª @IIPRB...');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
      let channelInfo;
      try {
        channelInfo = await bot!.getChat(CHANNEL_ID);
      } catch (error: any) {
        await bot!.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É*\n\n–ü—Ä–∏—á–∏–Ω–∞: ${error.message}\n\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n1. –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${CHANNEL_ID}\n2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n3. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é`, { parse_mode: 'Markdown' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      let memberCount = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
      try {
        const count = await bot!.getChatMemberCount(CHANNEL_ID);
        memberCount = count.toString();
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
      let botStatus;
      let canPost = false;
      try {
        const botInfo = await bot!.getMe();
        botStatus = await bot!.getChatMember(CHANNEL_ID, botInfo.id);
        canPost = botStatus.status === 'administrator' && 
                  (botStatus as any).can_post_messages === true;
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      let testMessageSent = false;
      if (canPost) {
        try {
          const testMsg = await bot!.sendMessage(CHANNEL_ID, 'üîß –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞');
          await bot!.deleteMessage(CHANNEL_ID, testMsg.message_id.toString());
          testMessageSent = true;
        } catch (error) {
          console.log('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', error);
        }
      }
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const statusEmoji = canPost && testMessageSent ? '‚úÖ' : '‚ö†Ô∏è';
      const report = `${statusEmoji} *–ü–†–û–í–ï–†–ö–ê –ö–ê–ù–ê–õ–ê*

üì¢ *–ö–∞–Ω–∞–ª:* ${CHANNEL_ID}
üìä *–¢–∏–ø:* ${channelInfo.type}
${channelInfo.title ? `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${channelInfo.title}` : ''}
${channelInfo.description ? `üìã *–û–ø–∏—Å–∞–Ω–∏–µ:* ${channelInfo.description}` : ''}
üë• *–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:* ${memberCount}

ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:*
${botStatus ? `‚ñ´Ô∏è –†–æ–ª—å: ${botStatus.status}` : '‚ñ´Ô∏è –†–æ–ª—å: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
${canPost ? '‚úÖ –ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã' : '‚ùå –ù–ï –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
${testMessageSent ? '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ' : ''}

${canPost && testMessageSent ? 'üéâ *–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*' : '‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:*\n1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤'}

üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:*
‚ñ´Ô∏è 09:00 - –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
‚ñ´Ô∏è 15:00 - –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç  
‚ñ´Ô∏è 20:00 - –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç
‚ñ´Ô∏è 12:00 –ü–Ω/–ß—Ç - –û–ø—Ä–æ—Å—ã`;

      await bot!.sendMessage(chatId, report, { parse_mode: 'Markdown' });
      
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
    }
  });

  // === BRAND STYLE –ö–û–ú–ê–ù–î–´ ===
  
  bot.onText(/\/brandstyle/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      await bot!.sendMessage(chatId, 'üé® *–°–æ–∑–¥–∞–Ω–∏–µ Brand Style*\n\n–®–∞–≥ 1/4: –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞\n–ü—Ä–∏–º–µ—Ä: "Trading Signals PRO"', { parse_mode: 'Markdown' });
      // TODO: Implement multi-step dialog with user state
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  bot.onText(/\/mybrand/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      const brandStyle = await storage.getDefaultBrandStyle(userId);
      
      if (!brandStyle) {
        await bot!.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.\n\n–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /brandstyle');
        return;
      }
      
      const message = `üé® *–ê–∫—Ç–∏–≤–Ω—ã–π Brand Style*

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${brandStyle.name}
${brandStyle.description ? `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${brandStyle.description}` : ''}

üé® *–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å:*
${brandStyle.primaryColor ? `‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç: ${brandStyle.primaryColor}` : ''}
${brandStyle.secondaryColor ? `‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç: ${brandStyle.secondaryColor}` : ''}
${brandStyle.visualStyle ? `‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: ${brandStyle.visualStyle}` : ''}

üó£ *Tone & Voice:*
‚Ä¢ Tone: ${brandStyle.tone}
${brandStyle.voice ? `‚Ä¢ Voice: ${brandStyle.voice}` : ''}

üé¨ *–í–∏–¥–µ–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
${brandStyle.videoStyle ? `‚Ä¢ –°—Ç–∏–ª—å: ${brandStyle.videoStyle}` : ''}
‚Ä¢ Aspect Ratio: ${brandStyle.aspectRatio || '9:16'}
‚Ä¢ Duration: ${brandStyle.duration || 30}sec

${brandStyle.ctaText ? `üì¢ CTA: ${brandStyle.ctaText}` : ''}
${brandStyle.ctaUrl ? `üîó URL: ${brandStyle.ctaUrl}` : ''}

ID: ${brandStyle.id}`;
      
      await bot!.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  bot.onText(/\/listbrands/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      const brands = await storage.getBrandStylesByUserId(userId);
      
      if (brands.length === 0) {
        await bot!.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–µ–Ω–¥–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–º–∞–Ω–¥–æ–π /brandstyle');
        return;
      }
      
      let message = `üé® *–í–∞—à–∏ Brand Styles* (${brands.length})\n\n`;
      
      for (const brand of brands) {
        const defaultMark = brand.isDefault ? '‚≠ê ' : '';
        const activeMark = brand.isActive ? '‚úÖ' : '‚ùå';
        message += `${defaultMark}*${brand.name}* (ID: ${brand.id}) ${activeMark}\n`;
        message += `   Tone: ${brand.tone}\n`;
        if (brand.videoStyle) message += `   Video: ${brand.videoStyle}\n`;
        message += `\n`;
      }
      
      message += `\nüí° /setdefault [id] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å default`;
      
      await bot!.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  bot.onText(/\/setdefault(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    const brandId = match?.[1] ? parseInt(match[1]) : null;
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      if (!brandId) {
        await bot!.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –±—Ä–µ–Ω–¥–∞\n\n–ü—Ä–∏–º–µ—Ä: /setdefault 1');
        return;
      }
      
      await storage.setDefaultBrandStyle(userId, brandId);
      await bot!.sendMessage(chatId, `‚úÖ –ë—Ä–µ–Ω–¥ ${brandId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ default!`);
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // === TREND VIDEOS –ö–û–ú–ê–ù–î–´ ===
  
  bot.onText(/\/addtrend(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    const url = match?.[1];
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      if (!url) {
        await bot!.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ URL —Ç—Ä–µ–Ω–¥–∞\n\n–ü—Ä–∏–º–µ—Ä: /addtrend https://tiktok.com/@user/video/123');
        return;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL
      let source = 'tiktok';
      if (url.includes('youtube.com') || url.includes('youtu.be')) source = 'youtube';
      if (url.includes('instagram.com')) source = 'instagram';
      
      const trend = await storage.createTrendVideo({
        userId,
        source,
        sourceUrl: url,
        title: '–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥',
        status: 'pending'
      });
      
      await bot!.sendMessage(chatId, `‚úÖ –¢—Ä–µ–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nID: ${trend.id}\nSource: ${source}\nURL: ${url}\n\nüí° –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ: /clonetrend ${trend.id}`);
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  bot.onText(/\/toptrends(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const limit = match?.[1] ? parseInt(match[1]) : 10;
    
    try {
      const trends = await storage.getTopTrends(limit);
      
      if (trends.length === 0) {
        await bot!.sendMessage(chatId, '‚ùå –¢—Ä–µ–Ω–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π: /addtrend [url]');
        return;
      }
      
      let message = `üìà *–¢–û–ü-${trends.length} –¢–†–ï–ù–î–û–í*\n\n`;
      
      for (const trend of trends) {
        const score = trend.trendScore || 0;
        const views = trend.views ? `${(trend.views / 1000).toFixed(0)}K views` : 'N/A';
        message += `üî• *${trend.title}* (ID: ${trend.id})\n`;
        message += `   Score: ${score.toFixed(1)} | ${views}\n`;
        message += `   Source: ${trend.source}\n\n`;
      }
      
      message += `\nüí° –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: /clonetrend [id]`;
      
      await bot!.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  bot.onText(/\/mytrends/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      const trends = await storage.getTrendVideosByUserId(userId);
      
      if (trends.length === 0) {
        await bot!.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ: /addtrend [url]');
        return;
      }
      
      const pending = trends.filter(t => t.status === 'pending');
      const cloned = trends.filter(t => t.status === 'cloned');
      const published = trends.filter(t => t.status === 'published');
      
      let message = `üìà *–í–∞—à–∏ —Ç—Ä–µ–Ω–¥—ã* (${trends.length})\n\n`;
      
      if (pending.length > 0) {
        message += `‚è≥ *Pending (${pending.length}):*\n`;
        pending.forEach(t => message += `‚Ä¢ ${t.title} (ID: ${t.id})\n`);
        message += '\n';
      }
      
      if (cloned.length > 0) {
        message += `‚úÖ *Cloned (${cloned.length}):*\n`;
        cloned.forEach(t => message += `‚Ä¢ ${t.title} (ID: ${t.id})\n`);
        message += '\n';
      }
      
      if (published.length > 0) {
        message += `üì§ *Published (${published.length}):*\n`;
        published.forEach(t => message += `‚Ä¢ ${t.title} (ID: ${t.id})\n`);
      }
      
      await bot!.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  bot.onText(/\/clonetrend(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id.toString() || '';
    const trendId = match?.[1] ? parseInt(match[1]) : null;
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      if (!trendId) {
        await bot!.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç—Ä–µ–Ω–¥–∞\n\n–ü—Ä–∏–º–µ—Ä: /clonetrend 1');
        return;
      }
      
      const trend = await storage.getTrendVideoById(trendId);
      
      if (!trend) {
        await bot!.sendMessage(chatId, '‚ùå –¢—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ cloned
      await storage.updateTrendVideoStatus(trendId, 'cloned', null);
      
      await bot!.sendMessage(chatId, `‚úÖ –¢—Ä–µ–Ω–¥ ${trendId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ cloned!\n\nüìù ${trend.title}\nüîó ${trend.sourceUrl}\n\nüí° –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`);
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –ö–û–ú–ê–ù–î ===
  
  bot.on('message', async (msg) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å '/' –∫–æ–º–∞–Ω–¥–∞–º–∏ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (msg.text?.startsWith('/')) return;
    
    const chatId = msg.chat.id;
    const text = msg.text?.toLowerCase() || '';
    const userId = msg.from?.id.toString() || '';
    
    try {
      await ensureUser(userId, msg.from?.username);
      
      // –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      if (text.includes('–ø–æ—Å—Ç') || text.includes('–æ–ø—É–±–ª–∏–∫—É–π') || text.includes('—Å–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç')) {
        await bot!.sendMessage(chatId, 'üìù –°–æ–∑–¥–∞—é –ø–æ—Å—Ç...');
        const result = await publishPost();
        await bot!.sendMessage(chatId, `‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n–¢–µ–º–∞: ${result.topic}`);
      }
      
      else if (text.includes('–æ–ø—Ä–æ—Å') || text.includes('–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')) {
        await bot!.sendMessage(chatId, 'üìä –°–æ–∑–¥–∞—é –æ–ø—Ä–æ—Å...');
        await publishPoll();
        await bot!.sendMessage(chatId, '‚úÖ –û–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
      }
      
      else if (text.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || text.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫–∞')) {
        const stats = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

‚úÖ –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: 3
‚úÖ –û–ø—Ä–æ—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é: 2
‚úÖ AI –º–æ–¥–µ–ª—å: Gemini 2.0
‚úÖ –ö–∞–Ω–∞–ª: ${CHANNEL_ID}

*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*
‚Ä¢ 09:00 - —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
‚Ä¢ 15:00 - –¥–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç  
‚Ä¢ 20:00 - –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç
‚Ä¢ 12:00 (–ü–Ω, –ß—Ç) - –æ–ø—Ä–æ—Å`;
        await bot!.sendMessage(chatId, stats, { parse_mode: 'Markdown' });
      }
      
      else if (text.includes('–º–æ–π –±—Ä–µ–Ω–¥') || text.includes('–±—Ä–∞–Ω–¥')) {
        const brandStyle = await storage.getDefaultBrandStyle(userId);
        
        if (!brandStyle) {
          await bot!.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.\n\n–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: /brandstyle');
          return;
        }
        
        const message = `üé® *–ê–∫—Ç–∏–≤–Ω—ã–π Brand Style*

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${brandStyle.name}
üé® –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç: ${brandStyle.primaryColor || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üó£ Tone: ${brandStyle.tone}

ID: ${brandStyle.id}`;
        
        await bot!.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      
      else if (text.includes('—Ç—Ä–µ–Ω–¥') || text.includes('–≤–∏—Ä—É—Å')) {
        const trends = await storage.getTopTrends(5);
        
        if (trends.length === 0) {
          await bot!.sendMessage(chatId, '‚ùå –¢—Ä–µ–Ω–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: /addtrend [url]');
          return;
        }
        
        let message = `üìà *–¢–û–ü-${trends.length} –¢–†–ï–ù–î–û–í*\n\n`;
        
        for (const trend of trends) {
          const score = trend.trendScore || 0;
          message += `üî• ${trend.title} (Score: ${score.toFixed(1)})\n`;
        }
        
        await bot!.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      
      else if (text.includes('–ø–æ–º–æ—â—å') || text.includes('–∫–æ–º–∞–Ω–¥') || text.includes('—á—Ç–æ —É–º–µ–µ—à—å')) {
        const help = `üí° *–Ø –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:*

üìù *–ö–æ–Ω—Ç–µ–Ω—Ç:*
‚Ä¢ "—Å–æ–∑–¥–∞–π –ø–æ—Å—Ç" / "–æ–ø—É–±–ª–∏–∫—É–π –∫–æ–Ω—Ç–µ–Ω—Ç"
‚Ä¢ "—Å–æ–∑–¥–∞–π –æ–ø—Ä–æ—Å" / "—Å–¥–µ–ª–∞–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"

üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:*
‚Ä¢ "–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" / "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
‚Ä¢ "–º–æ–π –±—Ä–µ–Ω–¥" / "–±—Ä–µ–Ω–¥—Å—Ç–∞–π–ª"
‚Ä¢ "–ø–æ–∫–∞–∂–∏ —Ç—Ä–µ–Ω–¥—ã" / "–≤–∏—Ä—É—Å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã"

üé® *–ë—Ä–µ–Ω–¥:*
‚Ä¢ "—Å–æ–∑–¥–∞–π –±—Ä–µ–Ω–¥" ‚Üí /brandstyle
‚Ä¢ "–º–æ–∏ –±—Ä–µ–Ω–¥—ã" ‚Üí /listbrands

üìà *–¢—Ä–µ–Ω–¥—ã:*
‚Ä¢ "–¥–æ–±–∞–≤—å —Ç—Ä–µ–Ω–¥ [url]" ‚Üí /addtrend
‚Ä¢ "–∫–ª–æ–Ω–∏—Ä—É–π —Ç—Ä–µ–Ω–¥ [id]" ‚Üí /clonetrend

üîç *–î—Ä—É–≥–æ–µ:*
‚Ä¢ "–ø—Ä–æ–≤–µ—Ä—å –∫–∞–Ω–∞–ª" ‚Üí /checkchannel
‚Ä¢ "–ø–æ–º–æ—â—å" - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–¢–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /`;
        
        await bot!.sendMessage(chatId, help, { parse_mode: 'Markdown' });
      }
      
      else if (text.includes('–∫–∞–Ω–∞–ª') || text.includes('–ø—Ä–æ–≤–µ—Ä—å')) {
        await bot!.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª...');
        
        try {
          const channelInfo = await bot!.getChat(CHANNEL_ID);
          let memberCount = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
          try {
            const count = await bot!.getChatMemberCount(CHANNEL_ID);
            memberCount = count.toString();
          } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
          }
          
          const report = `‚úÖ *–ö–ê–ù–ê–õ –ü–†–û–í–ï–†–ï–ù*

üì¢ –ö–∞–Ω–∞–ª: ${CHANNEL_ID}
${channelInfo.title ? `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${channelInfo.title}` : ''}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${memberCount}

üéâ –ö–∞–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç!`;
          
          await bot!.sendMessage(chatId, report, { parse_mode: 'Markdown' });
        } catch (error: any) {
          await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞: ${error.message}`);
        }
      }
      
      else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
        await bot!.sendMessage(chatId, 'ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.\n\n–ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.');
      }
      
    } catch (error: any) {
      await bot!.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // Callback –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  bot.on('callback_query', async (query) => {
    const chatId = query.message?.chat.id;
    const data = query.data;
    
    if (!chatId || !data) return;
    
    if (data.startsWith('publish_cloned_')) {
      const aiVideoId = parseInt(data.replace('publish_cloned_', ''));
      
      try {
        const aiVideo = await storage.getAIVideoById(aiVideoId);
        
        if (!aiVideo) {
          await bot!.answerCallbackQuery(query.id, { text: '‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
          return;
        }
        
        // –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot!.sendVideo(CHANNEL_ID, aiVideo.videoUrl!, {
          caption: aiVideo.prompt || 'AI Generated Video'
        });
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        await storage.createPost({
          userId: aiVideo.userId,
          platformId: 1, // Telegram
          content: aiVideo.prompt || 'AI Generated Video',
          mediaUrls: [aiVideo.videoUrl!],
          aiVideoId: aiVideo.id
        });
        
        await bot!.answerCallbackQuery(query.id, { text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!' });
        await bot!.sendMessage(chatId, `‚úÖ *–í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!*\n\nüì¢ ${CHANNEL_ID}`, { parse_mode: 'Markdown' });
      } catch (error: any) {
        await bot!.answerCallbackQuery(query.id, { text: `‚ùå ${error.message}` });
      }
    }
  });

  // === –°–¢–ê–†–´–ï –ö–û–ú–ê–ù–î–´ ===
  
  bot.onText(/\/post/, async (msg) => {
    const chatId = msg.chat.id;
    await bot!.sendMessage(chatId, 'üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...');
    await publishPost();
  });
  
  bot.onText(/\/poll/, async (msg) => {
    const chatId = msg.chat.id;
    await bot!.sendMessage(chatId, 'üìä –°–æ–∑–¥–∞—é –æ–ø—Ä–æ—Å...');
    await publishPoll();
  });
  
  bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    const stats = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

‚úÖ –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: 3
‚úÖ –û–ø—Ä–æ—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é: 2
‚úÖ AI –º–æ–¥–µ–ª—å: Grok 2
‚úÖ –ö–∞–Ω–∞–ª: ${CHANNEL_ID}

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
‚Ä¢ 09:00 - —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
‚Ä¢ 15:00 - –¥–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç  
‚Ä¢ 20:00 - –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç
‚Ä¢ 12:00 (–ü–Ω, –ß—Ç) - –æ–ø—Ä–æ—Å
    `;
    await bot!.sendMessage(chatId, stats);
  });

  bot.onText(/\/roll(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const maxNumber = match && match[1] ? parseInt(match[1]) : 6;
    
    if (maxNumber < 2 || maxNumber > 1000) {
      await bot!.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 1000!\n–ü—Ä–∏–º–µ—Ä: /roll 100');
      return;
    }
    
    const result = Math.floor(Math.random() * maxNumber) + 1;
    await bot!.sendMessage(chatId, `üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (1-${maxNumber}):\n\nüéØ –í—ã–ø–∞–ª–æ: ${result}`);
  });
}
